// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

namespace PutridParrot.Units
{
	/// <summary>
	/// Length conversion functions
	/// </summary>
	public static class Length
	{
		/// <summary>
		/// Centimetres conversion functions
		/// </summary>
		public static class Centimetres
		{
			/// <summary>
			/// Converts the supplied Centimetres value to Millimetres
			/// </summary>
			/// <param name="value">The Centimetres input value</param>
			/// <returns>The value in Millimetres</returns>
			public static double ToMillimetres(double value) => value * 10.0;
			/// <summary>
			/// Converts the supplied Centimetres value to Metres
			/// </summary>
			/// <param name="value">The Centimetres input value</param>
			/// <returns>The value in Metres</returns>
			public static double ToMetres(double value) => value / 100.0;
			/// <summary>
			/// Converts the supplied Centimetres value to Kilometres
			/// </summary>
			/// <param name="value">The Centimetres input value</param>
			/// <returns>The value in Kilometres</returns>
			public static double ToKilometres(double value) => value / 100000.0;
			/// <summary>
			/// Converts the supplied Centimetres value to Inches
			/// </summary>
			/// <param name="value">The Centimetres input value</param>
			/// <returns>The value in Inches</returns>
			public static double ToInches(double value) => value / 2.54;
			/// <summary>
			/// Converts the supplied Centimetres value to Feet
			/// </summary>
			/// <param name="value">The Centimetres input value</param>
			/// <returns>The value in Feet</returns>
			public static double ToFeet(double value) => value / 30.48;
			/// <summary>
			/// Converts the supplied Centimetres value to Yards
			/// </summary>
			/// <param name="value">The Centimetres input value</param>
			/// <returns>The value in Yards</returns>
			public static double ToYards(double value) => value / 91.44;
			/// <summary>
			/// Converts the supplied Centimetres value to Miles
			/// </summary>
			/// <param name="value">The Centimetres input value</param>
			/// <returns>The value in Miles</returns>
			public static double ToMiles(double value) => value / 160934.4;
			/// <summary>
			/// Converts the supplied Centimetres value to Nautical Miles
			/// </summary>
			/// <param name="value">The Centimetres input value</param>
			/// <returns>The value in Nautical Miles</returns>
			public static double ToNauticalMiles(double value) => value / 185200.0;
		}
		/// <summary>
		/// Feet conversion functions
		/// </summary>
		public static class Feet
		{
			/// <summary>
			/// Converts the supplied Feet value to Millimetres
			/// </summary>
			/// <param name="value">The Feet input value</param>
			/// <returns>The value in Millimetres</returns>
			public static double ToMillimetres(double value) => value * 304.8;
			/// <summary>
			/// Converts the supplied Feet value to Centimetres
			/// </summary>
			/// <param name="value">The Feet input value</param>
			/// <returns>The value in Centimetres</returns>
			public static double ToCentimetres(double value) => value * 30.48;
			/// <summary>
			/// Converts the supplied Feet value to Metres
			/// </summary>
			/// <param name="value">The Feet input value</param>
			/// <returns>The value in Metres</returns>
			public static double ToMetres(double value) => value * 0.3048;
			/// <summary>
			/// Converts the supplied Feet value to Kilometres
			/// </summary>
			/// <param name="value">The Feet input value</param>
			/// <returns>The value in Kilometres</returns>
			public static double ToKilometres(double value) => value * 0.0003048;
			/// <summary>
			/// Converts the supplied Feet value to Inches
			/// </summary>
			/// <param name="value">The Feet input value</param>
			/// <returns>The value in Inches</returns>
			public static double ToInches(double value) => value * 12.0;
			/// <summary>
			/// Converts the supplied Feet value to Yards
			/// </summary>
			/// <param name="value">The Feet input value</param>
			/// <returns>The value in Yards</returns>
			public static double ToYards(double value) => value / 3.0;
			/// <summary>
			/// Converts the supplied Feet value to Miles
			/// </summary>
			/// <param name="value">The Feet input value</param>
			/// <returns>The value in Miles</returns>
			public static double ToMiles(double value) => value / 5280.0;
			/// <summary>
			/// Converts the supplied Feet value to Nautical Miles
			/// </summary>
			/// <param name="value">The Feet input value</param>
			/// <returns>The value in Nautical Miles</returns>
			public static double ToNauticalMiles(double value) => value / 6076.12;
		}
		/// <summary>
		/// Inches conversion functions
		/// </summary>
		public static class Inches
		{
			/// <summary>
			/// Converts the supplied Inches value to Millimetres
			/// </summary>
			/// <param name="value">The Inches input value</param>
			/// <returns>The value in Millimetres</returns>
			public static double ToMillimetres(double value) => value * 25.4;
			/// <summary>
			/// Converts the supplied Inches value to Centimetres
			/// </summary>
			/// <param name="value">The Inches input value</param>
			/// <returns>The value in Centimetres</returns>
			public static double ToCentimetres(double value) => value * 2.54;
			/// <summary>
			/// Converts the supplied Inches value to Metres
			/// </summary>
			/// <param name="value">The Inches input value</param>
			/// <returns>The value in Metres</returns>
			public static double ToMetres(double value) => value / 39.3701;
			/// <summary>
			/// Converts the supplied Inches value to Kilometres
			/// </summary>
			/// <param name="value">The Inches input value</param>
			/// <returns>The value in Kilometres</returns>
			public static double ToKilometres(double value) => value / 39370.07874;
			/// <summary>
			/// Converts the supplied Inches value to Feet
			/// </summary>
			/// <param name="value">The Inches input value</param>
			/// <returns>The value in Feet</returns>
			public static double ToFeet(double value) => value / 12.0;
			/// <summary>
			/// Converts the supplied Inches value to Yards
			/// </summary>
			/// <param name="value">The Inches input value</param>
			/// <returns>The value in Yards</returns>
			public static double ToYards(double value) => value / 36.0;
			/// <summary>
			/// Converts the supplied Inches value to Miles
			/// </summary>
			/// <param name="value">The Inches input value</param>
			/// <returns>The value in Miles</returns>
			public static double ToMiles(double value) => value / 63360.0;
			/// <summary>
			/// Converts the supplied Inches value to Nautical Miles
			/// </summary>
			/// <param name="value">The Inches input value</param>
			/// <returns>The value in Nautical Miles</returns>
			public static double ToNauticalMiles(double value) => value / 72913.4;
		}
		/// <summary>
		/// Kilometres conversion functions
		/// </summary>
		public static class Kilometres
		{
			/// <summary>
			/// Converts the supplied Kilometres value to Millimetres
			/// </summary>
			/// <param name="value">The Kilometres input value</param>
			/// <returns>The value in Millimetres</returns>
			public static double ToMillimetres(double value) => value * 1000000.0;
			/// <summary>
			/// Converts the supplied Kilometres value to Centimetres
			/// </summary>
			/// <param name="value">The Kilometres input value</param>
			/// <returns>The value in Centimetres</returns>
			public static double ToCentimetres(double value) => value * 100000.0;
			/// <summary>
			/// Converts the supplied Kilometres value to Metres
			/// </summary>
			/// <param name="value">The Kilometres input value</param>
			/// <returns>The value in Metres</returns>
			public static double ToMetres(double value) => value * 1000.0;
			/// <summary>
			/// Converts the supplied Kilometres value to Inches
			/// </summary>
			/// <param name="value">The Kilometres input value</param>
			/// <returns>The value in Inches</returns>
			public static double ToInches(double value) => value * 39370.07874;
			/// <summary>
			/// Converts the supplied Kilometres value to Feet
			/// </summary>
			/// <param name="value">The Kilometres input value</param>
			/// <returns>The value in Feet</returns>
			public static double ToFeet(double value) => value / 0.0003048;
			/// <summary>
			/// Converts the supplied Kilometres value to Yards
			/// </summary>
			/// <param name="value">The Kilometres input value</param>
			/// <returns>The value in Yards</returns>
			public static double ToYards(double value) => value / 0.0009144;
			/// <summary>
			/// Converts the supplied Kilometres value to Miles
			/// </summary>
			/// <param name="value">The Kilometres input value</param>
			/// <returns>The value in Miles</returns>
			public static double ToMiles(double value) => value / 1.609344;
			/// <summary>
			/// Converts the supplied Kilometres value to Nautical Miles
			/// </summary>
			/// <param name="value">The Kilometres input value</param>
			/// <returns>The value in Nautical Miles</returns>
			public static double ToNauticalMiles(double value) => value / 1.85200;
		}
		/// <summary>
		/// Metres conversion functions
		/// </summary>
		public static class Metres
		{
			/// <summary>
			/// Converts the supplied Metres value to Millimetres
			/// </summary>
			/// <param name="value">The Metres input value</param>
			/// <returns>The value in Millimetres</returns>
			public static double ToMillimetres(double value) => value * 1000.0;
			/// <summary>
			/// Converts the supplied Metres value to Centimetres
			/// </summary>
			/// <param name="value">The Metres input value</param>
			/// <returns>The value in Centimetres</returns>
			public static double ToCentimetres(double value) => value * 100.0;
			/// <summary>
			/// Converts the supplied Metres value to Kilometres
			/// </summary>
			/// <param name="value">The Metres input value</param>
			/// <returns>The value in Kilometres</returns>
			public static double ToKilometres(double value) => value / 1000.0;
			/// <summary>
			/// Converts the supplied Metres value to Inches
			/// </summary>
			/// <param name="value">The Metres input value</param>
			/// <returns>The value in Inches</returns>
			public static double ToInches(double value) => value * 39.3701;
			/// <summary>
			/// Converts the supplied Metres value to Feet
			/// </summary>
			/// <param name="value">The Metres input value</param>
			/// <returns>The value in Feet</returns>
			public static double ToFeet(double value) => value / 0.3048;
			/// <summary>
			/// Converts the supplied Metres value to Yards
			/// </summary>
			/// <param name="value">The Metres input value</param>
			/// <returns>The value in Yards</returns>
			public static double ToYards(double value) => value / 0.9144;
			/// <summary>
			/// Converts the supplied Metres value to Miles
			/// </summary>
			/// <param name="value">The Metres input value</param>
			/// <returns>The value in Miles</returns>
			public static double ToMiles(double value) => value / 1609.344;
			/// <summary>
			/// Converts the supplied Metres value to Nautical Miles
			/// </summary>
			/// <param name="value">The Metres input value</param>
			/// <returns>The value in Nautical Miles</returns>
			public static double ToNauticalMiles(double value) => value / 1852.0;
		}
		/// <summary>
		/// Miles conversion functions
		/// </summary>
		public static class Miles
		{
			/// <summary>
			/// Converts the supplied Miles value to Millimetres
			/// </summary>
			/// <param name="value">The Miles input value</param>
			/// <returns>The value in Millimetres</returns>
			public static double ToMillimetres(double value) => value * 1609344.0;
			/// <summary>
			/// Converts the supplied Miles value to Centimetres
			/// </summary>
			/// <param name="value">The Miles input value</param>
			/// <returns>The value in Centimetres</returns>
			public static double ToCentimetres(double value) => value * 160934.4;
			/// <summary>
			/// Converts the supplied Miles value to Metres
			/// </summary>
			/// <param name="value">The Miles input value</param>
			/// <returns>The value in Metres</returns>
			public static double ToMetres(double value) => value * 1609.344;
			/// <summary>
			/// Converts the supplied Miles value to Kilometres
			/// </summary>
			/// <param name="value">The Miles input value</param>
			/// <returns>The value in Kilometres</returns>
			public static double ToKilometres(double value) => value * 1.609344;
			/// <summary>
			/// Converts the supplied Miles value to Inches
			/// </summary>
			/// <param name="value">The Miles input value</param>
			/// <returns>The value in Inches</returns>
			public static double ToInches(double value) => value * 63360.0;
			/// <summary>
			/// Converts the supplied Miles value to Feet
			/// </summary>
			/// <param name="value">The Miles input value</param>
			/// <returns>The value in Feet</returns>
			public static double ToFeet(double value) => value * 5280.0;
			/// <summary>
			/// Converts the supplied Miles value to Yards
			/// </summary>
			/// <param name="value">The Miles input value</param>
			/// <returns>The value in Yards</returns>
			public static double ToYards(double value) => value * 1760.0;
			/// <summary>
			/// Converts the supplied Miles value to Nautical Miles
			/// </summary>
			/// <param name="value">The Miles input value</param>
			/// <returns>The value in Nautical Miles</returns>
			public static double ToNauticalMiles(double value) => value / 1.15078;
		}
		/// <summary>
		/// Millimetres conversion functions
		/// </summary>
		public static class Millimetres
		{
			/// <summary>
			/// Converts the supplied Millimetres value to Centimetres
			/// </summary>
			/// <param name="value">The Millimetres input value</param>
			/// <returns>The value in Centimetres</returns>
			public static double ToCentimetres(double value) => value / 10.0;
			/// <summary>
			/// Converts the supplied Millimetres value to Metres
			/// </summary>
			/// <param name="value">The Millimetres input value</param>
			/// <returns>The value in Metres</returns>
			public static double ToMetres(double value) => value / 1000.0;
			/// <summary>
			/// Converts the supplied Millimetres value to Kilometres
			/// </summary>
			/// <param name="value">The Millimetres input value</param>
			/// <returns>The value in Kilometres</returns>
			public static double ToKilometres(double value) => value / 1000000.0;
			/// <summary>
			/// Converts the supplied Millimetres value to Inches
			/// </summary>
			/// <param name="value">The Millimetres input value</param>
			/// <returns>The value in Inches</returns>
			public static double ToInches(double value) => value / 25.4;
			/// <summary>
			/// Converts the supplied Millimetres value to Feet
			/// </summary>
			/// <param name="value">The Millimetres input value</param>
			/// <returns>The value in Feet</returns>
			public static double ToFeet(double value) => value / 304.8;
			/// <summary>
			/// Converts the supplied Millimetres value to Yards
			/// </summary>
			/// <param name="value">The Millimetres input value</param>
			/// <returns>The value in Yards</returns>
			public static double ToYards(double value) => value / 914.4;
			/// <summary>
			/// Converts the supplied Millimetres value to Miles
			/// </summary>
			/// <param name="value">The Millimetres input value</param>
			/// <returns>The value in Miles</returns>
			public static double ToMiles(double value) => value / 1609344.0;
			/// <summary>
			/// Converts the supplied Millimetres value to Nautical Miles
			/// </summary>
			/// <param name="value">The Millimetres input value</param>
			/// <returns>The value in Nautical Miles</returns>
			public static double ToNauticalMiles(double value) => value / 1852000.0;
		}
		/// <summary>
		/// Nautical Miles conversion functions
		/// </summary>
		public static class NauticalMiles
		{
			/// <summary>
			/// Converts the supplied Nautical Miles value to Millimetres
			/// </summary>
			/// <param name="value">The Nautical Miles input value</param>
			/// <returns>The value in Millimetres</returns>
			public static double ToMillimetres(double value) => value * 1852000.0;
			/// <summary>
			/// Converts the supplied Nautical Miles value to Centimetres
			/// </summary>
			/// <param name="value">The Nautical Miles input value</param>
			/// <returns>The value in Centimetres</returns>
			public static double ToCentimetres(double value) => value * 185200.0;
			/// <summary>
			/// Converts the supplied Nautical Miles value to Metres
			/// </summary>
			/// <param name="value">The Nautical Miles input value</param>
			/// <returns>The value in Metres</returns>
			public static double ToMetres(double value) => value * 1852.0;
			/// <summary>
			/// Converts the supplied Nautical Miles value to Kilometres
			/// </summary>
			/// <param name="value">The Nautical Miles input value</param>
			/// <returns>The value in Kilometres</returns>
			public static double ToKilometres(double value) => value * 1.85200;
			/// <summary>
			/// Converts the supplied Nautical Miles value to Inches
			/// </summary>
			/// <param name="value">The Nautical Miles input value</param>
			/// <returns>The value in Inches</returns>
			public static double ToInches(double value) => value * 72913.4;
			/// <summary>
			/// Converts the supplied Nautical Miles value to Feet
			/// </summary>
			/// <param name="value">The Nautical Miles input value</param>
			/// <returns>The value in Feet</returns>
			public static double ToFeet(double value) => value * 6076.12;
			/// <summary>
			/// Converts the supplied Nautical Miles value to Yards
			/// </summary>
			/// <param name="value">The Nautical Miles input value</param>
			/// <returns>The value in Yards</returns>
			public static double ToYards(double value) => value * 2025.37;
			/// <summary>
			/// Converts the supplied Nautical Miles value to Miles
			/// </summary>
			/// <param name="value">The Nautical Miles input value</param>
			/// <returns>The value in Miles</returns>
			public static double ToMiles(double value) => value * 1.15078;
		}
		/// <summary>
		/// Yards conversion functions
		/// </summary>
		public static class Yards
		{
			/// <summary>
			/// Converts the supplied Yards value to Millimetres
			/// </summary>
			/// <param name="value">The Yards input value</param>
			/// <returns>The value in Millimetres</returns>
			public static double ToMillimetres(double value) => value * 914.4;
			/// <summary>
			/// Converts the supplied Yards value to Centimetres
			/// </summary>
			/// <param name="value">The Yards input value</param>
			/// <returns>The value in Centimetres</returns>
			public static double ToCentimetres(double value) => value * 91.44;
			/// <summary>
			/// Converts the supplied Yards value to Metres
			/// </summary>
			/// <param name="value">The Yards input value</param>
			/// <returns>The value in Metres</returns>
			public static double ToMetres(double value) => value * 0.9144;
			/// <summary>
			/// Converts the supplied Yards value to Kilometres
			/// </summary>
			/// <param name="value">The Yards input value</param>
			/// <returns>The value in Kilometres</returns>
			public static double ToKilometres(double value) => value * 0.0009144;
			/// <summary>
			/// Converts the supplied Yards value to Inches
			/// </summary>
			/// <param name="value">The Yards input value</param>
			/// <returns>The value in Inches</returns>
			public static double ToInches(double value) => value * 36.0;
			/// <summary>
			/// Converts the supplied Yards value to Feet
			/// </summary>
			/// <param name="value">The Yards input value</param>
			/// <returns>The value in Feet</returns>
			public static double ToFeet(double value) => value * 3.0;
			/// <summary>
			/// Converts the supplied Yards value to Miles
			/// </summary>
			/// <param name="value">The Yards input value</param>
			/// <returns>The value in Miles</returns>
			public static double ToMiles(double value) => value / 1760.0;
			/// <summary>
			/// Converts the supplied Yards value to Nautical Miles
			/// </summary>
			/// <param name="value">The Yards input value</param>
			/// <returns>The value in Nautical Miles</returns>
			public static double ToNauticalMiles(double value) => value / 2025.37;
		}
	}
}
