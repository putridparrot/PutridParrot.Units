// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

using NUnit.Framework;
using FsCheck;
using PropertyAttribute = FsCheck.NUnit.PropertyAttribute;

namespace PutridParrot.Units.Tests
{
	public class BitsTests
	{
		[Property]
		public void FromBitsToKilobitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Bits.ToKilobits(value);
				var convertBack = DataStorage.Kilobits.ToBits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100.0, 0.1)]
		[TestCase(6021.0, 6.021)]
		[TestCase(9100.0, 9.1)]
		public void ConvertKnownBitsToKilobits(double input, double expectation)
		{
			var result = DataStorage.Bits.ToKilobits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsToMegabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Bits.ToMegabits(value);
				var convertBack = DataStorage.Megabits.ToBits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9000000.0, 9.0)]
		[TestCase(123456.0, 0.123456)]
		[TestCase(1900000.0, 1.9)]
		public void ConvertKnownBitsToMegabits(double input, double expectation)
		{
			var result = DataStorage.Bits.ToMegabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsToGigabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Bits.ToGigabits(value);
				var convertBack = DataStorage.Gigabits.ToBits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(190000000.0, 0.19)]
		[TestCase(8009.0, 8.009e-6)]
		[TestCase(987654321.0, 0.987654321)]
		public void ConvertKnownBitsToGigabits(double input, double expectation)
		{
			var result = DataStorage.Bits.ToGigabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsToTerabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Bits.ToTerabits(value);
				var convertBack = DataStorage.Terabits.ToBits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(987654321234.0, 0.987654321234)]
		[TestCase(1234567890123456.0, 1234.567890123455982)]
		[TestCase(999888777666555.0, 999.888777666555029)]
		public void ConvertKnownBitsToTerabits(double input, double expectation)
		{
			var result = DataStorage.Bits.ToTerabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsToKilobytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Bits.ToKilobytes(value);
				var convertBack = DataStorage.Kilobytes.ToBits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 0.1125)]
		[TestCase(12345.0, 1.543125)]
		[TestCase(6000.9, 0.7501125)]
		public void ConvertKnownBitsToKilobytes(double input, double expectation)
		{
			var result = DataStorage.Bits.ToKilobytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsToMegabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Bits.ToMegabytes(value);
				var convertBack = DataStorage.Megabytes.ToBits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123456.0, 0.015432)]
		[TestCase(900800.0, 0.1126)]
		[TestCase(999888777.0, 124.986097125)]
		public void ConvertKnownBitsToMegabytes(double input, double expectation)
		{
			var result = DataStorage.Bits.ToMegabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsToGigabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Bits.ToGigabytes(value);
				var convertBack = DataStorage.Gigabytes.ToBits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(999888777.0, 0.124986097125)]
		[TestCase(1.9e+9, 0.2375)]
		[TestCase(80090077.0, 0.010011259625)]
		public void ConvertKnownBitsToGigabytes(double input, double expectation)
		{
			var result = DataStorage.Bits.ToGigabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsToTerabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Bits.ToTerabytes(value);
				var convertBack = DataStorage.Terabytes.ToBits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(999888777666.0, 0.12498609720825)]
		[TestCase(12345678912345.0, 1.5432098640431251)]
		[TestCase(111999222888333.0, 13.9999028610416243)]
		public void ConvertKnownBitsToTerabytes(double input, double expectation)
		{
			var result = DataStorage.Bits.ToTerabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsToKibibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Bits.ToKibibits(value);
				var convertBack = DataStorage.Kibibits.ToBits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1800.0, 1.757813)]
		[TestCase(888.0, 0.867188)]
		[TestCase(7687.0, 7.506836)]
		public void ConvertKnownBitsToKibibits(double input, double expectation)
		{
			var result = DataStorage.Bits.ToKibibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsToMebibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Bits.ToMebibits(value);
				var convertBack = DataStorage.Mebibits.ToBits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(999888.0, 0.953567505)]
		[TestCase(1234567.0, 1.17737484)]
		[TestCase(900800.0, 0.859069824)]
		public void ConvertKnownBitsToMebibits(double input, double expectation)
		{
			var result = DataStorage.Bits.ToMebibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class GigabitsTests
	{
		[Property]
		public void FromGigabitsToBitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabits.ToBits(value);
				var convertBack = DataStorage.Bits.ToGigabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0009, 900000.0)]
		[TestCase(0.00007, 70000.0)]
		[TestCase(1.2e-5, 12000.0)]
		public void ConvertKnownGigabitsToBits(double input, double expectation)
		{
			var result = DataStorage.Gigabits.ToBits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabitsToKilobitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabits.ToKilobits(value);
				var convertBack = DataStorage.Kilobits.ToGigabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.01, 10000.0)]
		[TestCase(0.91, 910000.0)]
		[TestCase(6.1, 6.1e+6)]
		public void ConvertKnownGigabitsToKilobits(double input, double expectation)
		{
			var result = DataStorage.Gigabits.ToKilobits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabitsToMegabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabits.ToMegabits(value);
				var convertBack = DataStorage.Megabits.ToGigabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.1, 6100.0)]
		[TestCase(0.961, 961.0)]
		[TestCase(1.2e-3, 1.2)]
		public void ConvertKnownGigabitsToMegabits(double input, double expectation)
		{
			var result = DataStorage.Gigabits.ToMegabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabitsToTerabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabits.ToTerabits(value);
				var convertBack = DataStorage.Terabits.ToGigabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1200.0, 1.2)]
		[TestCase(90012.0, 90.012)]
		[TestCase(8000.0, 8.0)]
		public void ConvertKnownGigabitsToTerabits(double input, double expectation)
		{
			var result = DataStorage.Gigabits.ToTerabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabitsToKilobytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabits.ToKilobytes(value);
				var convertBack = DataStorage.Kilobytes.ToGigabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.2, 150000.0)]
		[TestCase(0.9, 112500.0)]
		[TestCase(0.001, 125.0)]
		public void ConvertKnownGigabitsToKilobytes(double input, double expectation)
		{
			var result = DataStorage.Gigabits.ToKilobytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabitsToMegabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabits.ToMegabytes(value);
				var convertBack = DataStorage.Megabytes.ToGigabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 112.5)]
		[TestCase(1.2, 150.0)]
		[TestCase(80.1, 10012.5)]
		public void ConvertKnownGigabitsToMegabytes(double input, double expectation)
		{
			var result = DataStorage.Gigabits.ToMegabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabitsToGigabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabits.ToGigabytes(value);
				var convertBack = DataStorage.Gigabytes.ToGigabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(99.0, 12.375)]
		[TestCase(123.123, 15.390375)]
		[TestCase(8000.9, 1000.1125)]
		public void ConvertKnownGigabitsToGigabytes(double input, double expectation)
		{
			var result = DataStorage.Gigabits.ToGigabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabitsToTerabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabits.ToTerabytes(value);
				var convertBack = DataStorage.Terabytes.ToGigabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9000.0, 1.125)]
		[TestCase(1234567.0, 154.320875)]
		[TestCase(613.0, 0.076625)]
		public void ConvertKnownGigabitsToTerabytes(double input, double expectation)
		{
			var result = DataStorage.Gigabits.ToTerabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabitsToKibibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabits.ToKibibits(value);
				var convertBack = DataStorage.Kibibits.ToGigabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.8, 781250.0)]
		[TestCase(0.012, 11718.75)]
		[TestCase(0.002, 1953.125)]
		public void ConvertKnownGigabitsToKibibits(double input, double expectation)
		{
			var result = DataStorage.Gigabits.ToKibibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabitsToMebibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabits.ToMebibits(value);
				var convertBack = DataStorage.Mebibits.ToGigabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.002, 1.9073486)]
		[TestCase(0.9, 858.6)]
		[TestCase(6.1, 5819.4)]
		public void ConvertKnownGigabitsToMebibits(double input, double expectation)
		{
			var result = DataStorage.Gigabits.ToMebibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class GigabytesTests
	{
		[Property]
		public void FromGigabytesToBitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabytes.ToBits(value);
				var convertBack = DataStorage.Bits.ToGigabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.004, 32000000.0)]
		[TestCase(0.012, 96000000.0)]
		[TestCase(3e-9, 24.0)]
		public void ConvertKnownGigabytesToBits(double input, double expectation)
		{
			var result = DataStorage.Gigabytes.ToBits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabytesToKilobitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabytes.ToKilobits(value);
				var convertBack = DataStorage.Kilobits.ToGigabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 72000.0)]
		[TestCase(1.2e-4, 960.0)]
		[TestCase(0.0078, 62400.0)]
		public void ConvertKnownGigabytesToKilobits(double input, double expectation)
		{
			var result = DataStorage.Gigabytes.ToKilobits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabytesToMegabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabytes.ToMegabits(value);
				var convertBack = DataStorage.Megabits.ToGigabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0078, 62.4)]
		[TestCase(0.01, 80.0)]
		[TestCase(0.001234, 9.872)]
		public void ConvertKnownGigabytesToMegabits(double input, double expectation)
		{
			var result = DataStorage.Gigabytes.ToMegabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabytesToGigabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabytes.ToGigabits(value);
				var convertBack = DataStorage.Gigabits.ToGigabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 40.0)]
		[TestCase(1.2, 9.6)]
		[TestCase(0.01, 0.08)]
		public void ConvertKnownGigabytesToGigabits(double input, double expectation)
		{
			var result = DataStorage.Gigabytes.ToGigabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabytesToTerabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabytes.ToTerabits(value);
				var convertBack = DataStorage.Terabits.ToGigabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(70.0, 0.56)]
		[TestCase(9001.0, 72.008)]
		[TestCase(768123.9, 6144.9912)]
		public void ConvertKnownGigabytesToTerabits(double input, double expectation)
		{
			var result = DataStorage.Gigabytes.ToTerabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabytesToKilobytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabytes.ToKilobytes(value);
				var convertBack = DataStorage.Kilobytes.ToGigabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.2, 200000.0)]
		[TestCase(0.009, 9000.0)]
		[TestCase(0.00123, 1230.0)]
		public void ConvertKnownGigabytesToKilobytes(double input, double expectation)
		{
			var result = DataStorage.Gigabytes.ToKilobytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabytesToMegabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabytes.ToMegabytes(value);
				var convertBack = DataStorage.Megabytes.ToGigabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 900.0)]
		[TestCase(12.0, 12000.0)]
		[TestCase(35.6, 35600.0)]
		public void ConvertKnownGigabytesToMegabytes(double input, double expectation)
		{
			var result = DataStorage.Gigabytes.ToMegabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabytesToTerabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabytes.ToTerabytes(value);
				var convertBack = DataStorage.Terabytes.ToGigabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(35.6, 0.0356)]
		[TestCase(100.23, 0.10023)]
		[TestCase(900100.0, 900.1)]
		public void ConvertKnownGigabytesToTerabytes(double input, double expectation)
		{
			var result = DataStorage.Gigabytes.ToTerabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabytesToKibibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabytes.ToKibibits(value);
				var convertBack = DataStorage.Kibibits.ToGigabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.05, 390625.0)]
		[TestCase(0.008, 62500.0)]
		[TestCase(0.00123, 9609.375)]
		public void ConvertKnownGigabytesToKibibits(double input, double expectation)
		{
			var result = DataStorage.Gigabytes.ToKibibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigabytesToMebibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Gigabytes.ToMebibits(value);
				var convertBack = DataStorage.Mebibits.ToGigabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 68.66451)]
		[TestCase(1.2, 9155.268)]
		[TestCase(19.2, 146484.288)]
		public void ConvertKnownGigabytesToMebibits(double input, double expectation)
		{
			var result = DataStorage.Gigabytes.ToMebibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class KibibitsTests
	{
		[Property]
		public void FromKibibitsToBitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kibibits.ToBits(value);
				var convertBack = DataStorage.Bits.ToKibibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.0, 2048.0)]
		[TestCase(9.0, 9216.0)]
		[TestCase(17.8, 18227.2)]
		public void ConvertKnownKibibitsToBits(double input, double expectation)
		{
			var result = DataStorage.Kibibits.ToBits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsToKilobitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kibibits.ToKilobits(value);
				var convertBack = DataStorage.Kilobits.ToKibibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.2, 6.3488)]
		[TestCase(0.9, 0.9216)]
		[TestCase(87.0, 89.088)]
		public void ConvertKnownKibibitsToKilobits(double input, double expectation)
		{
			var result = DataStorage.Kibibits.ToKilobits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsToMegabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kibibits.ToMegabits(value);
				var convertBack = DataStorage.Megabits.ToKibibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(87.0, 0.089088)]
		[TestCase(12.34, 0.01263616)]
		[TestCase(123456.0, 126.418879)]
		public void ConvertKnownKibibitsToMegabits(double input, double expectation)
		{
			var result = DataStorage.Kibibits.ToMegabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsToGigabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kibibits.ToGigabits(value);
				var convertBack = DataStorage.Gigabits.ToKibibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123456.0, 0.126418944)]
		[TestCase(8000000.0, 8.192)]
		[TestCase(1276876.0, 1.307521024)]
		public void ConvertKnownKibibitsToGigabits(double input, double expectation)
		{
			var result = DataStorage.Kibibits.ToGigabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsToTerabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kibibits.ToTerabits(value);
				var convertBack = DataStorage.Terabits.ToKibibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(800000000.0, 0.8192)]
		[TestCase(1.5e12, 1536.0)]
		[TestCase(9999999.0, 0.01023999898)]
		public void ConvertKnownKibibitsToTerabits(double input, double expectation)
		{
			var result = DataStorage.Kibibits.ToTerabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsToKilobytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kibibits.ToKilobytes(value);
				var convertBack = DataStorage.Kilobytes.ToKibibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(919.0, 117.632)]
		[TestCase(77.4, 9.9072)]
		[TestCase(109.109, 13.965952)]
		public void ConvertKnownKibibitsToKilobytes(double input, double expectation)
		{
			var result = DataStorage.Kibibits.ToKilobytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsToMegabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kibibits.ToMegabytes(value);
				var convertBack = DataStorage.Megabytes.ToKibibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1000.0, 0.128)]
		[TestCase(800.123, 0.102415744)]
		[TestCase(123456.0, 15.802368)]
		public void ConvertKnownKibibitsToMegabytes(double input, double expectation)
		{
			var result = DataStorage.Kibibits.ToMegabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsToGigabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kibibits.ToGigabytes(value);
				var convertBack = DataStorage.Gigabytes.ToKibibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12345678.0, 1.580347926)]
		[TestCase(8e12, 1024000.00)]
		[TestCase(1.2e5, 0.01536)]
		public void ConvertKnownKibibitsToGigabytes(double input, double expectation)
		{
			var result = DataStorage.Kibibits.ToGigabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsToTerabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kibibits.ToTerabytes(value);
				var convertBack = DataStorage.Terabytes.ToKibibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(120000000.0, 0.01536)]
		[TestCase(88e12, 11264.0)]
		[TestCase(9000000.0, 0.009216)]
		public void ConvertKnownKibibitsToTerabytes(double input, double expectation)
		{
			var result = DataStorage.Kibibits.ToTerabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsToMebibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kibibits.ToMebibits(value);
				var convertBack = DataStorage.Mebibits.ToKibibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(600.0, 0.5859375)]
		[TestCase(12345.0, 12.055664)]
		[TestCase(101.0, 0.0986328)]
		public void ConvertKnownKibibitsToMebibits(double input, double expectation)
		{
			var result = DataStorage.Kibibits.ToMebibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class KilobitsTests
	{
		[Property]
		public void FromKilobitsToBitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobits.ToBits(value);
				var convertBack = DataStorage.Bits.ToKilobits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9.0, 9000.0)]
		[TestCase(6.7, 6700.0)]
		[TestCase(1.2345, 1234.5)]
		public void ConvertKnownKilobitsToBits(double input, double expectation)
		{
			var result = DataStorage.Kilobits.ToBits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobitsToMegabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobits.ToMegabits(value);
				var convertBack = DataStorage.Megabits.ToKilobits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 0.9)]
		[TestCase(12345.0, 12.345)]
		[TestCase(9988.0, 9.988)]
		public void ConvertKnownKilobitsToMegabits(double input, double expectation)
		{
			var result = DataStorage.Kilobits.ToMegabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobitsToGigabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobits.ToGigabits(value);
				var convertBack = DataStorage.Gigabits.ToKilobits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123456.0, 0.123456)]
		[TestCase(8000700.0, 8.0007)]
		[TestCase(191987578.0, 191.987578)]
		public void ConvertKnownKilobitsToGigabits(double input, double expectation)
		{
			var result = DataStorage.Kilobits.ToGigabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobitsToTerabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobits.ToTerabits(value);
				var convertBack = DataStorage.Terabits.ToKilobits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(191987578.0, 0.191987578)]
		[TestCase(9010081903.0, 9.010081903)]
		[TestCase(123456789.0, 0.123456789)]
		public void ConvertKnownKilobitsToTerabits(double input, double expectation)
		{
			var result = DataStorage.Kilobits.ToTerabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobitsToKilobytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobits.ToKilobytes(value);
				var convertBack = DataStorage.Kilobytes.ToKilobits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(80.0, 10.0)]
		[TestCase(15.67, 1.95875)]
		[TestCase(8007.09, 1000.88625)]
		public void ConvertKnownKilobitsToKilobytes(double input, double expectation)
		{
			var result = DataStorage.Kilobits.ToKilobytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobitsToMegabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobits.ToMegabytes(value);
				var convertBack = DataStorage.Megabytes.ToKilobits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123456.0, 15.432)]
		[TestCase(998877.0, 124.859625)]
		[TestCase(10090.0, 1.26125)]
		public void ConvertKnownKilobitsToMegabytes(double input, double expectation)
		{
			var result = DataStorage.Kilobits.ToMegabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobitsToGigabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobits.ToGigabytes(value);
				var convertBack = DataStorage.Gigabytes.ToKilobits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1828972.0, 0.2286215)]
		[TestCase(879860.8, 0.1099826)]
		[TestCase(78178971.0, 9.772371375)]
		public void ConvertKnownKilobitsToGigabytes(double input, double expectation)
		{
			var result = DataStorage.Kilobits.ToGigabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobitsToTerabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobits.ToTerabytes(value);
				var convertBack = DataStorage.Terabytes.ToKilobits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1234567891.0, 0.154320986375)]
		[TestCase(999999098.0, 0.12499988725)]
		[TestCase(84618364142.0, 10.57729551775)]
		public void ConvertKnownKilobitsToTerabytes(double input, double expectation)
		{
			var result = DataStorage.Kilobits.ToTerabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobitsToKibibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobits.ToKibibits(value);
				var convertBack = DataStorage.Kibibits.ToKilobits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(89.1, 87.01172)]
		[TestCase(7.1, 6.93359)]
		[TestCase(438.0, 427.734)]
		public void ConvertKnownKilobitsToKibibits(double input, double expectation)
		{
			var result = DataStorage.Kilobits.ToKibibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobitsToMebibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobits.ToMebibits(value);
				var convertBack = DataStorage.Mebibits.ToKilobits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(77790.0, 74.186325)]
		[TestCase(123456.0, 117.736816)]
		[TestCase(23972.0, 22.861481)]
		public void ConvertKnownKilobitsToMebibits(double input, double expectation)
		{
			var result = DataStorage.Kilobits.ToMebibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class KilobytesTests
	{
		[Property]
		public void FromKilobytesToBitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobytes.ToBits(value);
				var convertBack = DataStorage.Bits.ToKilobytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123.456, 987648.0)]
		[TestCase(900.0, 7.2e+6)]
		[TestCase(100200.0, 801600000.0)]
		public void ConvertKnownKilobytesToBits(double input, double expectation)
		{
			var result = DataStorage.Kilobytes.ToBits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobytesToKilobitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobytes.ToKilobits(value);
				var convertBack = DataStorage.Kilobits.ToKilobytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.0, 32.0)]
		[TestCase(1.2, 9.6)]
		[TestCase(88.1, 704.8)]
		public void ConvertKnownKilobytesToKilobits(double input, double expectation)
		{
			var result = DataStorage.Kilobytes.ToKilobits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobytesToMegabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobytes.ToMegabits(value);
				var convertBack = DataStorage.Megabits.ToKilobytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(88.1, 0.7048)]
		[TestCase(7.1, 0.0568)]
		[TestCase(12.8, 0.1024)]
		public void ConvertKnownKilobytesToMegabits(double input, double expectation)
		{
			var result = DataStorage.Kilobytes.ToMegabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobytesToGigabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobytes.ToGigabits(value);
				var convertBack = DataStorage.Gigabits.ToKilobytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(10080.0, 0.08064)]
		[TestCase(4.5e+9, 36000.0)]
		[TestCase(271279.0, 2.170232)]
		public void ConvertKnownKilobytesToGigabits(double input, double expectation)
		{
			var result = DataStorage.Kilobytes.ToGigabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobytesToTerabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobytes.ToTerabits(value);
				var convertBack = DataStorage.Terabits.ToKilobytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9009000.0, 0.072072)]
		[TestCase(7.2e9, 57.6)]
		[TestCase(100100100900.0, 800.8008072)]
		public void ConvertKnownKilobytesToTerabits(double input, double expectation)
		{
			var result = DataStorage.Kilobytes.ToTerabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobytesToMegabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobytes.ToMegabytes(value);
				var convertBack = DataStorage.Megabytes.ToKilobytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1009.0, 1.009)]
		[TestCase(8899.0, 8.899)]
		[TestCase(619.0, 0.619)]
		public void ConvertKnownKilobytesToMegabytes(double input, double expectation)
		{
			var result = DataStorage.Kilobytes.ToMegabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobytesToGigabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobytes.ToGigabytes(value);
				var convertBack = DataStorage.Gigabytes.ToKilobytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900800.0, 0.9008)]
		[TestCase(1234567.0, 1.234567)]
		[TestCase(7.9e9, 7900.0)]
		public void ConvertKnownKilobytesToGigabytes(double input, double expectation)
		{
			var result = DataStorage.Kilobytes.ToGigabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobytesToTerabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobytes.ToTerabytes(value);
				var convertBack = DataStorage.Terabytes.ToKilobytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 9e-10)]
		[TestCase(140000000.0, 0.14)]
		[TestCase(7.0, 7e-9)]
		public void ConvertKnownKilobytesToTerabytes(double input, double expectation)
		{
			var result = DataStorage.Kilobytes.ToTerabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobytesToKibibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobytes.ToKibibits(value);
				var convertBack = DataStorage.Kibibits.ToKilobytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 0.0703125)]
		[TestCase(6e+3, 46872.0)]
		[TestCase(1.23, 9.609375)]
		public void ConvertKnownKilobytesToKibibits(double input, double expectation)
		{
			var result = DataStorage.Kilobytes.ToKibibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilobytesToMebibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Kilobytes.ToMebibits(value);
				var convertBack = DataStorage.Mebibits.ToKilobytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(70.0, 0.534058)]
		[TestCase(9.0, 0.0686646)]
		[TestCase(10022.0, 76.461792)]
		public void ConvertKnownKilobytesToMebibits(double input, double expectation)
		{
			var result = DataStorage.Kilobytes.ToMebibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class MebibitsTests
	{
		[Property]
		public void FromMebibitsToBitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Mebibits.ToBits(value);
				var convertBack = DataStorage.Bits.ToMebibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 943718.4)]
		[TestCase(0.006, 6291.456)]
		[TestCase(2.0, 2097152.0)]
		public void ConvertKnownMebibitsToBits(double input, double expectation)
		{
			var result = DataStorage.Mebibits.ToBits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsToKilobitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Mebibits.ToKilobits(value);
				var convertBack = DataStorage.Kilobits.ToMebibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.8, 838.861)]
		[TestCase(2.0, 2097.15)]
		[TestCase(0.23, 241.1725)]
		public void ConvertKnownMebibitsToKilobits(double input, double expectation)
		{
			var result = DataStorage.Mebibits.ToKilobits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsToMegabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Mebibits.ToMegabits(value);
				var convertBack = DataStorage.Megabits.ToMebibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 0.943718)]
		[TestCase(12.3, 12.89748)]
		[TestCase(8.1, 8.49347)]
		public void ConvertKnownMebibitsToMegabits(double input, double expectation)
		{
			var result = DataStorage.Mebibits.ToMegabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsToGigabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Mebibits.ToGigabits(value);
				var convertBack = DataStorage.Gigabits.ToMebibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12345.0, 12.944671)]
		[TestCase(100.0, 0.104858)]
		[TestCase(999.9, 1.0484711)]
		public void ConvertKnownMebibitsToGigabits(double input, double expectation)
		{
			var result = DataStorage.Mebibits.ToGigabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsToTerabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Mebibits.ToTerabits(value);
				var convertBack = DataStorage.Terabits.ToMebibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100009.0, 0.104867037)]
		[TestCase(9876543.0, 10.35630595)]
		[TestCase(1000900.0, 1.049519718)]
		public void ConvertKnownMebibitsToTerabits(double input, double expectation)
		{
			var result = DataStorage.Mebibits.ToTerabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsToKilobytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Mebibits.ToKilobytes(value);
				var convertBack = DataStorage.Kilobytes.ToMebibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.0, 524.288)]
		[TestCase(1.45, 190.0544)]
		[TestCase(88.11, 11548.754)]
		public void ConvertKnownMebibitsToKilobytes(double input, double expectation)
		{
			var result = DataStorage.Mebibits.ToKilobytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsToMegabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Mebibits.ToMegabytes(value);
				var convertBack = DataStorage.Megabytes.ToMebibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.0, 14.2868)]
		[TestCase(55.67, 7.2967782)]
		[TestCase(45678.0, 5987.1068)]
		public void ConvertKnownMebibitsToMegabytes(double input, double expectation)
		{
			var result = DataStorage.Mebibits.ToMegabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsToGigabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Mebibits.ToGigabytes(value);
				var convertBack = DataStorage.Gigabytes.ToMebibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4000.0, 0.524288311)]
		[TestCase(90100.0, 11.80959421)]
		[TestCase(1009.0, 0.132251727)]
		public void ConvertKnownMebibitsToGigabytes(double input, double expectation)
		{
			var result = DataStorage.Mebibits.ToGigabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsToTerabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Mebibits.ToTerabytes(value);
				var convertBack = DataStorage.Terabytes.ToMebibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1000009.0, 0.1310731796)]
		[TestCase(90808080.0, 11.902396662)]
		[TestCase(5.2e12, 681574.4)]
		public void ConvertKnownMebibitsToTerabytes(double input, double expectation)
		{
			var result = DataStorage.Mebibits.ToTerabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsToKibibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Mebibits.ToKibibits(value);
				var convertBack = DataStorage.Kibibits.ToMebibits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 5120.0)]
		[TestCase(1234.56, 1264189.44)]
		[TestCase(505.0, 517120.0)]
		public void ConvertKnownMebibitsToKibibits(double input, double expectation)
		{
			var result = DataStorage.Mebibits.ToKibibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class MegabitsTests
	{
		[Property]
		public void FromMegabitsToBitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabits.ToBits(value);
				var convertBack = DataStorage.Bits.ToMegabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.34, 340000.0)]
		[TestCase(9.12, 9120000.0)]
		[TestCase(0.987, 987000.0)]
		public void ConvertKnownMegabitsToBits(double input, double expectation)
		{
			var result = DataStorage.Megabits.ToBits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabitsToKilobitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabits.ToKilobits(value);
				var convertBack = DataStorage.Kilobits.ToMegabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.77, 770.0)]
		[TestCase(5.0, 5000.0)]
		[TestCase(0.987, 987.0)]
		public void ConvertKnownMegabitsToKilobits(double input, double expectation)
		{
			var result = DataStorage.Megabits.ToKilobits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabitsToGigabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabits.ToGigabits(value);
				var convertBack = DataStorage.Gigabits.ToMegabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 0.9)]
		[TestCase(12345.0, 12.345)]
		[TestCase(189.1, 0.1891)]
		public void ConvertKnownMegabitsToGigabits(double input, double expectation)
		{
			var result = DataStorage.Megabits.ToGigabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabitsToTerabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabits.ToTerabits(value);
				var convertBack = DataStorage.Terabits.ToMegabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100200300.0, 100.2003)]
		[TestCase(99887777.0, 99.887777)]
		[TestCase(80009.0, 0.080009)]
		public void ConvertKnownMegabitsToTerabits(double input, double expectation)
		{
			var result = DataStorage.Megabits.ToTerabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabitsToKilobytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabits.ToKilobytes(value);
				var convertBack = DataStorage.Kilobytes.ToMegabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9.0, 1125.0)]
		[TestCase(1.23, 153.75)]
		[TestCase(98.1, 12262.5)]
		public void ConvertKnownMegabitsToKilobytes(double input, double expectation)
		{
			var result = DataStorage.Megabits.ToKilobytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabitsToMegabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabits.ToMegabytes(value);
				var convertBack = DataStorage.Megabytes.ToMegabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(98.1, 12.2625)]
		[TestCase(10.9, 1.3625)]
		[TestCase(888.123, 111.015375)]
		public void ConvertKnownMegabitsToMegabytes(double input, double expectation)
		{
			var result = DataStorage.Megabits.ToMegabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabitsToGigabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabits.ToGigabytes(value);
				var convertBack = DataStorage.Gigabytes.ToMegabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 0.1125)]
		[TestCase(10123.0, 1.265375)]
		[TestCase(9988.0, 1.2485)]
		public void ConvertKnownMegabitsToGigabytes(double input, double expectation)
		{
			var result = DataStorage.Megabits.ToGigabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabitsToTerabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabits.ToTerabytes(value);
				var convertBack = DataStorage.Terabytes.ToMegabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(998877.0, 0.124859625)]
		[TestCase(100200400.0, 12.5250375)]
		[TestCase(9008877.0, 1.126109625)]
		public void ConvertKnownMegabitsToTerabytes(double input, double expectation)
		{
			var result = DataStorage.Megabits.ToTerabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabitsToKibibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabits.ToKibibits(value);
				var convertBack = DataStorage.Kibibits.ToMegabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 11718.756)]
		[TestCase(0.9, 878.906)]
		[TestCase(1.23, 1201.172)]
		public void ConvertKnownMegabitsToKibibits(double input, double expectation)
		{
			var result = DataStorage.Megabits.ToKibibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabitsToMebibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabits.ToMebibits(value);
				var convertBack = DataStorage.Mebibits.ToMegabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.5, 4.29153)]
		[TestCase(0.8, 0.762939)]
		[TestCase(900.0, 858.307)]
		public void ConvertKnownMegabitsToMebibits(double input, double expectation)
		{
			var result = DataStorage.Megabits.ToMebibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class MegabytesTests
	{
		[Property]
		public void FromMegabytesToBitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabytes.ToBits(value);
				var convertBack = DataStorage.Bits.ToMegabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.04, 320000.0)]
		[TestCase(0.0091, 72800.0)]
		[TestCase(3e-5, 240.0)]
		public void ConvertKnownMegabytesToBits(double input, double expectation)
		{
			var result = DataStorage.Megabytes.ToBits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabytesToKilobitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabytes.ToKilobits(value);
				var convertBack = DataStorage.Kilobits.ToMegabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 48000.0)]
		[TestCase(0.3, 2400.0)]
		[TestCase(0.009, 72.0)]
		public void ConvertKnownMegabytesToKilobits(double input, double expectation)
		{
			var result = DataStorage.Megabytes.ToKilobits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabytesToMegabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabytes.ToMegabits(value);
				var convertBack = DataStorage.Megabits.ToMegabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.0, 24.0)]
		[TestCase(0.9, 7.2)]
		[TestCase(13.0, 104.0)]
		public void ConvertKnownMegabytesToMegabits(double input, double expectation)
		{
			var result = DataStorage.Megabytes.ToMegabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabytesToGigabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabytes.ToGigabits(value);
				var convertBack = DataStorage.Gigabits.ToMegabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(13.0, 0.104)]
		[TestCase(900.0, 7.2)]
		[TestCase(18000.0, 144.0)]
		public void ConvertKnownMegabytesToGigabits(double input, double expectation)
		{
			var result = DataStorage.Megabytes.ToGigabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabytesToTerabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabytes.ToTerabits(value);
				var convertBack = DataStorage.Terabits.ToMegabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(18000.0, 0.144)]
		[TestCase(9718290.0, 77.74632)]
		[TestCase(9e12, 72000000.0)]
		public void ConvertKnownMegabytesToTerabits(double input, double expectation)
		{
			var result = DataStorage.Megabytes.ToTerabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabytesToKilobytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabytes.ToKilobytes(value);
				var convertBack = DataStorage.Kilobytes.ToMegabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 6000.0)]
		[TestCase(0.9, 900.0)]
		[TestCase(123.4, 123400.0)]
		public void ConvertKnownMegabytesToKilobytes(double input, double expectation)
		{
			var result = DataStorage.Megabytes.ToKilobytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabytesToGigabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabytes.ToGigabytes(value);
				var convertBack = DataStorage.Gigabytes.ToMegabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123.4, 0.1234)]
		[TestCase(900.0, 0.9)]
		[TestCase(8e6, 8000.0)]
		public void ConvertKnownMegabytesToGigabytes(double input, double expectation)
		{
			var result = DataStorage.Megabytes.ToGigabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabytesToTerabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabytes.ToTerabytes(value);
				var convertBack = DataStorage.Terabytes.ToMegabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(80000.0, 0.08)]
		[TestCase(12345678.0, 12.345678)]
		[TestCase(900800.0, 0.9008)]
		public void ConvertKnownMegabytesToTerabytes(double input, double expectation)
		{
			var result = DataStorage.Megabytes.ToTerabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabytesToKibibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabytes.ToKibibits(value);
				var convertBack = DataStorage.Kibibits.ToMegabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 46875.0)]
		[TestCase(0.9, 7031.25)]
		[TestCase(0.03, 234.375)]
		public void ConvertKnownMegabytesToKibibits(double input, double expectation)
		{
			var result = DataStorage.Megabytes.ToKibibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegabytesToMebibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Megabytes.ToMebibits(value);
				var convertBack = DataStorage.Mebibits.ToMegabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.03, 0.2288818)]
		[TestCase(4.5, 34.3323)]
		[TestCase(80.1, 611.1145)]
		public void ConvertKnownMegabytesToMebibits(double input, double expectation)
		{
			var result = DataStorage.Megabytes.ToMebibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class TerabitsTests
	{
		[Property]
		public void FromTerabitsToBitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabits.ToBits(value);
				var convertBack = DataStorage.Bits.ToTerabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0007, 700000000.0)]
		[TestCase(1.23e-6, 1230000.0)]
		[TestCase(0.00098, 980000000.0)]
		public void ConvertKnownTerabitsToBits(double input, double expectation)
		{
			var result = DataStorage.Terabits.ToBits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabitsToKilobitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabits.ToKilobits(value);
				var convertBack = DataStorage.Kilobits.ToTerabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.001, 1000000.0)]
		[TestCase(6.1e-6, 6100.0)]
		[TestCase(0.00009, 90000.0)]
		public void ConvertKnownTerabitsToKilobits(double input, double expectation)
		{
			var result = DataStorage.Terabits.ToKilobits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabitsToMegabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabits.ToMegabits(value);
				var convertBack = DataStorage.Megabits.ToTerabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.09, 90000.0)]
		[TestCase(3.5e-4, 350.0)]
		[TestCase(0.0123, 12300.0)]
		public void ConvertKnownTerabitsToMegabits(double input, double expectation)
		{
			var result = DataStorage.Terabits.ToMegabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabitsToGigabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabits.ToGigabits(value);
				var convertBack = DataStorage.Gigabits.ToTerabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 900.0)]
		[TestCase(1.45, 1450.0)]
		[TestCase(8.19, 8190.0)]
		public void ConvertKnownTerabitsToGigabits(double input, double expectation)
		{
			var result = DataStorage.Terabits.ToGigabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabitsToKilobytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabits.ToKilobytes(value);
				var convertBack = DataStorage.Kilobytes.ToTerabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0009, 112500.0)]
		[TestCase(3.14e-6, 392.5)]
		[TestCase(0.001, 125000.0)]
		public void ConvertKnownTerabitsToKilobytes(double input, double expectation)
		{
			var result = DataStorage.Terabits.ToKilobytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabitsToMegabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabits.ToMegabytes(value);
				var convertBack = DataStorage.Megabytes.ToTerabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.4, 50000.0)]
		[TestCase(3.9e-3, 487.5)]
		[TestCase(0.007, 875.0)]
		public void ConvertKnownTerabitsToMegabytes(double input, double expectation)
		{
			var result = DataStorage.Terabits.ToMegabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabitsToGigabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabits.ToGigabytes(value);
				var convertBack = DataStorage.Gigabytes.ToTerabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 1.125)]
		[TestCase(0.00123, 0.15375)]
		[TestCase(8.1e-3, 1.0125)]
		public void ConvertKnownTerabitsToGigabytes(double input, double expectation)
		{
			var result = DataStorage.Terabits.ToGigabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabitsToTerabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabits.ToTerabytes(value);
				var convertBack = DataStorage.Terabytes.ToTerabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.3, 0.0375)]
		[TestCase(14.0, 1.75)]
		[TestCase(0.8, 0.1)]
		public void ConvertKnownTerabitsToTerabytes(double input, double expectation)
		{
			var result = DataStorage.Terabits.ToTerabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabitsToKibibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabits.ToKibibits(value);
				var convertBack = DataStorage.Kibibits.ToTerabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0009, 878906.25)]
		[TestCase(6.1e-6, 5957.031)]
		[TestCase(12e-9, 11.71875)]
		public void ConvertKnownTerabitsToKibibits(double input, double expectation)
		{
			var result = DataStorage.Terabits.ToKibibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabitsToMebibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabits.ToMebibits(value);
				var convertBack = DataStorage.Mebibits.ToTerabits(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 858306.59999)]
		[TestCase(4.6e-3, 4386.9)]
		[TestCase(0.00123, 1173.0194092)]
		public void ConvertKnownTerabitsToMebibits(double input, double expectation)
		{
			var result = DataStorage.Terabits.ToMebibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class TerabytesTests
	{
		[Property]
		public void FromTerabytesToBitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabytes.ToBits(value);
				var convertBack = DataStorage.Bits.ToTerabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.00008, 640000000.0)]
		[TestCase(1.2e-12, 9.6)]
		[TestCase(9.0, 7.2e+13)]
		public void ConvertKnownTerabytesToBits(double input, double expectation)
		{
			var result = DataStorage.Terabytes.ToBits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabytesToKilobitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabytes.ToKilobits(value);
				var convertBack = DataStorage.Kilobits.ToTerabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 72000000.0)]
		[TestCase(1.4e-6, 11200.0)]
		[TestCase(6.1e-5, 488000.0)]
		public void ConvertKnownTerabytesToKilobits(double input, double expectation)
		{
			var result = DataStorage.Terabytes.ToKilobits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabytesToMegabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabytes.ToMegabits(value);
				var convertBack = DataStorage.Megabits.ToTerabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.005, 40000.0)]
		[TestCase(0.000123, 984.0)]
		[TestCase(0.00006, 480.0)]
		public void ConvertKnownTerabytesToMegabits(double input, double expectation)
		{
			var result = DataStorage.Terabytes.ToMegabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabytesToGigabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabytes.ToGigabits(value);
				var convertBack = DataStorage.Gigabits.ToTerabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.008, 64.0)]
		[TestCase(3e-7, 0.0024)]
		[TestCase(0.00023, 1.84)]
		public void ConvertKnownTerabytesToGigabits(double input, double expectation)
		{
			var result = DataStorage.Terabytes.ToGigabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabytesToTerabitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabytes.ToTerabits(value);
				var convertBack = DataStorage.Terabits.ToTerabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 40.0)]
		[TestCase(1.23, 9.84)]
		[TestCase(800.0, 6400.0)]
		public void ConvertKnownTerabytesToTerabits(double input, double expectation)
		{
			var result = DataStorage.Terabytes.ToTerabits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabytesToKilobytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabytes.ToKilobytes(value);
				var convertBack = DataStorage.Kilobytes.ToTerabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0009, 900000.0)]
		[TestCase(3.14e-7, 314.0)]
		[TestCase(0.00063, 630000.0)]
		public void ConvertKnownTerabytesToKilobytes(double input, double expectation)
		{
			var result = DataStorage.Terabytes.ToKilobytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabytesToMegabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabytes.ToMegabytes(value);
				var convertBack = DataStorage.Megabytes.ToTerabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 9000.0)]
		[TestCase(0.234, 234000.0)]
		[TestCase(2.0, 2e+6)]
		public void ConvertKnownTerabytesToMegabytes(double input, double expectation)
		{
			var result = DataStorage.Terabytes.ToMegabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabytesToGigabytesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabytes.ToGigabytes(value);
				var convertBack = DataStorage.Gigabytes.ToTerabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.7, 2700.0)]
		[TestCase(0.9, 900.0)]
		[TestCase(0.0123, 12.3)]
		public void ConvertKnownTerabytesToGigabytes(double input, double expectation)
		{
			var result = DataStorage.Terabytes.ToGigabytes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabytesToKibibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabytes.ToKibibits(value);
				var convertBack = DataStorage.Kibibits.ToTerabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0009, 7031250.0)]
		[TestCase(1.23e-5, 96093.75)]
		[TestCase(0.0001, 781250.0)]
		public void ConvertKnownTerabytesToKibibits(double input, double expectation)
		{
			var result = DataStorage.Terabytes.ToKibibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTerabytesToMebibitsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataStorage.Terabytes.ToMebibits(value);
				var convertBack = DataStorage.Mebibits.ToTerabytes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.01, 76293.95)]
		[TestCase(0.008, 61035.156)]
		[TestCase(2.0, 15258789.0625)]
		public void ConvertKnownTerabytesToMebibits(double input, double expectation)
		{
			var result = DataStorage.Terabytes.ToMebibits(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
}
