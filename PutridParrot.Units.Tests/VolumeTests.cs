/// <summary>
/// Do not change this code, it's generated by the UnitCodeGenerator app.
/// </summary>

using NUnit.Framework;
using FsCheck;
using PropertyAttribute = FsCheck.NUnit.PropertyAttribute;

namespace PutridParrot.Units.Tests;

public class FluidOuncesTests
{
	[Property]
	public void FromFluidOuncesToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 340.957)]
	[TestCase(6.01, 170.7625)]
	[TestCase(0.78, 22.16219)]
	public void ConvertKnownFluidOuncesToMillilitres(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToLitres(value);
			var convertBack = Volume.Litres.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(800.0, 22.7305)]
	[TestCase(4.5, 0.127859)]
	[TestCase(109.0, 3.09702)]
	public void ConvertKnownFluidOuncesToLitres(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(56909.0, 1.616959)]
	[TestCase(9009.0, 0.2559733)]
	[TestCase(123456.0, 3.50776304)]
	public void ConvertKnownFluidOuncesToKilolitres(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(123.0, 590.4)]
	[TestCase(9.12, 43.77598)]
	[TestCase(0.2, 0.96)]
	public void ConvertKnownFluidOuncesToTeaspoons(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(7.0, 11.2)]
	[TestCase(165.4, 264.63989)]
	[TestCase(80.1, 128.1599)]
	public void ConvertKnownFluidOuncesToTablespoons(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToQuarts(value);
			var convertBack = Volume.Quarts.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(89.0, 2.225)]
	[TestCase(5.9, 0.1475)]
	[TestCase(1300.0, 32.5)]
	public void ConvertKnownFluidOuncesToQuarts(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToPints(value);
			var convertBack = Volume.Pints.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1300.0, 65.0)]
	[TestCase(5.7, 0.285)]
	[TestCase(1900.0, 95.0)]
	public void ConvertKnownFluidOuncesToPints(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToGallons(value);
			var convertBack = Volume.Gallons.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1900.0, 11.875)]
	[TestCase(5.6, 0.035)]
	[TestCase(12345.0, 77.15625)]
	public void ConvertKnownFluidOuncesToGallons(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12345.0, 71163.512)]
	[TestCase(8.9, 51.3046)]
	[TestCase(0.005, 0.028822808)]
	public void ConvertKnownFluidOuncesToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(190.0, 365.089)]
	[TestCase(6.8, 13.0663)]
	[TestCase(2340.0, 4496.357)]
	public void ConvertKnownFluidOuncesToUSTablespoons(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(45.0, 1.35107)]
	[TestCase(1090.0, 32.72589)]
	[TestCase(777.0, 23.3285)]
	public void ConvertKnownFluidOuncesToUSQuarts(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToUSPints(value);
			var convertBack = Volume.USPints.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(678.0, 40.7122)]
	[TestCase(4.5, 0.270214)]
	[TestCase(1900.0, 114.0902)]
	public void ConvertKnownFluidOuncesToUSPints(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1890.0, 14.18622)]
	[TestCase(5.8, 0.0435344)]
	[TestCase(10090.0, 75.734905)]
	public void ConvertKnownFluidOuncesToUSGallons(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(190.0, 182.544)]
	[TestCase(54.8, 52.64964)]
	[TestCase(1.7, 1.63329)]
	public void ConvertKnownFluidOuncesToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFluidOuncesToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.FluidOunces.ToUSCups(value);
			var convertBack = Volume.USCups.ToFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(6.0, 0.72057)]
	[TestCase(1800.0, 216.171)]
	[TestCase(6.9, 0.828655)]
	public void ConvertKnownFluidOuncesToUSCups(double input, double expectation)
	{
		var result = Volume.FluidOunces.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class GallonsTests
{
	[Property]
	public void FromGallonsToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.3, 5909.92)]
	[TestCase(0.45, 2045.741)]
	[TestCase(1.8, 8182.96)]
	public void ConvertKnownGallonsToMillilitres(double input, double expectation)
	{
		var result = Volume.Gallons.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToLitres(value);
			var convertBack = Volume.Litres.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(123.0, 559.169)]
	[TestCase(9.3, 42.2786)]
	[TestCase(0.67, 3.04588)]
	public void ConvertKnownGallonsToLitres(double input, double expectation)
	{
		var result = Volume.Gallons.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1009.0, 4.587005)]
	[TestCase(9.6, 0.0436425)]
	[TestCase(123456.0, 561.242087)]
	public void ConvertKnownGallonsToKilolitres(double input, double expectation)
	{
		var result = Volume.Gallons.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(6.0, 4608.0)]
	[TestCase(78.12, 59996.16)]
	[TestCase(0.34, 261.1199)]
	public void ConvertKnownGallonsToTeaspoons(double input, double expectation)
	{
		var result = Volume.Gallons.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.9, 230.4)]
	[TestCase(1.6, 409.6)]
	[TestCase(0.33, 84.47997)]
	public void ConvertKnownGallonsToTablespoons(double input, double expectation)
	{
		var result = Volume.Gallons.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToQuarts(value);
			var convertBack = Volume.Quarts.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(109.0, 436.0)]
	[TestCase(5.8, 23.2)]
	[TestCase(0.23, 0.92)]
	public void ConvertKnownGallonsToQuarts(double input, double expectation)
	{
		var result = Volume.Gallons.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToPints(value);
			var convertBack = Volume.Pints.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.23, 1.84)]
	[TestCase(190.0, 1520.0)]
	[TestCase(24.7, 197.6)]
	public void ConvertKnownGallonsToPints(double input, double expectation)
	{
		var result = Volume.Gallons.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(24.7, 3952.0)]
	[TestCase(13.09, 2094.4)]
	[TestCase(5.8, 928.0)]
	public void ConvertKnownGallonsToFluidOunces(double input, double expectation)
	{
		var result = Volume.Gallons.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(5.8, 5349.51)]
	[TestCase(0.44, 405.8251)]
	[TestCase(1.9, 1752.43)]
	public void ConvertKnownGallonsToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.Gallons.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.8, 553.398)]
	[TestCase(0.33, 101.4562)]
	[TestCase(100.0, 30744.33080)]
	public void ConvertKnownGallonsToUSTablespoons(double input, double expectation)
	{
		var result = Volume.Gallons.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(78.0, 374.696)]
	[TestCase(1.7, 8.16646)]
	[TestCase(16.9, 81.18421)]
	public void ConvertKnownGallonsToUSQuarts(double input, double expectation)
	{
		var result = Volume.Gallons.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToUSPints(value);
			var convertBack = Volume.USPints.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(13.4, 128.7418)]
	[TestCase(8.12, 78.01371)]
	[TestCase(0.99, 9.511523)]
	public void ConvertKnownGallonsToUSPints(double input, double expectation)
	{
		var result = Volume.Gallons.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.5, 1.80142)]
	[TestCase(0.78, 0.9367409)]
	[TestCase(103.0, 123.698)]
	public void ConvertKnownGallonsToUSGallons(double input, double expectation)
	{
		var result = Volume.Gallons.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(111.0, 17063.1)]
	[TestCase(89.9, 13819.57)]
	[TestCase(1.2, 184.466)]
	public void ConvertKnownGallonsToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.Gallons.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGallonsToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Gallons.ToUSCups(value);
			var convertBack = Volume.USCups.ToGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.2, 23.0582)]
	[TestCase(0.55, 10.56836)]
	[TestCase(890.0, 17101.534007630)]
	public void ConvertKnownGallonsToUSCups(double input, double expectation)
	{
		var result = Volume.Gallons.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class KilolitresTests
{
	[Property]
	public void FromKilolitresToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.09, 90000.0)]
	[TestCase(0.00123, 1230.0)]
	[TestCase(1.2, 1.2e+6)]
	public void ConvertKnownKilolitresToMillilitres(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToLitres(value);
			var convertBack = Volume.Litres.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.2, 1200.0)]
	[TestCase(0.8, 800.0)]
	[TestCase(456.0, 456000.0)]
	public void ConvertKnownKilolitresToLitres(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.7, 118255.41900799)]
	[TestCase(0.01, 1689.363)]
	[TestCase(4.5, 760213.407908)]
	public void ConvertKnownKilolitresToTeaspoons(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.3, 16893.631286856)]
	[TestCase(2.9, 163305.10243961)]
	[TestCase(0.067, 3772.911)]
	public void ConvertKnownKilolitresToTablespoons(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToQuarts(value);
			var convertBack = Volume.Quarts.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.09, 79.18893)]
	[TestCase(2.3, 2023.72)]
	[TestCase(0.67, 589.5176)]
	public void ConvertKnownKilolitresToQuarts(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToPints(value);
			var convertBack = Volume.Pints.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.4, 703.902)]
	[TestCase(67.0, 117903.46835618)]
	[TestCase(9.3, 16365.7)]
	public void ConvertKnownKilolitresToPints(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToGallons(value);
			var convertBack = Volume.Gallons.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(109.0, 23976.638149)]
	[TestCase(7.2, 1583.78)]
	[TestCase(0.4, 87.9877)]
	public void ConvertKnownKilolitresToGallons(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.2, 7039.02)]
	[TestCase(4.8, 168936.31286856)]
	[TestCase(6.0, 211170.391085)]
	public void ConvertKnownKilolitresToFluidOunces(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.0, 811536.5448442)]
	[TestCase(0.2, 40576.82724221160)]
	[TestCase(2.4, 486921.92690653)]
	public void ConvertKnownKilolitresToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.3, 87916.45902479)]
	[TestCase(0.6, 40576.82724221)]
	[TestCase(0.03, 2028.841)]
	public void ConvertKnownKilolitresToUSTablespoons(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.09, 95.10194)]
	[TestCase(2.5, 2641.72)]
	[TestCase(178.9, 189041.52)]
	public void ConvertKnownKilolitresToUSQuarts(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToUSPints(value);
			var convertBack = Volume.USPints.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(67.0, 141596.2200639)]
	[TestCase(4.7, 9932.87)]
	[TestCase(108.9, 230146.69)]
	public void ConvertKnownKilolitresToUSPints(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.6, 422.675)]
	[TestCase(57.0, 15057.8)]
	[TestCase(0.88, 232.4714)]
	public void ConvertKnownKilolitresToUSGallons(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.07, 2366.982)]
	[TestCase(4.2, 142018.89516765)]
	[TestCase(12.0, 405768.27190759)]
	public void ConvertKnownKilolitresToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilolitresToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Kilolitres.ToUSCups(value);
			var convertBack = Volume.USCups.ToKilolitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 50721.03405276)]
	[TestCase(0.8, 3381.4)]
	[TestCase(6.2, 26205.86759392)]
	public void ConvertKnownKilolitresToUSCups(double input, double expectation)
	{
		var result = Volume.Kilolitres.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class LitresTests
{
	[Property]
	public void FromLitresToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(34.0, 34000.0)]
	[TestCase(0.67, 670.0)]
	[TestCase(1.09, 1090.0)]
	public void ConvertKnownLitresToMillilitres(double input, double expectation)
	{
		var result = Volume.Litres.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(200.0, 0.2)]
	[TestCase(12345.0, 12.345)]
	[TestCase(80.0, 0.08)]
	public void ConvertKnownLitresToKilolitres(double input, double expectation)
	{
		var result = Volume.Litres.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(3.0, 506.809)]
	[TestCase(0.2, 33.7873)]
	[TestCase(4.2, 709.533)]
	public void ConvertKnownLitresToTeaspoons(double input, double expectation)
	{
		var result = Volume.Litres.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(3.0, 168.936)]
	[TestCase(0.4, 22.5248)]
	[TestCase(67.0, 3772.91)]
	public void ConvertKnownLitresToTablespoons(double input, double expectation)
	{
		var result = Volume.Litres.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToQuarts(value);
			var convertBack = Volume.Quarts.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(54.0, 47.5134)]
	[TestCase(2.0, 1.75975)]
	[TestCase(0.7, 0.615914)]
	public void ConvertKnownLitresToQuarts(double input, double expectation)
	{
		var result = Volume.Litres.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToPints(value);
			var convertBack = Volume.Pints.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.5, 0.879877)]
	[TestCase(145.0, 255.164)]
	[TestCase(9.1, 16.0138)]
	public void ConvertKnownLitresToPints(double input, double expectation)
	{
		var result = Volume.Litres.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToGallons(value);
			var convertBack = Volume.Gallons.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.9, 2.837603)]
	[TestCase(109.0, 23.9766)]
	[TestCase(67.0, 14.7379)]
	public void ConvertKnownLitresToGallons(double input, double expectation)
	{
		var result = Volume.Litres.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(5.0, 175.975)]
	[TestCase(0.3, 10.5585)]
	[TestCase(1.1, 38.7146)]
	public void ConvertKnownLitresToFluidOunces(double input, double expectation)
	{
		var result = Volume.Litres.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 2434.61)]
	[TestCase(0.7, 142.019)]
	[TestCase(89.9, 18239.29)]
	public void ConvertKnownLitresToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.Litres.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 811.537)]
	[TestCase(5.6, 378.717)]
	[TestCase(0.5, 33.814)]
	public void ConvertKnownLitresToUSTablespoons(double input, double expectation)
	{
		var result = Volume.Litres.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 12.6803)]
	[TestCase(1.09, 1.15179)]
	[TestCase(5.5, 5.81179)]
	public void ConvertKnownLitresToUSQuarts(double input, double expectation)
	{
		var result = Volume.Litres.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToUSPints(value);
			var convertBack = Volume.USPints.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(3.4, 7.18548)]
	[TestCase(0.8, 1.6907)]
	[TestCase(3000.0, 6340.129)]
	public void ConvertKnownLitresToUSPints(double input, double expectation)
	{
		var result = Volume.Litres.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(109.1, 28.821171)]
	[TestCase(41.5, 10.96314)]
	[TestCase(0.8, 0.211338)]
	public void ConvertKnownLitresToUSGallons(double input, double expectation)
	{
		var result = Volume.Litres.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(81.0, 2738.94)]
	[TestCase(7.3, 246.842)]
	[TestCase(0.65, 21.97911)]
	public void ConvertKnownLitresToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.Litres.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromLitresToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Litres.ToUSCups(value);
			var convertBack = Volume.USCups.ToLitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.9, 3.80408)]
	[TestCase(103.9, 439.15962)]
	[TestCase(71.6, 302.6355)]
	public void ConvertKnownLitresToUSCups(double input, double expectation)
	{
		var result = Volume.Litres.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class MillilitresTests
{
	[Property]
	public void FromMillilitresToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToLitres(value);
			var convertBack = Volume.Litres.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1900.0, 1.9)]
	[TestCase(56789.0, 56.789)]
	[TestCase(567.0, 0.567)]
	public void ConvertKnownMillilitresToLitres(double input, double expectation)
	{
		var result = Volume.Millilitres.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(10060000.0, 10.06)]
	[TestCase(987654.0, 0.987654)]
	[TestCase(405000.0, 0.405)]
	public void ConvertKnownMillilitresToKilolitres(double input, double expectation)
	{
		var result = Volume.Millilitres.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.0, 0.168936)]
	[TestCase(56.0, 9.46043)]
	[TestCase(12.3, 2.077917)]
	public void ConvertKnownMillilitresToTeaspoons(double input, double expectation)
	{
		var result = Volume.Millilitres.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(109.0, 6.13802)]
	[TestCase(88.0, 4.95547)]
	[TestCase(12.0, 0.675745)]
	public void ConvertKnownMillilitresToTablespoons(double input, double expectation)
	{
		var result = Volume.Millilitres.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToQuarts(value);
			var convertBack = Volume.Quarts.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(890.0, 0.783091)]
	[TestCase(12345.0, 10.862081)]
	[TestCase(129.0, 0.113504)]
	public void ConvertKnownMillilitresToQuarts(double input, double expectation)
	{
		var result = Volume.Millilitres.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToPints(value);
			var convertBack = Volume.Pints.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(124.0, 0.218209)]
	[TestCase(99.0, 0.174216)]
	[TestCase(607.3, 1.0686986)]
	public void ConvertKnownMillilitresToPints(double input, double expectation)
	{
		var result = Volume.Millilitres.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToGallons(value);
			var convertBack = Volume.Gallons.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1234.0, 0.2714421)]
	[TestCase(9000.0, 1.979723)]
	[TestCase(10209.98, 2.2458816257)]
	public void ConvertKnownMillilitresToGallons(double input, double expectation)
	{
		var result = Volume.Millilitres.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(78.0, 2.74522)]
	[TestCase(12.9, 0.4540165)]
	[TestCase(1009.0, 35.51184)]
	public void ConvertKnownMillilitresToFluidOunces(double input, double expectation)
	{
		var result = Volume.Millilitres.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(100.0, 20.2884)]
	[TestCase(12.3, 2.495476)]
	[TestCase(69.0, 13.999)]
	public void ConvertKnownMillilitresToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.Millilitres.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(38.0, 2.56987)]
	[TestCase(1023.0, 69.18349)]
	[TestCase(88.8, 6.00537)]
	public void ConvertKnownMillilitresToUSTablespoons(double input, double expectation)
	{
		var result = Volume.Millilitres.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1009.0, 1.066198)]
	[TestCase(4567.0, 4.825895)]
	[TestCase(8009.0, 8.463016)]
	public void ConvertKnownMillilitresToUSQuarts(double input, double expectation)
	{
		var result = Volume.Millilitres.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToUSPints(value);
			var convertBack = Volume.USPints.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(110.0, 0.232471)]
	[TestCase(2032.0, 4.294381)]
	[TestCase(1000.9, 2.11527846)]
	public void ConvertKnownMillilitresToUSPints(double input, double expectation)
	{
		var result = Volume.Millilitres.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(5000.0, 1.32086)]
	[TestCase(123456.0, 32.6136249)]
	[TestCase(900.0, 0.237755)]
	public void ConvertKnownMillilitresToUSGallons(double input, double expectation)
	{
		var result = Volume.Millilitres.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(67.0, 2.26554)]
	[TestCase(12.6, 0.4260567)]
	[TestCase(11009.0, 372.25858)]
	public void ConvertKnownMillilitresToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.Millilitres.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMillilitresToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Millilitres.ToUSCups(value);
			var convertBack = Volume.USCups.ToMillilitres(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(348.0, 1.47091)]
	[TestCase(12.9, 0.05452511)]
	[TestCase(700.0, 2.95873)]
	public void ConvertKnownMillilitresToUSCups(double input, double expectation)
	{
		var result = Volume.Millilitres.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class PintsTests
{
	[Property]
	public void FromPintsToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.7, 397.783)]
	[TestCase(5.6, 3182.26)]
	[TestCase(6.0, 3409.57)]
	public void ConvertKnownPintsToMillilitres(double input, double expectation)
	{
		var result = Volume.Pints.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToLitres(value);
			var convertBack = Volume.Litres.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(6.0, 3.40957)]
	[TestCase(0.123, 0.069896134)]
	[TestCase(45.9, 26.08319)]
	public void ConvertKnownPintsToLitres(double input, double expectation)
	{
		var result = Volume.Pints.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(456.0, 0.259127)]
	[TestCase(10450.0, 5.9383301)]
	[TestCase(9000.9, 5.11486269)]
	public void ConvertKnownPintsToKilolitres(double input, double expectation)
	{
		var result = Volume.Pints.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(5.0, 480.0)]
	[TestCase(0.3, 28.8)]
	[TestCase(190.0, 18240.0)]
	public void ConvertKnownPintsToTeaspoons(double input, double expectation)
	{
		var result = Volume.Pints.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(187.0, 5984.0)]
	[TestCase(54.5, 1743.999)]
	[TestCase(0.33, 10.56)]
	public void ConvertKnownPintsToTablespoons(double input, double expectation)
	{
		var result = Volume.Pints.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToQuarts(value);
			var convertBack = Volume.Quarts.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(5.6, 2.8)]
	[TestCase(109.0, 54.5)]
	[TestCase(0.3, 0.15)]
	public void ConvertKnownPintsToQuarts(double input, double expectation)
	{
		var result = Volume.Pints.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToGallons(value);
			var convertBack = Volume.Gallons.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.3, 0.0375)]
	[TestCase(800.0, 100.0)]
	[TestCase(1.5, 0.1875)]
	public void ConvertKnownPintsToGallons(double input, double expectation)
	{
		var result = Volume.Pints.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.5, 30.0)]
	[TestCase(789.0, 15780.0)]
	[TestCase(1020.8, 20416.0)]
	public void ConvertKnownPintsToFluidOunces(double input, double expectation)
	{
		var result = Volume.Pints.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1020.8, 117689.298303295)]
	[TestCase(0.4, 46.1165)]
	[TestCase(104.0, 11990.2890120912)]
	public void ConvertKnownPintsToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.Pints.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(104.0, 3996.76)]
	[TestCase(5.6, 215.21)]
	[TestCase(0.4, 15.3722)]
	public void ConvertKnownPintsToUSTablespoons(double input, double expectation)
	{
		var result = Volume.Pints.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.55, 0.3302612)]
	[TestCase(80.6, 48.39828)]
	[TestCase(12.0, 7.2057)]
	public void ConvertKnownPintsToUSQuarts(double input, double expectation)
	{
		var result = Volume.Pints.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToUSPints(value);
			var convertBack = Volume.USPints.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 14.4114)]
	[TestCase(4.7, 5.64446)]
	[TestCase(0.44, 0.528418)]
	public void ConvertKnownPintsToUSPints(double input, double expectation)
	{
		var result = Volume.Pints.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.2, 0.180142)]
	[TestCase(9000.0, 1351.069)]
	[TestCase(108.4, 16.272871)]
	public void ConvertKnownPintsToUSGallons(double input, double expectation)
	{
		var result = Volume.Pints.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(108.0, 2075.24)]
	[TestCase(23.4, 449.6357)]
	[TestCase(8.65, 166.2115)]
	public void ConvertKnownPintsToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.Pints.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromPintsToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Pints.ToUSCups(value);
			var convertBack = Volume.USCups.ToPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(23.0, 55.2437)]
	[TestCase(3.0, 7.2057)]
	[TestCase(50.6, 121.5361)]
	public void ConvertKnownPintsToUSCups(double input, double expectation)
	{
		var result = Volume.Pints.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class QuartsTests
{
	[Property]
	public void FromQuartsToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.4, 1591.13)]
	[TestCase(800.0, 909218.37579999)]
	[TestCase(0.7, 795.566)]
	public void ConvertKnownQuartsToMillilitres(double input, double expectation)
	{
		var result = Volume.Quarts.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToLitres(value);
			var convertBack = Volume.Litres.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(675.0, 767.153)]
	[TestCase(45.8, 52.05273)]
	[TestCase(0.8, 0.909218)]
	public void ConvertKnownQuartsToLitres(double input, double expectation)
	{
		var result = Volume.Quarts.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(8009.0, 9.102409)]
	[TestCase(12345.0, 14.03037)]
	[TestCase(601.0, 0.68305)]
	public void ConvertKnownQuartsToKilolitres(double input, double expectation)
	{
		var result = Volume.Quarts.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(6.0, 1152.0)]
	[TestCase(0.9, 172.8)]
	[TestCase(0.03, 5.759998)]
	public void ConvertKnownQuartsToTeaspoons(double input, double expectation)
	{
		var result = Volume.Quarts.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(5.9, 377.6)]
	[TestCase(0.34, 21.75999)]
	[TestCase(2.9, 185.6)]
	public void ConvertKnownQuartsToTablespoons(double input, double expectation)
	{
		var result = Volume.Quarts.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToPints(value);
			var convertBack = Volume.Pints.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.5, 9.0)]
	[TestCase(102.8, 205.6)]
	[TestCase(0.46, 0.92)]
	public void ConvertKnownQuartsToPints(double input, double expectation)
	{
		var result = Volume.Quarts.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToGallons(value);
			var convertBack = Volume.Gallons.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.46, 0.115)]
	[TestCase(190.0, 47.5)]
	[TestCase(67.6, 16.9)]
	public void ConvertKnownQuartsToGallons(double input, double expectation)
	{
		var result = Volume.Quarts.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(67.6, 2704)]
	[TestCase(1009.0, 40360.0)]
	[TestCase(6.2, 248.0)]
	public void ConvertKnownQuartsToFluidOunces(double input, double expectation)
	{
		var result = Volume.Quarts.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(6.2, 1429.61)]
	[TestCase(0.7, 161.408)]
	[TestCase(80.3, 18515.77)]
	public void ConvertKnownQuartsToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.Quarts.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(80.0, 6148.86)]
	[TestCase(5.7, 438.107)]
	[TestCase(0.44, 33.81875)]
	public void ConvertKnownQuartsToUSTablespoons(double input, double expectation)
	{
		var result = Volume.Quarts.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.44, 0.528418)]
	[TestCase(12.7, 15.25206)]
	[TestCase(109.0, 130.904)]
	public void ConvertKnownQuartsToUSQuarts(double input, double expectation)
	{
		var result = Volume.Quarts.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToUSPints(value);
			var convertBack = Volume.USPints.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(18.0, 43.2342)]
	[TestCase(2.5, 6.00475)]
	[TestCase(0.4, 0.96076)]
	public void ConvertKnownQuartsToUSPints(double input, double expectation)
	{
		var result = Volume.Quarts.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.8, 1.44114)]
	[TestCase(0.3, 0.0900712)]
	[TestCase(1.5, 0.450356)]
	public void ConvertKnownQuartsToUSGallons(double input, double expectation)
	{
		var result = Volume.Quarts.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(6.0, 230.582)]
	[TestCase(0.46, 17.67798)]
	[TestCase(2.0, 76.8608)]
	public void ConvertKnownQuartsToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.Quarts.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromQuartsToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Quarts.ToUSCups(value);
			var convertBack = Volume.USCups.ToQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(2.0, 9.6076)]
	[TestCase(800.9, 3847.3632)]
	[TestCase(0.23, 1.104874)]
	public void ConvertKnownQuartsToUSCups(double input, double expectation)
	{
		var result = Volume.Quarts.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class TablespoonsTests
{
	[Property]
	public void FromTablespoonsToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(2.7, 47.9471)]
	[TestCase(0.65, 11.54281)]
	[TestCase(80.1, 1422.43)]
	public void ConvertKnownTablespoonsToMillilitres(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToLitres(value);
			var convertBack = Volume.Litres.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(55.0, 0.976699)]
	[TestCase(190.0, 3.37405)]
	[TestCase(4000.0, 71.0397889)]
	public void ConvertKnownTablespoonsToLitres(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(10000.0, 0.1775817)]
	[TestCase(98765.0, 1.7538858)]
	[TestCase(666999.0, 11.8446826)]
	public void ConvertKnownTablespoonsToKilolitres(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 36.0)]
	[TestCase(0.24, 0.72)]
	[TestCase(19.9, 59.7)]
	public void ConvertKnownTablespoonsToTeaspoons(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToQuarts(value);
			var convertBack = Volume.Quarts.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(190.0, 2.96875)]
	[TestCase(9.0, 0.140625)]
	[TestCase(3.7, 0.0578125)]
	public void ConvertKnownTablespoonsToQuarts(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToPints(value);
			var convertBack = Volume.Pints.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.7, 0.146875)]
	[TestCase(190.0, 5.9375)]
	[TestCase(1090.9, 34.0906391)]
	public void ConvertKnownTablespoonsToPints(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToGallons(value);
			var convertBack = Volume.Gallons.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(8000.0, 31.25001)]
	[TestCase(54.0, 0.210938)]
	[TestCase(99.3, 0.3878908)]
	public void ConvertKnownTablespoonsToGallons(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(80.8, 50.50002)]
	[TestCase(9009.0, 5630.627)]
	[TestCase(12.6, 7.875003)]
	public void ConvertKnownTablespoonsToFluidOunces(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 43.2342)]
	[TestCase(0.6, 2.16171)]
	[TestCase(52.9, 190.5909)]
	public void ConvertKnownTablespoonsToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(67.0, 80.4637)]
	[TestCase(5.8, 6.96551)]
	[TestCase(0.23, 0.2762186)]
	public void ConvertKnownTablespoonsToUSTablespoons(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(54.0, 1.0133)]
	[TestCase(1005.9, 18.875563)]
	[TestCase(0.9, 0.0168884)]
	public void ConvertKnownTablespoonsToUSQuarts(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToUSPints(value);
			var convertBack = Volume.USPints.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(34.0, 1.27601)]
	[TestCase(109.3, 4.1019963)]
	[TestCase(190.0, 7.13064)]
	public void ConvertKnownTablespoonsToUSPints(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(900.0, 4.22209)]
	[TestCase(2.8, 0.0131354)]
	[TestCase(1469.0, 6.891391)]
	public void ConvertKnownTablespoonsToUSGallons(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1009.0, 605.8795)]
	[TestCase(8.2, 4.9239)]
	[TestCase(190.5, 114.39053)]
	public void ConvertKnownTablespoonsToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTablespoonsToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Tablespoons.ToUSCups(value);
			var convertBack = Volume.USCups.ToTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(109.0, 8.18147)]
	[TestCase(3.4, 0.255202)]
	[TestCase(1000.0, 75.0594)]
	public void ConvertKnownTablespoonsToUSCups(double input, double expectation)
	{
		var result = Volume.Tablespoons.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class TeaspoonsTests
{
	[Property]
	public void FromTeaspoonsToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.6, 3.55163)]
	[TestCase(1.3, 7.69521)]
	[TestCase(0.07, 0.4143573)]
	public void ConvertKnownTeaspoonsToMillilitres(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToLitres(value);
			var convertBack = Volume.Litres.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(32.0, 0.18942)]
	[TestCase(180.0, 1.06549)]
	[TestCase(4567.0, 27.03386)]
	public void ConvertKnownTeaspoonsToLitres(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(236511.0, 1.4)]
	[TestCase(33787.3, 0.2)]
	[TestCase(1689.363, 0.01)]
	public void ConvertKnownTeaspoonsToKilolitres(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 4.0)]
	[TestCase(900.8, 300.26667)]
	[TestCase(1.23, 0.41)]
	public void ConvertKnownTeaspoonsToTablespoons(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToQuarts(value);
			var convertBack = Volume.Quarts.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(109.0, 0.567709)]
	[TestCase(4500.0, 23.43751)]
	[TestCase(89.0, 0.463542)]
	public void ConvertKnownTeaspoonsToQuarts(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToPints(value);
			var convertBack = Volume.Pints.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(678.0, 7.0625)]
	[TestCase(109.0, 1.13542)]
	[TestCase(12.5, 0.1302084)]
	public void ConvertKnownTeaspoonsToPints(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToGallons(value);
			var convertBack = Volume.Gallons.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(190.0, 0.247396)]
	[TestCase(8090.0, 10.53386)]
	[TestCase(238.9, 0.31106784)]
	public void ConvertKnownTeaspoonsToGallons(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(109.0, 22.7083)]
	[TestCase(55.7, 11.60417)]
	[TestCase(609.0, 126.875)]
	public void ConvertKnownTeaspoonsToFluidOunces(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(90.0, 108.086)]
	[TestCase(1.45, 1.741379)]
	[TestCase(80.1, 96.19616)]
	public void ConvertKnownTeaspoonsToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(56.0, 22.4177)]
	[TestCase(7.0, 2.80222)]
	[TestCase(109.0, 43.6345)]
	public void ConvertKnownTeaspoonsToUSTablespoons(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(199.0, 1.24474)]
	[TestCase(5.9, 0.0369042)]
	[TestCase(23.0, 0.143864)]
	public void ConvertKnownTeaspoonsToUSQuarts(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToUSPints(value);
			var convertBack = Volume.USPints.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(106.0, 1.32605)]
	[TestCase(34.0, 0.425337)]
	[TestCase(6.21, 0.07656059)]
	public void ConvertKnownTeaspoonsToUSPints(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(900.0, 1.40736)]
	[TestCase(1234.6, 1.93059035)]
	[TestCase(88.0, 0.137609)]
	public void ConvertKnownTeaspoonsToUSGallons(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(56.0, 11.2089)]
	[TestCase(2.9, 0.580459)]
	[TestCase(1020.0, 204.1616)]
	public void ConvertKnownTeaspoonsToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromTeaspoonsToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.Teaspoons.ToUSCups(value);
			var convertBack = Volume.USCups.ToTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(8000.0, 200.1584)]
	[TestCase(34.0, 0.850673)]
	[TestCase(109.9, 2.7496761)]
	public void ConvertKnownTeaspoonsToUSCups(double input, double expectation)
	{
		var result = Volume.Teaspoons.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class USCupsTests
{
	[Property]
	public void FromUSCupsToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(11.0, 2602.47)]
	[TestCase(109.0, 25788.1177)]
	[TestCase(4.5, 1064.65)]
	public void ConvertKnownUSCupsToMillilitres(double input, double expectation)
	{
		var result = Volume.USCups.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToLitres(value);
			var convertBack = Volume.Litres.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(56.0, 13.2489)]
	[TestCase(4.1, 0.970012)]
	[TestCase(399.0, 94.3987)]
	public void ConvertKnownUSCupsToLitres(double input, double expectation)
	{
		var result = Volume.USCups.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(67.0, 0.0158514)]
	[TestCase(1009.7, 0.238883142)]
	[TestCase(918273.0, 217.25259)]
	public void ConvertKnownUSCupsToKilolitres(double input, double expectation)
	{
		var result = Volume.USCups.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.0, 159.873)]
	[TestCase(0.2, 7.99367)]
	[TestCase(6.12, 244.6063)]
	public void ConvertKnownUSCupsToTeaspoons(double input, double expectation)
	{
		var result = Volume.USCups.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.3, 57.288)]
	[TestCase(120.6, 1606.7274)]
	[TestCase(0.66, 8.793036)]
	public void ConvertKnownUSCupsToTablespoons(double input, double expectation)
	{
		var result = Volume.USCups.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToQuarts(value);
			var convertBack = Volume.Quarts.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1009.0, 210.0421)]
	[TestCase(66.98, 13.943129)]
	[TestCase(0.123, 0.025604731)]
	public void ConvertKnownUSCupsToQuarts(double input, double expectation)
	{
		var result = Volume.USCups.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToPints(value);
			var convertBack = Volume.Pints.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(5.0, 2.08169)]
	[TestCase(0.43, 0.1790249)]
	[TestCase(800.4, 333.23621)]
	public void ConvertKnownUSCupsToPints(double input, double expectation)
	{
		var result = Volume.USCups.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToGallons(value);
			var convertBack = Volume.Gallons.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(56.0, 2.91436)]
	[TestCase(104.12, 5.41862726)]
	[TestCase(6.1, 0.317457)]
	public void ConvertKnownUSCupsToGallons(double input, double expectation)
	{
		var result = Volume.USCups.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(55.0, 457.971)]
	[TestCase(0.4, 3.3307)]
	[TestCase(88.4, 736.084)]
	public void ConvertKnownUSCupsToFluidOunces(double input, double expectation)
	{
		var result = Volume.USCups.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 576.0)]
	[TestCase(5.12, 245.7601)]
	[TestCase(6701.0, 321648.0)]
	public void ConvertKnownUSCupsToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.USCups.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(677.0, 10832.0)]
	[TestCase(1.9, 30.4)]
	[TestCase(800.8, 12812.8)]
	public void ConvertKnownUSCupsToUSTablespoons(double input, double expectation)
	{
		var result = Volume.USCups.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(800.8, 200.2)]
	[TestCase(4.84, 1.21)]
	[TestCase(0.99, 0.2475)]
	public void ConvertKnownUSCupsToUSQuarts(double input, double expectation)
	{
		var result = Volume.USCups.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToUSPints(value);
			var convertBack = Volume.USPints.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.99, 0.495)]
	[TestCase(358.9, 179.45)]
	[TestCase(1000.0, 500.0)]
	public void ConvertKnownUSCupsToUSPints(double input, double expectation)
	{
		var result = Volume.USCups.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1000.0, 62.5)]
	[TestCase(0.78, 0.04875)]
	[TestCase(123.123, 7.6951875)]
	public void ConvertKnownUSCupsToUSGallons(double input, double expectation)
	{
		var result = Volume.USCups.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSCupsToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USCups.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToUSCups(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(123.123, 984.984)]
	[TestCase(4.0, 32.0)]
	[TestCase(0.9, 7.2)]
	public void ConvertKnownUSCupsToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.USCups.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class USFluidOuncesTests
{
	[Property]
	public void FromUSFluidOuncesToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.98, 28.98206)]
	[TestCase(8.2, 242.503)]
	[TestCase(100.3, 2966.225)]
	public void ConvertKnownUSFluidOuncesToMillilitres(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToLitres(value);
			var convertBack = Volume.Litres.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 0.354882)]
	[TestCase(150.6, 4.4537736)]
	[TestCase(5.9, 0.174484)]
	public void ConvertKnownUSFluidOuncesToLitres(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(34.0, 0.0010055)]
	[TestCase(109.1, 0.0032264721)]
	[TestCase(45678.0, 1.3508597)]
	public void ConvertKnownUSFluidOuncesToKilolitres(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.0, 19.9842)]
	[TestCase(0.12, 0.5995252)]
	[TestCase(2.99, 14.93817)]
	public void ConvertKnownUSFluidOuncesToTeaspoons(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(800.0, 1332.28)]
	[TestCase(0.02, 0.03330695)]
	[TestCase(2.7, 4.49644)]
	public void ConvertKnownUSFluidOuncesToTablespoons(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToQuarts(value);
			var convertBack = Volume.Quarts.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(3.5, 0.0910737)]
	[TestCase(0.76, 0.01977601)]
	[TestCase(2.0, 0.0520421)]
	public void ConvertKnownUSFluidOuncesToQuarts(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToPints(value);
			var convertBack = Volume.Pints.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 0.624506)]
	[TestCase(0.4, 0.0208169)]
	[TestCase(1.99, 0.1035639)]
	public void ConvertKnownUSFluidOuncesToPints(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToGallons(value);
			var convertBack = Volume.Gallons.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(3.0, 0.0195158)]
	[TestCase(100.5, 0.65377934)]
	[TestCase(0.9, 0.00585474)]
	public void ConvertKnownUSFluidOuncesToGallons(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.6, 0.624506)]
	[TestCase(123.0, 128.024)]
	[TestCase(8009.0, 8336.109)]
	public void ConvertKnownUSFluidOuncesToFluidOunces(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(45.0, 270.0)]
	[TestCase(1.5, 9.0)]
	[TestCase(400.8, 2404.8008)]
	public void ConvertKnownUSFluidOuncesToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.0, 8.0)]
	[TestCase(170.2, 340.4)]
	[TestCase(8811.0, 17622.0)]
	public void ConvertKnownUSFluidOuncesToUSTablespoons(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(8811.0, 275.3438)]
	[TestCase(4.2, 0.13125)]
	[TestCase(109.0, 3.40625)]
	public void ConvertKnownUSFluidOuncesToUSQuarts(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToUSPints(value);
			var convertBack = Volume.USPints.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(109.0, 6.8125)]
	[TestCase(77.09, 4.818125)]
	[TestCase(180.4, 11.275)]
	public void ConvertKnownUSFluidOuncesToUSPints(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(45.0, 0.351563)]
	[TestCase(1.8, 0.0140625)]
	[TestCase(778.9, 6.0851562)]
	public void ConvertKnownUSFluidOuncesToUSGallons(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSFluidOuncesToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USFluidOunces.ToUSCups(value);
			var convertBack = Volume.USCups.ToUSFluidOunces(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(45.0, 5.625)]
	[TestCase(66.9, 8.3625)]
	[TestCase(0.29, 0.03625)]
	public void ConvertKnownUSFluidOuncesToUSCups(double input, double expectation)
	{
		var result = Volume.USFluidOunces.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class USGallonsTests
{
	[Property]
	public void FromUSGallonsToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(2.0, 7570.82)]
	[TestCase(0.1, 378.541)]
	[TestCase(56.0, 211983.0599039)]
	public void ConvertKnownUSGallonsToMillilitres(double input, double expectation)
	{
		var result = Volume.USGallons.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToLitres(value);
			var convertBack = Volume.Litres.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(56.0, 211.983)]
	[TestCase(5.1, 19.3056)]
	[TestCase(2.5, 9.46353)]
	public void ConvertKnownUSGallonsToLitres(double input, double expectation)
	{
		var result = Volume.USGallons.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(111.0, 0.420181)]
	[TestCase(9090.0, 34.40939)]
	[TestCase(12345.0, 46.730908)]
	public void ConvertKnownUSGallonsToKilolitres(double input, double expectation)
	{
		var result = Volume.USGallons.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(5.0, 3197.47)]
	[TestCase(0.4, 255.797)]
	[TestCase(8000.0, 5115948.07582550)]
	public void ConvertKnownUSGallonsToTeaspoons(double input, double expectation)
	{
		var result = Volume.USGallons.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(79.0, 16840.0)]
	[TestCase(12.67, 2700.7943)]
	[TestCase(55.1, 11745.36)]
	public void ConvertKnownUSGallonsToTablespoons(double input, double expectation)
	{
		var result = Volume.USGallons.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToQuarts(value);
			var convertBack = Volume.Quarts.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(54.0, 179.858)]
	[TestCase(2.9, 9.65902)]
	[TestCase(0.2, 0.666139)]
	public void ConvertKnownUSGallonsToQuarts(double input, double expectation)
	{
		var result = Volume.USGallons.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToPints(value);
			var convertBack = Volume.Pints.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(2.0, 13.3228)]
	[TestCase(0.12, 0.7993672)]
	[TestCase(500.0, 3330.7)]
	public void ConvertKnownUSGallonsToPints(double input, double expectation)
	{
		var result = Volume.USGallons.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToGallons(value);
			var convertBack = Volume.Gallons.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(23.0, 19.1515)]
	[TestCase(8.2, 6.82793)]
	[TestCase(1.09, 0.9076149)]
	public void ConvertKnownUSGallonsToGallons(double input, double expectation)
	{
		var result = Volume.USGallons.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.09, 145.2184)]
	[TestCase(34.0, 4529.75)]
	[TestCase(666.0, 88729.724440098)]
	public void ConvertKnownUSGallonsToFluidOunces(double input, double expectation)
	{
		var result = Volume.USGallons.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.0, 3072.0)]
	[TestCase(1.28, 983.0403)]
	[TestCase(6.99, 5368.322)]
	public void ConvertKnownUSGallonsToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.USGallons.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(34.0, 8704.0)]
	[TestCase(8.4, 2150.4)]
	[TestCase(0.091, 23.296)]
	public void ConvertKnownUSGallonsToUSTablespoons(double input, double expectation)
	{
		var result = Volume.USGallons.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.091, 0.364)]
	[TestCase(23.0, 92.0)]
	[TestCase(1000.8, 4003.2)]
	public void ConvertKnownUSGallonsToUSQuarts(double input, double expectation)
	{
		var result = Volume.USGallons.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToUSPints(value);
			var convertBack = Volume.USPints.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1000.8, 8006.4)]
	[TestCase(23.6, 188.8)]
	[TestCase(0.71, 5.68)]
	public void ConvertKnownUSGallonsToUSPints(double input, double expectation)
	{
		var result = Volume.USGallons.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.71, 90.88)]
	[TestCase(83.2, 10649.6)]
	[TestCase(777.0, 99456.0)]
	public void ConvertKnownUSGallonsToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.USGallons.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSGallonsToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USGallons.ToUSCups(value);
			var convertBack = Volume.USCups.ToUSGallons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(777.0, 12432.0)]
	[TestCase(5.71, 91.36)]
	[TestCase(0.98, 15.68)]
	public void ConvertKnownUSGallonsToUSCups(double input, double expectation)
	{
		var result = Volume.USGallons.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class USPintsTests
{
	[Property]
	public void FromUSPintsToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.66, 312.2965)]
	[TestCase(9.1, 4305.91)]
	[TestCase(0.8, 378.541)]
	public void ConvertKnownUSPintsToMillilitres(double input, double expectation)
	{
		var result = Volume.USPints.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToLitres(value);
			var convertBack = Volume.Litres.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.5, 0.709765)]
	[TestCase(0.6, 0.283906)]
	[TestCase(1367.0, 646.8322)]
	public void ConvertKnownUSPintsToLitres(double input, double expectation)
	{
		var result = Volume.USPints.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1900.0, 0.8990353)]
	[TestCase(8888.0, 4.205592)]
	[TestCase(123456.0, 58.4164747)]
	public void ConvertKnownUSPintsToKilolitres(double input, double expectation)
	{
		var result = Volume.USPints.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(6.0, 479.62)]
	[TestCase(0.08, 6.394935)]
	[TestCase(3.1, 247.804)]
	public void ConvertKnownUSPintsToTeaspoons(double input, double expectation)
	{
		var result = Volume.USPints.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(2.0, 53.2911)]
	[TestCase(0.09, 2.398101)]
	[TestCase(1678.0, 44711.25)]
	public void ConvertKnownUSPintsToTablespoons(double input, double expectation)
	{
		var result = Volume.USPints.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToQuarts(value);
			var convertBack = Volume.Quarts.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 4.99605)]
	[TestCase(503.8, 209.75063)]
	[TestCase(0.65, 0.2706191)]
	public void ConvertKnownUSPintsToQuarts(double input, double expectation)
	{
		var result = Volume.USPints.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToPints(value);
			var convertBack = Volume.Pints.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.9, 0.749407)]
	[TestCase(102.0, 84.9328)]
	[TestCase(8000.7, 6661.97635)]
	public void ConvertKnownUSPintsToPints(double input, double expectation)
	{
		var result = Volume.USPints.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToGallons(value);
			var convertBack = Volume.Gallons.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(80.0, 8.32674)]
	[TestCase(6.2, 0.645322)]
	[TestCase(0.7, 0.072859)]
	public void ConvertKnownUSPintsToGallons(double input, double expectation)
	{
		var result = Volume.USPints.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 199.842)]
	[TestCase(9.7, 161.539)]
	[TestCase(124.0, 2065.03)]
	public void ConvertKnownUSPintsToFluidOunces(double input, double expectation)
	{
		var result = Volume.USPints.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.0, 384.0)]
	[TestCase(2.5, 240.0)]
	[TestCase(8001.9, 768182.4)]
	public void ConvertKnownUSPintsToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.USPints.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(80.0, 2560.0)]
	[TestCase(12.7, 406.4)]
	[TestCase(0.6, 19.2)]
	public void ConvertKnownUSPintsToUSTablespoons(double input, double expectation)
	{
		var result = Volume.USPints.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.6, 0.3)]
	[TestCase(10090.0, 5045.0)]
	[TestCase(4.56, 2.28)]
	public void ConvertKnownUSPintsToUSQuarts(double input, double expectation)
	{
		var result = Volume.USPints.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.56, 0.57)]
	[TestCase(9000.0, 1125.0)]
	[TestCase(47.2, 5.9)]
	public void ConvertKnownUSPintsToUSGallons(double input, double expectation)
	{
		var result = Volume.USPints.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(47.2, 755.2)]
	[TestCase(1001.0, 16016.0)]
	[TestCase(23.9, 382.4)]
	public void ConvertKnownUSPintsToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.USPints.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSPintsToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USPints.ToUSCups(value);
			var convertBack = Volume.USCups.ToUSPints(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(23.9, 47.8)]
	[TestCase(1009.0, 2018.0)]
	[TestCase(45.9, 91.8)]
	public void ConvertKnownUSPintsToUSCups(double input, double expectation)
	{
		var result = Volume.USPints.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class USQuartsTests
{
	[Property]
	public void FromUSQuartsToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(9000.0, 8517176.51400)]
	[TestCase(5.0, 4731.76)]
	[TestCase(0.7, 662.447)]
	public void ConvertKnownUSQuartsToMillilitres(double input, double expectation)
	{
		var result = Volume.USQuarts.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToLitres(value);
			var convertBack = Volume.Litres.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(9.0, 8.51718)]
	[TestCase(1024.0, 969.0654)]
	[TestCase(0.8, 0.757082)]
	public void ConvertKnownUSQuartsToLitres(double input, double expectation)
	{
		var result = Volume.USQuarts.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1000.0, 0.946353)]
	[TestCase(6789.0, 6.42479)]
	[TestCase(45.0, 0.0425859)]
	public void ConvertKnownUSQuartsToKilolitres(double input, double expectation)
	{
		var result = Volume.USQuarts.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(45.0, 7194.3)]
	[TestCase(6.5, 1039.18)]
	[TestCase(0.9, 143.886)]
	public void ConvertKnownUSQuartsToTeaspoons(double input, double expectation)
	{
		var result = Volume.USQuarts.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(6.0, 319.747)]
	[TestCase(89.4, 4764.227)]
	[TestCase(4.67, 248.8696)]
	public void ConvertKnownUSQuartsToTablespoons(double input, double expectation)
	{
		var result = Volume.USQuarts.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToQuarts(value);
			var convertBack = Volume.Quarts.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.6, 3.8303)]
	[TestCase(0.9, 0.749407)]
	[TestCase(134.0, 111.578)]
	public void ConvertKnownUSQuartsToQuarts(double input, double expectation)
	{
		var result = Volume.USQuarts.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToPints(value);
			var convertBack = Volume.Pints.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(123.0, 204.838)]
	[TestCase(1090.9, 1816.72854)]
	[TestCase(56.0, 93.2595)]
	public void ConvertKnownUSQuartsToPints(double input, double expectation)
	{
		var result = Volume.USQuarts.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToGallons(value);
			var convertBack = Volume.Gallons.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(56.0, 11.6574)]
	[TestCase(7.12, 1.48216)]
	[TestCase(800.0, 166.535)]
	public void ConvertKnownUSQuartsToGallons(double input, double expectation)
	{
		var result = Volume.USQuarts.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(800.0, 26645.56289492)]
	[TestCase(6.8, 226.487)]
	[TestCase(0.9, 29.9763)]
	public void ConvertKnownUSQuartsToFluidOunces(double input, double expectation)
	{
		var result = Volume.USQuarts.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(3.0, 576.0)]
	[TestCase(0.12, 23.04001)]
	[TestCase(4.5, 864.0)]
	public void ConvertKnownUSQuartsToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.USQuarts.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.5, 288.0)]
	[TestCase(0.777, 49.728)]
	[TestCase(1.8, 115.2)]
	public void ConvertKnownUSQuartsToUSTablespoons(double input, double expectation)
	{
		var result = Volume.USQuarts.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToUSPints(value);
			var convertBack = Volume.USPints.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.8, 3.6)]
	[TestCase(900.0, 1800.0)]
	[TestCase(12.45, 24.9)]
	public void ConvertKnownUSQuartsToUSPints(double input, double expectation)
	{
		var result = Volume.USQuarts.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.45, 3.1125)]
	[TestCase(0.8, 0.2)]
	[TestCase(100.9, 25.225)]
	public void ConvertKnownUSQuartsToUSGallons(double input, double expectation)
	{
		var result = Volume.USQuarts.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(100.9, 3228.8)]
	[TestCase(12345.0, 395040.0)]
	[TestCase(8.7, 278.4)]
	public void ConvertKnownUSQuartsToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.USQuarts.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSQuartsToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USQuarts.ToUSCups(value);
			var convertBack = Volume.USCups.ToUSQuarts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(8.7, 34.8)]
	[TestCase(123.9, 495.6)]
	[TestCase(0.66, 2.64)]
	public void ConvertKnownUSQuartsToUSCups(double input, double expectation)
	{
		var result = Volume.USQuarts.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class USTablespoonsTests
{
	[Property]
	public void FromUSTablespoonsToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 177.441)]
	[TestCase(0.8, 11.8294)]
	[TestCase(4500.0, 66540.44)]
	public void ConvertKnownUSTablespoonsToMillilitres(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToLitres(value);
			var convertBack = Volume.Litres.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(567.0, 8.3841)]
	[TestCase(80.9, 1.196249)]
	[TestCase(10000.0, 147.8676)]
	public void ConvertKnownUSTablespoonsToLitres(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(9900.0, 0.146389)]
	[TestCase(123456.0, 1.82551483)]
	[TestCase(18009.0, 0.26629485)]
	public void ConvertKnownUSTablespoonsToKilolitres(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(14.0, 34.9723)]
	[TestCase(0.9, 2.24822)]
	[TestCase(180.0, 449.644)]
	public void ConvertKnownUSTablespoonsToTeaspoons(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(109.0, 90.7614)]
	[TestCase(89.0, 74.108)]
	[TestCase(5.2, 4.3299)]
	public void ConvertKnownUSTablespoonsToTablespoons(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToQuarts(value);
			var convertBack = Volume.Quarts.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(345.0, 4.48863)]
	[TestCase(89.9, 1.169647)]
	[TestCase(12.88, 0.16757568)]
	public void ConvertKnownUSTablespoonsToQuarts(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToPints(value);
			var convertBack = Volume.Pints.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 0.312253)]
	[TestCase(809.7, 21.069259)]
	[TestCase(0.4, 0.0104084)]
	public void ConvertKnownUSTablespoonsToPints(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToGallons(value);
			var convertBack = Volume.Gallons.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(400.0, 1.30105)]
	[TestCase(1200.9, 3.90608761)]
	[TestCase(8.0, 0.0260211)]
	public void ConvertKnownUSTablespoonsToGallons(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.0, 2.08169)]
	[TestCase(50.9, 26.48945)]
	[TestCase(123.0, 64.0118)]
	public void ConvertKnownUSTablespoonsToFluidOunces(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToUSTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToUSTeaspoons(value);
			var convertBack = Volume.USTeaspoons.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(90.0, 270.0)]
	[TestCase(4.5, 13.5)]
	[TestCase(4608.0, 13824.0)]
	public void ConvertKnownUSTablespoonsToUSTeaspoons(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToUSTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(456.0, 7.125)]
	[TestCase(7.12, 0.11125)]
	[TestCase(194.9, 3.0453125)]
	public void ConvertKnownUSTablespoonsToUSQuarts(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToUSPints(value);
			var convertBack = Volume.USPints.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(194.9, 6.090625)]
	[TestCase(2000.0, 62.5)]
	[TestCase(18.7, 0.584375)]
	public void ConvertKnownUSTablespoonsToUSPints(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(18.7, 0.07304687)]
	[TestCase(1900.0, 7.421875)]
	[TestCase(12345.0, 48.222656)]
	public void ConvertKnownUSTablespoonsToUSGallons(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1234.0, 617.0)]
	[TestCase(89.3, 44.65)]
	[TestCase(90.99, 45.495)]
	public void ConvertKnownUSTablespoonsToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTablespoonsToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTablespoons.ToUSCups(value);
			var convertBack = Volume.USCups.ToUSTablespoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(90.99, 5.686875)]
	[TestCase(1230.0, 76.875)]
	[TestCase(9000.9, 562.55625)]
	public void ConvertKnownUSTablespoonsToUSCups(double input, double expectation)
	{
		var result = Volume.USTablespoons.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class USTeaspoonsTests
{
	[Property]
	public void FromUSTeaspoonsToMillilitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToMillilitres(value);
			var convertBack = Volume.Millilitres.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(6.9, 34.0095)]
	[TestCase(1.6, 7.88627)]
	[TestCase(800.0, 3943.14)]
	public void ConvertKnownUSTeaspoonsToMillilitres(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToMillilitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToLitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToLitres(value);
			var convertBack = Volume.Litres.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(7.0, 0.0345024)]
	[TestCase(90.0, 0.443603)]
	[TestCase(56.7, 0.2794698)]
	public void ConvertKnownUSTeaspoonsToLitres(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToLitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToKilolitresAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToKilolitres(value);
			var convertBack = Volume.Kilolitres.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(10009000.0, 49.33356028)]
	[TestCase(1234567.8, 6.08508592078)]
	[TestCase(9800.0, 0.04830342)]
	public void ConvertKnownUSTeaspoonsToKilolitres(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToKilolitres(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToTeaspoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToTeaspoons(value);
			var convertBack = Volume.Teaspoons.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(122.0, 101.586)]
	[TestCase(89.2, 74.27448)]
	[TestCase(900.0, 749.406)]
	public void ConvertKnownUSTeaspoonsToTeaspoons(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToTeaspoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToTablespoons(value);
			var convertBack = Volume.Tablespoons.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(500.0, 138.779)]
	[TestCase(12.34, 3.425064)]
	[TestCase(667.0, 185.131)]
	public void ConvertKnownUSTeaspoonsToTablespoons(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToQuarts(value);
			var convertBack = Volume.Quarts.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(78.0, 0.338274)]
	[TestCase(900.1, 3.9035927)]
	[TestCase(116.9, 0.50697698)]
	public void ConvertKnownUSTeaspoonsToQuarts(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToPints(value);
			var convertBack = Volume.Pints.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(116.0, 1.00615)]
	[TestCase(59.5, 0.5160844)]
	[TestCase(1900.0, 16.48)]
	public void ConvertKnownUSTeaspoonsToPints(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToGallons(value);
			var convertBack = Volume.Gallons.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(199.0, 0.215758)]
	[TestCase(12345.0, 13.384583)]
	[TestCase(90001.0, 97.580059)]
	public void ConvertKnownUSTeaspoonsToGallons(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToFluidOunces(value);
			var convertBack = Volume.FluidOunces.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(123.0, 21.3373)]
	[TestCase(89.0, 15.4392)]
	[TestCase(1009.0, 175.035)]
	public void ConvertKnownUSTeaspoonsToFluidOunces(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToUSTablespoonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToUSTablespoons(value);
			var convertBack = Volume.USTablespoons.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(190.0, 63.3333)]
	[TestCase(5.6, 1.86667)]
	[TestCase(0.7, 0.233333)]
	public void ConvertKnownUSTeaspoonsToUSTablespoons(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToUSTablespoons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToUSQuartsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToUSQuarts(value);
			var convertBack = Volume.USQuarts.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(100.4, 0.5229165)]
	[TestCase(9000.0, 46.87498)]
	[TestCase(1234.0, 6.427081)]
	public void ConvertKnownUSTeaspoonsToUSQuarts(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToUSQuarts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToUSPintsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToUSPints(value);
			var convertBack = Volume.USPints.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(109.0, 1.13542)]
	[TestCase(3400.0, 35.41666)]
	[TestCase(10.7, 0.1114583)]
	public void ConvertKnownUSTeaspoonsToUSPints(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToUSPints(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToUSGallonsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToUSGallons(value);
			var convertBack = Volume.USGallons.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(109.0, 0.141927)]
	[TestCase(9876.0, 12.85937)]
	[TestCase(10900.0, 14.192704)]
	public void ConvertKnownUSTeaspoonsToUSGallons(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToUSGallons(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToUSFluidOuncesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToUSFluidOunces(value);
			var convertBack = Volume.USFluidOunces.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(180.0, 30.0)]
	[TestCase(5.6, 0.933333)]
	[TestCase(900.5, 150.08328)]
	public void ConvertKnownUSTeaspoonsToUSFluidOunces(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToUSFluidOunces(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSTeaspoonsToUSCupsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Volume.USTeaspoons.ToUSCups(value);
			var convertBack = Volume.USCups.ToUSTeaspoons(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(90.0, 1.875)]
	[TestCase(4500.8, 93.7666363)]
	[TestCase(0.9, 0.01875)]
	public void ConvertKnownUSTeaspoonsToUSCups(double input, double expectation)
	{
		var result = Volume.USTeaspoons.ToUSCups(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
