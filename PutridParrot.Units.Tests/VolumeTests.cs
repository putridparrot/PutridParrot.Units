// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

using NUnit.Framework;
using FsCheck;
using PropertyAttribute = FsCheck.NUnit.PropertyAttribute;

namespace PutridParrot.Units.Tests
{
	public class CubicFeetTests
	{
		[Property]
		public void FromCubicFeetToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.08, 2265.348)]
		[TestCase(6.0, 169900.79)]
		[TestCase(0.2393275, 6776.988)]
		public void ConvertKnownCubicFeetToMillilitres(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToLitres(value);
				var convertBack = Volume.Litres.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.3, 8.49505)]
		[TestCase(6.0, 169.901)]
		[TestCase(56.0, 1585.74)]
		public void ConvertKnownCubicFeetToLitres(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(300.0, 8.49505)]
		[TestCase(141.259, 4.0)]
		[TestCase(111.0, 3.14317)]
		public void ConvertKnownCubicFeetToKilolitres(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.3, 1435.12)]
		[TestCase(4.0, 19134.95)]
		[TestCase(67.0, 320510.579)]
		public void ConvertKnownCubicFeetToTeaspoons(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.7, 1116.21)]
		[TestCase(1.1, 1754.04)]
		[TestCase(0.494174, 788.0)]
		public void ConvertKnownCubicFeetToTablespoons(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToQuarts(value);
				var convertBack = Volume.Quarts.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.6, 14.9492)]
		[TestCase(0.20068, 5.0)]
		[TestCase(0.301019, 7.5)]
		public void ConvertKnownCubicFeetToQuarts(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToPints(value);
				var convertBack = Volume.Pints.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.6, 29.8984)]
		[TestCase(0.88299, 44.0)]
		[TestCase(18.0612, 900.0)]
		public void ConvertKnownCubicFeetToPints(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToGallons(value);
				var convertBack = Volume.Gallons.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.0, 18.6865)]
		[TestCase(2.08707, 13.0)]
		[TestCase(14.1278, 88.0)]
		public void ConvertKnownCubicFeetToGallons(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(14.0, 13952.6)]
		[TestCase(7.0, 6976.3)]
		[TestCase(0.34777769, 346.6)]
		public void ConvertKnownCubicFeetToFluidOunces(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 28725.2)]
		[TestCase(0.4, 2298.02)]
		[TestCase(9.2, 52854.3679)]
		public void ConvertKnownCubicFeetToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.4, 2681.02)]
		[TestCase(4.0, 7660.04)]
		[TestCase(0.6443821, 1234.0)]
		public void ConvertKnownCubicFeetToUSTablespoons(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 179.532)]
		[TestCase(12.0, 359.065)]
		[TestCase(25.9674, 777.0)]
		public void ConvertKnownCubicFeetToUSQuarts(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToUSPints(value);
				var convertBack = Volume.USPints.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.9, 412.925)]
		[TestCase(23.0, 1376.42)]
		[TestCase(14.8385, 888.0)]
		public void ConvertKnownCubicFeetToUSPints(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(77.0, 576.0)]
		[TestCase(45.0, 336.623)]
		[TestCase(4.0, 29.9221)]
		public void ConvertKnownCubicFeetToUSGallons(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(20.0, 19150.119)]
		[TestCase(0.359266, 344.0)]
		[TestCase(0.699734, 670.0)]
		public void ConvertKnownCubicFeetToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToUSCups(value);
				var convertBack = Volume.USCups.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(77.0, 9084.99)]
		[TestCase(8.0, 943.895)]
		[TestCase(4.79714, 566.0)]
		public void ConvertKnownCubicFeetToUSCups(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(28.2517, 0.8)]
		[TestCase(45.0, 1.27426)]
		[TestCase(2719.23, 77.0)]
		public void ConvertKnownCubicFeetToCubicMetres(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.8, 11750.4)]
		[TestCase(5666.0, 9790848.0)]
		[TestCase(0.7, 1209.6)]
		public void ConvertKnownCubicFeetToCubicInches(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicFeetToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicFeet.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToCubicFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(67.0, 11.9332)]
		[TestCase(44.0, 7.83673)]
		[TestCase(67.375, 12.0)]
		public void ConvertKnownCubicFeetToOilBarrels(double input, double expectation)
		{
			var result = Volume.CubicFeet.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class CubicInchesTests
	{
		[Property]
		public void FromCubicInchesToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.9, 63.9095)]
		[TestCase(4.0, 65.5483)]
		[TestCase(5.37009, 88.0)]
		public void ConvertKnownCubicInchesToMillilitres(double input, double expectation)
		{
			var result = Volume.CubicInches.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToLitres(value);
				var convertBack = Volume.Litres.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(560.0, 9.17676)]
		[TestCase(555.0, 9.09482)]
		[TestCase(7444.9, 122.0)]
		public void ConvertKnownCubicInchesToLitres(double input, double expectation)
		{
			var result = Volume.CubicInches.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(560.0, 0.009176)]
		[TestCase(5555.0, 0.09103014)]
		[TestCase(100000.0, 1.6387064)]
		public void ConvertKnownCubicInchesToKilolitres(double input, double expectation)
		{
			var result = Volume.CubicInches.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 13.8419)]
		[TestCase(6.0, 16.6102)]
		[TestCase(11.5591, 32.0)]
		public void ConvertKnownCubicInchesToTeaspoons(double input, double expectation)
		{
			var result = Volume.CubicInches.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(34.0, 31.3749)]
		[TestCase(11.9204, 11.0)]
		[TestCase(99.0, 91.3562246)]
		public void ConvertKnownCubicInchesToTablespoons(double input, double expectation)
		{
			var result = Volume.CubicInches.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToQuarts(value);
				var convertBack = Volume.Quarts.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(800.0, 11.5349)]
		[TestCase(77.0, 1.11023)]
		[TestCase(4577.42, 66.0)]
		public void ConvertKnownCubicInchesToQuarts(double input, double expectation)
		{
			var result = Volume.CubicInches.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToPints(value);
				var convertBack = Volume.Pints.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(89.5, 2.58093)]
		[TestCase(23095.2, 666.0)]
		[TestCase(2670.16, 77.0)]
		public void ConvertKnownCubicInchesToPints(double input, double expectation)
		{
			var result = Volume.CubicInches.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToGallons(value);
				var convertBack = Volume.Gallons.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 3.24419)]
		[TestCase(666.0, 2.4007)]
		[TestCase(21361.3, 77.0)]
		public void ConvertKnownCubicInchesToGallons(double input, double expectation)
		{
			var result = Volume.CubicInches.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(77.0, 44.4093)]
		[TestCase(55.0, 31.7209)]
		[TestCase(27.7419, 16.0)]
		public void ConvertKnownCubicInchesToFluidOunces(double input, double expectation)
		{
			var result = Volume.CubicInches.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(678.0, 2254.13)]
		[TestCase(55.0, 182.857)]
		[TestCase(26.4687, 88.0)]
		public void ConvertKnownCubicInchesToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.CubicInches.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(66.0, 73.1429)]
		[TestCase(55.0, 60.9524)]
		[TestCase(10.8281, 12.0)]
		public void ConvertKnownCubicInchesToUSTablespoons(double input, double expectation)
		{
			var result = Volume.CubicInches.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(345.0, 5.97403)]
		[TestCase(33.0, 0.571429)]
		[TestCase(3176.25, 55.0)]
		public void ConvertKnownCubicInchesToUSQuarts(double input, double expectation)
		{
			var result = Volume.CubicInches.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToUSPints(value);
				var convertBack = Volume.USPints.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(89.0, 3.08225)]
		[TestCase(3176.25, 110.0)]
		[TestCase(462.0, 16.0)]
		public void ConvertKnownCubicInchesToUSPints(double input, double expectation)
		{
			var result = Volume.CubicInches.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(600.0, 2.5974)]
		[TestCase(462.0, 2.0)]
		[TestCase(899.0, 3.89177)]
		public void ConvertKnownCubicInchesToUSGallons(double input, double expectation)
		{
			var result = Volume.CubicInches.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 498.700607)]
		[TestCase(777.0, 430.544858)]
		[TestCase(178.664, 98.99982822)]
		public void ConvertKnownCubicInchesToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.CubicInches.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToUSCups(value);
				var convertBack = Volume.USCups.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(7.0, 0.477956)]
		[TestCase(77.0, 5.25752)]
		[TestCase(123.0, 8.39837)]
		public void ConvertKnownCubicInchesToUSCups(double input, double expectation)
		{
			var result = Volume.CubicInches.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(24409.5, 0.4)]
		[TestCase(7777.0, 0.1274422)]
		[TestCase(366142.0, 6.0)]
		public void ConvertKnownCubicInchesToCubicMetres(double input, double expectation)
		{
			var result = Volume.CubicInches.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(11750.4, 6.8)]
		[TestCase(57024.0, 33.0)]
		[TestCase(1234.0, 0.7141204)]
		public void ConvertKnownCubicInchesToCubicFeet(double input, double expectation)
		{
			var result = Volume.CubicInches.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicInchesToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicInches.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToCubicInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(90000.0, 9.2764378)]
		[TestCase(8888.0, 0.9160998)]
		[TestCase(11642.4, 1.2)]
		public void ConvertKnownCubicInchesToOilBarrels(double input, double expectation)
		{
			var result = Volume.CubicInches.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class CubicMetresTests
	{
		[Property]
		public void FromCubicMetresToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.01, 10000.0)]
		[TestCase(0.2306735, 230673.5)]
		[TestCase(0.009, 9000.0)]
		public void ConvertKnownCubicMetresToMillilitres(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToLitres(value);
				var convertBack = Volume.Litres.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.1, 100.0)]
		[TestCase(0.009, 9.0)]
		[TestCase(0.08989, 89.89)]
		public void ConvertKnownCubicMetresToLitres(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 0.9)]
		[TestCase(100.9, 100.9)]
		[TestCase(666.9, 666.9)]
		public void ConvertKnownCubicMetresToKilolitres(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.1, 16893.6)]
		[TestCase(3.0, 506808.0)]
		[TestCase(0.91, 153731.76)]
		public void ConvertKnownCubicMetresToTeaspoons(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 50680.8899)]
		[TestCase(0.1, 5631.21)]
		[TestCase(9.0, 506808.89)]
		public void ConvertKnownCubicMetresToTablespoons(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToQuarts(value);
				var convertBack = Volume.Quarts.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.8, 703.902)]
		[TestCase(0.4, 351.951)]
		[TestCase(6.0, 5279.26)]
		public void ConvertKnownCubicMetresToQuarts(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToPints(value);
				var convertBack = Volume.Pints.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.7, 1231.83)]
		[TestCase(4.5, 7918.875)]
		[TestCase(0.06, 105.5852)]
		public void ConvertKnownCubicMetresToPints(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToGallons(value);
				var convertBack = Volume.Gallons.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.2, 43.9938)]
		[TestCase(0.4, 87.9877)]
		[TestCase(0.0272765, 6.0)]
		public void ConvertKnownCubicMetresToGallons(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.7, 24636.569)]
		[TestCase(0.09, 3167.557)]
		[TestCase(4.0, 140780.399)]
		public void ConvertKnownCubicMetresToFluidOunces(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.5, 101442.0)]
		[TestCase(2.0, 405768.0)]
		[TestCase(0.3, 60865.199)]
		public void ConvertKnownCubicMetresToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.2, 13525.6)]
		[TestCase(0.9, 60865.2)]
		[TestCase(2.0, 135256.0)]
		public void ConvertKnownCubicMetresToUSTablespoons(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.2, 211.338)]
		[TestCase(4.0, 4226.76)]
		[TestCase(0.851718, 900.0)]
		public void ConvertKnownCubicMetresToUSQuarts(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToUSPints(value);
				var convertBack = Volume.USPints.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.4, 845.351)]
		[TestCase(7.0, 14793.66)]
		[TestCase(6.0, 12680.280)]
		public void ConvertKnownCubicMetresToUSPints(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.7, 184.92)]
		[TestCase(0.851718, 225.0)]
		[TestCase(0.02, 5.283441)]
		public void ConvertKnownCubicMetresToUSGallons(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 30432.6)]
		[TestCase(0.3, 10144.2)]
		[TestCase(3.3, 111586.2)]
		public void ConvertKnownCubicMetresToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToUSCups(value);
				var convertBack = Volume.USCups.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(7.0, 29166.7)]
		[TestCase(11.0, 45833.37)]
		[TestCase(66.0, 275000.22)]
		public void ConvertKnownCubicMetresToUSCups(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.8, 28.2517)]
		[TestCase(5.0, 176.573)]
		[TestCase(12.12, 428.014163)]
		public void ConvertKnownCubicMetresToCubicFeet(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.4, 24409.48)]
		[TestCase(3.0, 183071.099)]
		[TestCase(0.99, 60413.4629)]
		public void ConvertKnownCubicMetresToCubicInches(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCubicMetresToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.CubicMetres.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToCubicMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.09, 0.566083)]
		[TestCase(5.0, 31.4491)]
		[TestCase(1.2, 7.547772)]
		public void ConvertKnownCubicMetresToOilBarrels(double input, double expectation)
		{
			var result = Volume.CubicMetres.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class FluidOuncesTests
	{
		[Property]
		public void FromFluidOuncesToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 340.957)]
		[TestCase(6.01, 170.7625)]
		[TestCase(0.78, 22.16219)]
		public void ConvertKnownFluidOuncesToMillilitres(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToLitres(value);
				var convertBack = Volume.Litres.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(800.0, 22.7305)]
		[TestCase(4.5, 0.127859)]
		[TestCase(109.0, 3.09702)]
		public void ConvertKnownFluidOuncesToLitres(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(56909.0, 1.616959)]
		[TestCase(9009.0, 0.2559733)]
		[TestCase(123456.0, 3.50776304)]
		public void ConvertKnownFluidOuncesToKilolitres(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123.0, 590.4)]
		[TestCase(9.12, 43.77598)]
		[TestCase(0.2, 0.96)]
		public void ConvertKnownFluidOuncesToTeaspoons(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(7.0, 11.2)]
		[TestCase(165.4, 264.63989)]
		[TestCase(80.1, 128.1599)]
		public void ConvertKnownFluidOuncesToTablespoons(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToQuarts(value);
				var convertBack = Volume.Quarts.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(89.0, 2.225)]
		[TestCase(5.9, 0.1475)]
		[TestCase(1300.0, 32.5)]
		public void ConvertKnownFluidOuncesToQuarts(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToPints(value);
				var convertBack = Volume.Pints.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1300.0, 65.0)]
		[TestCase(5.7, 0.285)]
		[TestCase(1900.0, 95.0)]
		public void ConvertKnownFluidOuncesToPints(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToGallons(value);
				var convertBack = Volume.Gallons.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1900.0, 11.875)]
		[TestCase(5.6, 0.035)]
		[TestCase(12345.0, 77.15625)]
		public void ConvertKnownFluidOuncesToGallons(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12345.0, 71163.512)]
		[TestCase(8.9, 51.3046)]
		[TestCase(0.005, 0.028822808)]
		public void ConvertKnownFluidOuncesToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(190.0, 365.089)]
		[TestCase(6.8, 13.0663)]
		[TestCase(2340.0, 4496.357)]
		public void ConvertKnownFluidOuncesToUSTablespoons(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(45.0, 1.35107)]
		[TestCase(1090.0, 32.72589)]
		[TestCase(777.0, 23.3285)]
		public void ConvertKnownFluidOuncesToUSQuarts(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToUSPints(value);
				var convertBack = Volume.USPints.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(678.0, 40.7122)]
		[TestCase(4.5, 0.270214)]
		[TestCase(1900.0, 114.0902)]
		public void ConvertKnownFluidOuncesToUSPints(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1890.0, 14.18622)]
		[TestCase(5.8, 0.0435344)]
		[TestCase(10090.0, 75.734905)]
		public void ConvertKnownFluidOuncesToUSGallons(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(190.0, 182.544)]
		[TestCase(54.8, 52.64964)]
		[TestCase(1.7, 1.63329)]
		public void ConvertKnownFluidOuncesToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToUSCups(value);
				var convertBack = Volume.USCups.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 0.72057)]
		[TestCase(1800.0, 216.171)]
		[TestCase(6.9, 0.828655)]
		public void ConvertKnownFluidOuncesToUSCups(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(316756.0, 9.00000284)]
		[TestCase(8000.0, 0.2273043690)]
		[TestCase(123456.0, 3.5077610)]
		public void ConvertKnownFluidOuncesToCubicMetres(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(888.0, 0.891017)]
		[TestCase(100900.0, 101.242841)]
		[TestCase(678.0, 0.680304)]
		public void ConvertKnownFluidOuncesToCubicFeet(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(7.0, 12.1371)]
		[TestCase(900.0, 1560.48)]
		[TestCase(6.0, 10.4032)]
		public void ConvertKnownFluidOuncesToCubicInches(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFluidOuncesToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.FluidOunces.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(430859.0, 77.0)]
		[TestCase(777.0, 0.13886)]
		[TestCase(1234.0, 0.2205316)]
		public void ConvertKnownFluidOuncesToOilBarrels(double input, double expectation)
		{
			var result = Volume.FluidOunces.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class GallonsTests
	{
		[Property]
		public void FromGallonsToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.3, 5909.92)]
		[TestCase(0.45, 2045.741)]
		[TestCase(1.8, 8182.96)]
		public void ConvertKnownGallonsToMillilitres(double input, double expectation)
		{
			var result = Volume.Gallons.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToLitres(value);
				var convertBack = Volume.Litres.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123.0, 559.169)]
		[TestCase(9.3, 42.2786)]
		[TestCase(0.67, 3.04588)]
		public void ConvertKnownGallonsToLitres(double input, double expectation)
		{
			var result = Volume.Gallons.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1009.0, 4.587005)]
		[TestCase(9.6, 0.0436425)]
		[TestCase(123456.0, 561.242087)]
		public void ConvertKnownGallonsToKilolitres(double input, double expectation)
		{
			var result = Volume.Gallons.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 4608.0)]
		[TestCase(78.12, 59996.16)]
		[TestCase(0.34, 261.1199)]
		public void ConvertKnownGallonsToTeaspoons(double input, double expectation)
		{
			var result = Volume.Gallons.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 230.4)]
		[TestCase(1.6, 409.6)]
		[TestCase(0.33, 84.47997)]
		public void ConvertKnownGallonsToTablespoons(double input, double expectation)
		{
			var result = Volume.Gallons.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToQuarts(value);
				var convertBack = Volume.Quarts.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.0, 436.0)]
		[TestCase(5.8, 23.2)]
		[TestCase(0.23, 0.92)]
		public void ConvertKnownGallonsToQuarts(double input, double expectation)
		{
			var result = Volume.Gallons.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToPints(value);
				var convertBack = Volume.Pints.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.23, 1.84)]
		[TestCase(190.0, 1520.0)]
		[TestCase(24.7, 197.6)]
		public void ConvertKnownGallonsToPints(double input, double expectation)
		{
			var result = Volume.Gallons.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(24.7, 3952.0)]
		[TestCase(13.09, 2094.4)]
		[TestCase(5.8, 928.0)]
		public void ConvertKnownGallonsToFluidOunces(double input, double expectation)
		{
			var result = Volume.Gallons.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.8, 5349.51)]
		[TestCase(0.44, 405.8251)]
		[TestCase(1.9, 1752.43)]
		public void ConvertKnownGallonsToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.Gallons.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.8, 553.398)]
		[TestCase(0.33, 101.4562)]
		[TestCase(100.0, 30744.33080)]
		public void ConvertKnownGallonsToUSTablespoons(double input, double expectation)
		{
			var result = Volume.Gallons.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(78.0, 374.696)]
		[TestCase(1.7, 8.16646)]
		[TestCase(16.9, 81.18421)]
		public void ConvertKnownGallonsToUSQuarts(double input, double expectation)
		{
			var result = Volume.Gallons.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToUSPints(value);
				var convertBack = Volume.USPints.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(13.4, 128.7418)]
		[TestCase(8.12, 78.01371)]
		[TestCase(0.99, 9.511523)]
		public void ConvertKnownGallonsToUSPints(double input, double expectation)
		{
			var result = Volume.Gallons.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.5, 1.80142)]
		[TestCase(0.78, 0.9367409)]
		[TestCase(103.0, 123.698)]
		public void ConvertKnownGallonsToUSGallons(double input, double expectation)
		{
			var result = Volume.Gallons.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(111.0, 17063.1)]
		[TestCase(89.9, 13819.57)]
		[TestCase(1.2, 184.466)]
		public void ConvertKnownGallonsToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.Gallons.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToUSCups(value);
				var convertBack = Volume.USCups.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.2, 23.0582)]
		[TestCase(0.55, 10.56836)]
		[TestCase(890.0, 17101.534007630)]
		public void ConvertKnownGallonsToUSCups(double input, double expectation)
		{
			var result = Volume.Gallons.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9898.62, 45.0)]
		[TestCase(12345.0, 56.121481)]
		[TestCase(80.0, 0.363687)]
		public void ConvertKnownGallonsToCubicMetres(double input, double expectation)
		{
			var result = Volume.Gallons.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(55.0, 8.8299)]
		[TestCase(90.5, 14.5292)]
		[TestCase(123.0, 19.7469)]
		public void ConvertKnownGallonsToCubicFeet(double input, double expectation)
		{
			var result = Volume.Gallons.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(66.0, 18309.6539)]
		[TestCase(2.4007, 666.0)]
		[TestCase(77.0, 21361.2629)]
		public void ConvertKnownGallonsToCubicInches(double input, double expectation)
		{
			var result = Volume.Gallons.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGallonsToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Gallons.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(174.862, 5.0)]
		[TestCase(19409.6, 555.0)]
		[TestCase(24.4806, 0.7)]
		public void ConvertKnownGallonsToOilBarrels(double input, double expectation)
		{
			var result = Volume.Gallons.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class KilolitresTests
	{
		[Property]
		public void FromKilolitresToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.09, 90000.0)]
		[TestCase(0.00123, 1230.0)]
		[TestCase(1.2, 1.2e+6)]
		public void ConvertKnownKilolitresToMillilitres(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToLitres(value);
				var convertBack = Volume.Litres.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.2, 1200.0)]
		[TestCase(0.8, 800.0)]
		[TestCase(456.0, 456000.0)]
		public void ConvertKnownKilolitresToLitres(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.7, 118255.41900799)]
		[TestCase(0.01, 1689.363)]
		[TestCase(4.5, 760213.407908)]
		public void ConvertKnownKilolitresToTeaspoons(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.3, 16893.631286856)]
		[TestCase(2.9, 163305.10243961)]
		[TestCase(0.067, 3772.911)]
		public void ConvertKnownKilolitresToTablespoons(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToQuarts(value);
				var convertBack = Volume.Quarts.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.09, 79.18893)]
		[TestCase(2.3, 2023.72)]
		[TestCase(0.67, 589.5176)]
		public void ConvertKnownKilolitresToQuarts(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToPints(value);
				var convertBack = Volume.Pints.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.4, 703.902)]
		[TestCase(67.0, 117903.46835618)]
		[TestCase(9.3, 16365.7)]
		public void ConvertKnownKilolitresToPints(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToGallons(value);
				var convertBack = Volume.Gallons.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.0, 23976.638149)]
		[TestCase(7.2, 1583.78)]
		[TestCase(0.4, 87.9877)]
		public void ConvertKnownKilolitresToGallons(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.2, 7039.02)]
		[TestCase(4.8, 168936.31286856)]
		[TestCase(6.0, 211170.391085)]
		public void ConvertKnownKilolitresToFluidOunces(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.0, 811536.5448442)]
		[TestCase(0.2, 40576.82724221160)]
		[TestCase(2.4, 486921.92690653)]
		public void ConvertKnownKilolitresToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.3, 87916.45902479)]
		[TestCase(0.6, 40576.82724221)]
		[TestCase(0.03, 2028.841)]
		public void ConvertKnownKilolitresToUSTablespoons(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.09, 95.10194)]
		[TestCase(2.5, 2641.72)]
		[TestCase(178.9, 189041.52)]
		public void ConvertKnownKilolitresToUSQuarts(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToUSPints(value);
				var convertBack = Volume.USPints.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(67.0, 141596.2200639)]
		[TestCase(4.7, 9932.87)]
		[TestCase(108.9, 230146.69)]
		public void ConvertKnownKilolitresToUSPints(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.6, 422.675)]
		[TestCase(57.0, 15057.8)]
		[TestCase(0.88, 232.4714)]
		public void ConvertKnownKilolitresToUSGallons(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.07, 2366.982)]
		[TestCase(4.2, 142018.89516765)]
		[TestCase(12.0, 405768.27190759)]
		public void ConvertKnownKilolitresToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToUSCups(value);
				var convertBack = Volume.USCups.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 50721.03405276)]
		[TestCase(0.8, 3381.4)]
		[TestCase(6.2, 26205.86759392)]
		public void ConvertKnownKilolitresToUSCups(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1000.0, 1000.0)]
		[TestCase(0.9, 0.9)]
		[TestCase(6.09, 6.09)]
		public void ConvertKnownKilolitresToCubicMetres(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0566337, 2.0)]
		[TestCase(7.9, 278.986)]
		[TestCase(88.0, 3107.69)]
		public void ConvertKnownKilolitresToCubicFeet(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 366142.19999)]
		[TestCase(0.1, 6102.37)]
		[TestCase(0.8, 48818.959)]
		public void ConvertKnownKilolitresToCubicInches(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilolitresToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Kilolitres.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToKilolitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.476962, 3.0)]
		[TestCase(4.0, 25.1592)]
		[TestCase(6.0, 37.7389)]
		public void ConvertKnownKilolitresToOilBarrels(double input, double expectation)
		{
			var result = Volume.Kilolitres.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class LitresTests
	{
		[Property]
		public void FromLitresToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(34.0, 34000.0)]
		[TestCase(0.67, 670.0)]
		[TestCase(1.09, 1090.0)]
		public void ConvertKnownLitresToMillilitres(double input, double expectation)
		{
			var result = Volume.Litres.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(200.0, 0.2)]
		[TestCase(12345.0, 12.345)]
		[TestCase(80.0, 0.08)]
		public void ConvertKnownLitresToKilolitres(double input, double expectation)
		{
			var result = Volume.Litres.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.0, 506.809)]
		[TestCase(0.2, 33.7873)]
		[TestCase(4.2, 709.533)]
		public void ConvertKnownLitresToTeaspoons(double input, double expectation)
		{
			var result = Volume.Litres.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.0, 168.936)]
		[TestCase(0.4, 22.5248)]
		[TestCase(67.0, 3772.91)]
		public void ConvertKnownLitresToTablespoons(double input, double expectation)
		{
			var result = Volume.Litres.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToQuarts(value);
				var convertBack = Volume.Quarts.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(54.0, 47.5134)]
		[TestCase(2.0, 1.75975)]
		[TestCase(0.7, 0.615914)]
		public void ConvertKnownLitresToQuarts(double input, double expectation)
		{
			var result = Volume.Litres.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToPints(value);
				var convertBack = Volume.Pints.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.5, 0.879877)]
		[TestCase(145.0, 255.164)]
		[TestCase(9.1, 16.0138)]
		public void ConvertKnownLitresToPints(double input, double expectation)
		{
			var result = Volume.Litres.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToGallons(value);
				var convertBack = Volume.Gallons.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.9, 2.837603)]
		[TestCase(109.0, 23.9766)]
		[TestCase(67.0, 14.7379)]
		public void ConvertKnownLitresToGallons(double input, double expectation)
		{
			var result = Volume.Litres.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 175.975)]
		[TestCase(0.3, 10.5585)]
		[TestCase(1.1, 38.7146)]
		public void ConvertKnownLitresToFluidOunces(double input, double expectation)
		{
			var result = Volume.Litres.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 2434.61)]
		[TestCase(0.7, 142.019)]
		[TestCase(89.9, 18239.29)]
		public void ConvertKnownLitresToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.Litres.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 811.537)]
		[TestCase(5.6, 378.717)]
		[TestCase(0.5, 33.814)]
		public void ConvertKnownLitresToUSTablespoons(double input, double expectation)
		{
			var result = Volume.Litres.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 12.6803)]
		[TestCase(1.09, 1.15179)]
		[TestCase(5.5, 5.81179)]
		public void ConvertKnownLitresToUSQuarts(double input, double expectation)
		{
			var result = Volume.Litres.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToUSPints(value);
				var convertBack = Volume.USPints.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.4, 7.18548)]
		[TestCase(0.8, 1.6907)]
		[TestCase(3000.0, 6340.129)]
		public void ConvertKnownLitresToUSPints(double input, double expectation)
		{
			var result = Volume.Litres.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.1, 28.821171)]
		[TestCase(41.5, 10.96314)]
		[TestCase(0.8, 0.211338)]
		public void ConvertKnownLitresToUSGallons(double input, double expectation)
		{
			var result = Volume.Litres.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(81.0, 2738.94)]
		[TestCase(7.3, 246.842)]
		[TestCase(0.65, 21.97911)]
		public void ConvertKnownLitresToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.Litres.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToUSCups(value);
				var convertBack = Volume.USCups.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 3.80408)]
		[TestCase(103.9, 439.15962)]
		[TestCase(71.6, 302.6355)]
		public void ConvertKnownLitresToUSCups(double input, double expectation)
		{
			var result = Volume.Litres.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(400.5, 0.4005)]
		[TestCase(900.0, 0.9)]
		[TestCase(6090.0, 6.09)]
		public void ConvertKnownLitresToCubicMetres(double input, double expectation)
		{
			var result = Volume.Litres.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 0.176573)]
		[TestCase(84.9505, 3.0)]
		[TestCase(6.0, 0.211888)]
		public void ConvertKnownLitresToCubicFeet(double input, double expectation)
		{
			var result = Volume.Litres.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(666.0, 40641.7842)]
		[TestCase(788.0, 48086.675599)]
		[TestCase(4.0, 244.095)]
		public void ConvertKnownLitresToCubicInches(double input, double expectation)
		{
			var result = Volume.Litres.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLitresToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Litres.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToLitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8744.3, 55.0)]
		[TestCase(1234.0, 7.761626)]
		[TestCase(953.924, 6.0)]
		public void ConvertKnownLitresToOilBarrels(double input, double expectation)
		{
			var result = Volume.Litres.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class MillilitresTests
	{
		[Property]
		public void FromMillilitresToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToLitres(value);
				var convertBack = Volume.Litres.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1900.0, 1.9)]
		[TestCase(56789.0, 56.789)]
		[TestCase(567.0, 0.567)]
		public void ConvertKnownMillilitresToLitres(double input, double expectation)
		{
			var result = Volume.Millilitres.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(10060000.0, 10.06)]
		[TestCase(987654.0, 0.987654)]
		[TestCase(405000.0, 0.405)]
		public void ConvertKnownMillilitresToKilolitres(double input, double expectation)
		{
			var result = Volume.Millilitres.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.0, 0.168936)]
		[TestCase(56.0, 9.46043)]
		[TestCase(12.3, 2.077917)]
		public void ConvertKnownMillilitresToTeaspoons(double input, double expectation)
		{
			var result = Volume.Millilitres.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.0, 6.13802)]
		[TestCase(88.0, 4.95547)]
		[TestCase(12.0, 0.675745)]
		public void ConvertKnownMillilitresToTablespoons(double input, double expectation)
		{
			var result = Volume.Millilitres.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToQuarts(value);
				var convertBack = Volume.Quarts.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(890.0, 0.783091)]
		[TestCase(12345.0, 10.862081)]
		[TestCase(129.0, 0.113504)]
		public void ConvertKnownMillilitresToQuarts(double input, double expectation)
		{
			var result = Volume.Millilitres.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToPints(value);
				var convertBack = Volume.Pints.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(124.0, 0.218209)]
		[TestCase(99.0, 0.174216)]
		[TestCase(607.3, 1.0686986)]
		public void ConvertKnownMillilitresToPints(double input, double expectation)
		{
			var result = Volume.Millilitres.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToGallons(value);
				var convertBack = Volume.Gallons.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1234.0, 0.2714421)]
		[TestCase(9000.0, 1.979723)]
		[TestCase(10209.98, 2.2458816257)]
		public void ConvertKnownMillilitresToGallons(double input, double expectation)
		{
			var result = Volume.Millilitres.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(78.0, 2.74522)]
		[TestCase(12.9, 0.4540165)]
		[TestCase(1009.0, 35.51184)]
		public void ConvertKnownMillilitresToFluidOunces(double input, double expectation)
		{
			var result = Volume.Millilitres.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100.0, 20.2884)]
		[TestCase(12.3, 2.495476)]
		[TestCase(69.0, 13.999)]
		public void ConvertKnownMillilitresToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.Millilitres.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(38.0, 2.56987)]
		[TestCase(1023.0, 69.18349)]
		[TestCase(88.8, 6.00537)]
		public void ConvertKnownMillilitresToUSTablespoons(double input, double expectation)
		{
			var result = Volume.Millilitres.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1009.0, 1.066198)]
		[TestCase(4567.0, 4.825895)]
		[TestCase(8009.0, 8.463016)]
		public void ConvertKnownMillilitresToUSQuarts(double input, double expectation)
		{
			var result = Volume.Millilitres.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToUSPints(value);
				var convertBack = Volume.USPints.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(110.0, 0.232471)]
		[TestCase(2032.0, 4.294381)]
		[TestCase(1000.9, 2.11527846)]
		public void ConvertKnownMillilitresToUSPints(double input, double expectation)
		{
			var result = Volume.Millilitres.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5000.0, 1.32086)]
		[TestCase(123456.0, 32.6136249)]
		[TestCase(900.0, 0.237755)]
		public void ConvertKnownMillilitresToUSGallons(double input, double expectation)
		{
			var result = Volume.Millilitres.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(67.0, 2.26554)]
		[TestCase(12.6, 0.4260567)]
		[TestCase(11009.0, 372.25858)]
		public void ConvertKnownMillilitresToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.Millilitres.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToUSCups(value);
				var convertBack = Volume.USCups.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(348.0, 1.47091)]
		[TestCase(12.9, 0.05452511)]
		[TestCase(700.0, 2.95873)]
		public void ConvertKnownMillilitresToUSCups(double input, double expectation)
		{
			var result = Volume.Millilitres.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9999999.0, 9.999999)]
		[TestCase(123456.0, 0.123456)]
		[TestCase(400500.0, 0.4005)]
		public void ConvertKnownMillilitresToCubicMetres(double input, double expectation)
		{
			var result = Volume.Millilitres.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(254852.0, 9.0)]
		[TestCase(6000.0, 0.211888)]
		[TestCase(70792.1, 2.5)]
		public void ConvertKnownMillilitresToCubicFeet(double input, double expectation)
		{
			var result = Volume.Millilitres.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(777.0, 47.4154)]
		[TestCase(98.3224, 5.999987)]
		[TestCase(12.0, 0.732285)]
		public void ConvertKnownMillilitresToCubicInches(double input, double expectation)
		{
			var result = Volume.Millilitres.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillilitresToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Millilitres.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToMillilitres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(47696.2, 0.3)]
		[TestCase(143089.0, 0.9)]
		[TestCase(317.97459, 0.002)]
		public void ConvertKnownMillilitresToOilBarrels(double input, double expectation)
		{
			var result = Volume.Millilitres.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class OilBarrelsTests
	{
		[Property]
		public void FromOilBarrelsToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.8, 127189.6)]
		[TestCase(6.0, 953922.0)]
		[TestCase(0.06289182, 9998.981786)]
		public void ConvertKnownOilBarrelsToMillilitres(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToLitres(value);
				var convertBack = Volume.Litres.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 1907.85)]
		[TestCase(6.0, 953.924)]
		[TestCase(77.0, 12242.0)]
		public void ConvertKnownOilBarrelsToLitres(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 1.90785)]
		[TestCase(8.0, 1.2719)]
		[TestCase(77.0, 12.242)]
		public void ConvertKnownOilBarrelsToKilolitres(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.6, 16115.219)]
		[TestCase(4.0, 107434.8)]
		[TestCase(6.7, 179953.29)]
		public void ConvertKnownOilBarrelsToTeaspoons(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.7, 6267.04)]
		[TestCase(8.0, 71623.279)]
		[TestCase(10.052487, 89999.011387)]
		public void ConvertKnownOilBarrelsToTablespoons(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToQuarts(value);
				var convertBack = Volume.Quarts.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(88.0, 12310.232)]
		[TestCase(12.0, 1678.67)]
		[TestCase(6.0, 839.336)]
		public void ConvertKnownOilBarrelsToQuarts(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToPints(value);
				var convertBack = Volume.Pints.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8.0, 2238.23)]
		[TestCase(6.0, 1678.67)]
		[TestCase(0.275218, 77.0)]
		public void ConvertKnownOilBarrelsToPints(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToGallons(value);
				var convertBack = Volume.Gallons.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.0, 139.889)]
		[TestCase(6.0, 209.834)]
		[TestCase(18.0, 629.502)]
		public void ConvertKnownOilBarrelsToGallons(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.5, 2797.79)]
		[TestCase(6.0, 33573.4199)]
		[TestCase(77.0, 430858.889)]
		public void ConvertKnownOilBarrelsToFluidOunces(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.3, 9676.8)]
		[TestCase(7.0, 225792.0)]
		[TestCase(1.5, 48384.0)]
		public void ConvertKnownOilBarrelsToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.2, 2150.4)]
		[TestCase(6.0, 64512.0)]
		[TestCase(77.0, 827904.0)]
		public void ConvertKnownOilBarrelsToUSTablespoons(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.5, 756.0)]
		[TestCase(77.0, 12936.0)]
		[TestCase(0.7, 117.6)]
		public void ConvertKnownOilBarrelsToUSQuarts(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToUSPints(value);
				var convertBack = Volume.USPints.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(7.8, 2620.8)]
		[TestCase(0.7, 235.2)]
		[TestCase(3.0, 1008.0)]
		public void ConvertKnownOilBarrelsToUSPints(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(78.0, 3276.0)]
		[TestCase(3.0, 126.0)]
		[TestCase(777.0, 32634.0)]
		public void ConvertKnownOilBarrelsToUSGallons(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.9, 26342.4)]
		[TestCase(0.4, 2150.4)]
		[TestCase(3.0, 16128.0)]
		public void ConvertKnownOilBarrelsToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToUSCups(value);
				var convertBack = Volume.USCups.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(55.0, 36434.5849)]
		[TestCase(0.686847, 455.0)]
		[TestCase(9.2, 6094.51)]
		public void ConvertKnownOilBarrelsToUSCups(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(7.0, 1.1129112)]
		[TestCase(3.0, 0.476962)]
		[TestCase(78.0, 12.401)]
		public void ConvertKnownOilBarrelsToCubicMetres(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(88.0, 494.083)]
		[TestCase(3.0, 16.8438)]
		[TestCase(11.0, 61.7604)]
		public void ConvertKnownOilBarrelsToCubicFeet(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromOilBarrelsToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.OilBarrels.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToOilBarrels(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100.4, 974080.8)]
		[TestCase(5.0, 48510.0)]
		[TestCase(66.0, 640332.0)]
		public void ConvertKnownOilBarrelsToCubicInches(double input, double expectation)
		{
			var result = Volume.OilBarrels.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class PintsTests
	{
		[Property]
		public void FromPintsToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.7, 397.783)]
		[TestCase(5.6, 3182.26)]
		[TestCase(6.0, 3409.57)]
		public void ConvertKnownPintsToMillilitres(double input, double expectation)
		{
			var result = Volume.Pints.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToLitres(value);
				var convertBack = Volume.Litres.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 3.40957)]
		[TestCase(0.123, 0.069896134)]
		[TestCase(45.9, 26.08319)]
		public void ConvertKnownPintsToLitres(double input, double expectation)
		{
			var result = Volume.Pints.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(456.0, 0.259127)]
		[TestCase(10450.0, 5.9383301)]
		[TestCase(9000.9, 5.11486269)]
		public void ConvertKnownPintsToKilolitres(double input, double expectation)
		{
			var result = Volume.Pints.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 480.0)]
		[TestCase(0.3, 28.8)]
		[TestCase(190.0, 18240.0)]
		public void ConvertKnownPintsToTeaspoons(double input, double expectation)
		{
			var result = Volume.Pints.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(187.0, 5984.0)]
		[TestCase(54.5, 1743.999)]
		[TestCase(0.33, 10.56)]
		public void ConvertKnownPintsToTablespoons(double input, double expectation)
		{
			var result = Volume.Pints.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToQuarts(value);
				var convertBack = Volume.Quarts.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.6, 2.8)]
		[TestCase(109.0, 54.5)]
		[TestCase(0.3, 0.15)]
		public void ConvertKnownPintsToQuarts(double input, double expectation)
		{
			var result = Volume.Pints.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToGallons(value);
				var convertBack = Volume.Gallons.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.3, 0.0375)]
		[TestCase(800.0, 100.0)]
		[TestCase(1.5, 0.1875)]
		public void ConvertKnownPintsToGallons(double input, double expectation)
		{
			var result = Volume.Pints.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.5, 30.0)]
		[TestCase(789.0, 15780.0)]
		[TestCase(1020.8, 20416.0)]
		public void ConvertKnownPintsToFluidOunces(double input, double expectation)
		{
			var result = Volume.Pints.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1020.8, 117689.298303295)]
		[TestCase(0.4, 46.1165)]
		[TestCase(104.0, 11990.2890120912)]
		public void ConvertKnownPintsToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.Pints.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(104.0, 3996.76)]
		[TestCase(5.6, 215.21)]
		[TestCase(0.4, 15.3722)]
		public void ConvertKnownPintsToUSTablespoons(double input, double expectation)
		{
			var result = Volume.Pints.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.55, 0.3302612)]
		[TestCase(80.6, 48.39828)]
		[TestCase(12.0, 7.2057)]
		public void ConvertKnownPintsToUSQuarts(double input, double expectation)
		{
			var result = Volume.Pints.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToUSPints(value);
				var convertBack = Volume.USPints.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 14.4114)]
		[TestCase(4.7, 5.64446)]
		[TestCase(0.44, 0.528418)]
		public void ConvertKnownPintsToUSPints(double input, double expectation)
		{
			var result = Volume.Pints.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.2, 0.180142)]
		[TestCase(9000.0, 1351.069)]
		[TestCase(108.4, 16.272871)]
		public void ConvertKnownPintsToUSGallons(double input, double expectation)
		{
			var result = Volume.Pints.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(108.0, 2075.24)]
		[TestCase(23.4, 449.6357)]
		[TestCase(8.65, 166.2115)]
		public void ConvertKnownPintsToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.Pints.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToUSCups(value);
				var convertBack = Volume.USCups.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(23.0, 55.2437)]
		[TestCase(3.0, 7.2057)]
		[TestCase(50.6, 121.5361)]
		public void ConvertKnownPintsToUSCups(double input, double expectation)
		{
			var result = Volume.Pints.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(21117.0, 12.0)]
		[TestCase(14078.0, 8.0)]
		[TestCase(9999.0, 5.682044)]
		public void ConvertKnownPintsToCubicMetres(double input, double expectation)
		{
			var result = Volume.Pints.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(44.0, 0.88299)]
		[TestCase(1234.0, 24.76386)]
		[TestCase(8000.0, 160.5436)]
		public void ConvertKnownPintsToCubicFeet(double input, double expectation)
		{
			var result = Volume.Pints.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 173.387)]
		[TestCase(777.0, 26944.33979)]
		[TestCase(35.58511, 1234.0)]
		public void ConvertKnownPintsToCubicInches(double input, double expectation)
		{
			var result = Volume.Pints.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPintsToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Pints.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1398.89, 5.0)]
		[TestCase(122.0, 0.436059)]
		[TestCase(559.557, 2.0)]
		public void ConvertKnownPintsToOilBarrels(double input, double expectation)
		{
			var result = Volume.Pints.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class QuartsTests
	{
		[Property]
		public void FromQuartsToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.4, 1591.13)]
		[TestCase(800.0, 909218.37579999)]
		[TestCase(0.7, 795.566)]
		public void ConvertKnownQuartsToMillilitres(double input, double expectation)
		{
			var result = Volume.Quarts.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToLitres(value);
				var convertBack = Volume.Litres.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(675.0, 767.153)]
		[TestCase(45.8, 52.05273)]
		[TestCase(0.8, 0.909218)]
		public void ConvertKnownQuartsToLitres(double input, double expectation)
		{
			var result = Volume.Quarts.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8009.0, 9.102409)]
		[TestCase(12345.0, 14.03037)]
		[TestCase(601.0, 0.68305)]
		public void ConvertKnownQuartsToKilolitres(double input, double expectation)
		{
			var result = Volume.Quarts.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 1152.0)]
		[TestCase(0.9, 172.8)]
		[TestCase(0.03, 5.759998)]
		public void ConvertKnownQuartsToTeaspoons(double input, double expectation)
		{
			var result = Volume.Quarts.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.9, 377.6)]
		[TestCase(0.34, 21.75999)]
		[TestCase(2.9, 185.6)]
		public void ConvertKnownQuartsToTablespoons(double input, double expectation)
		{
			var result = Volume.Quarts.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToPints(value);
				var convertBack = Volume.Pints.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.5, 9.0)]
		[TestCase(102.8, 205.6)]
		[TestCase(0.46, 0.92)]
		public void ConvertKnownQuartsToPints(double input, double expectation)
		{
			var result = Volume.Quarts.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToGallons(value);
				var convertBack = Volume.Gallons.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.46, 0.115)]
		[TestCase(190.0, 47.5)]
		[TestCase(67.6, 16.9)]
		public void ConvertKnownQuartsToGallons(double input, double expectation)
		{
			var result = Volume.Quarts.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(67.6, 2704.0)]
		[TestCase(1009.0, 40360.0)]
		[TestCase(6.2, 248.0)]
		public void ConvertKnownQuartsToFluidOunces(double input, double expectation)
		{
			var result = Volume.Quarts.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.2, 1429.61)]
		[TestCase(0.7, 161.408)]
		[TestCase(80.3, 18515.77)]
		public void ConvertKnownQuartsToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.Quarts.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(80.0, 6148.86)]
		[TestCase(5.7, 438.107)]
		[TestCase(0.44, 33.81875)]
		public void ConvertKnownQuartsToUSTablespoons(double input, double expectation)
		{
			var result = Volume.Quarts.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.44, 0.528418)]
		[TestCase(12.7, 15.25206)]
		[TestCase(109.0, 130.904)]
		public void ConvertKnownQuartsToUSQuarts(double input, double expectation)
		{
			var result = Volume.Quarts.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToUSPints(value);
				var convertBack = Volume.USPints.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(18.0, 43.2342)]
		[TestCase(2.5, 6.00475)]
		[TestCase(0.4, 0.96076)]
		public void ConvertKnownQuartsToUSPints(double input, double expectation)
		{
			var result = Volume.Quarts.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.8, 1.44114)]
		[TestCase(0.3, 0.0900712)]
		[TestCase(1.5, 0.450356)]
		public void ConvertKnownQuartsToUSGallons(double input, double expectation)
		{
			var result = Volume.Quarts.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 230.582)]
		[TestCase(0.46, 17.67798)]
		[TestCase(2.0, 76.8608)]
		public void ConvertKnownQuartsToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.Quarts.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToUSCups(value);
				var convertBack = Volume.USCups.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.0, 9.6076)]
		[TestCase(800.9, 3847.3632)]
		[TestCase(0.23, 1.104874)]
		public void ConvertKnownQuartsToUSCups(double input, double expectation)
		{
			var result = Volume.Quarts.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(7918.89, 9.0)]
		[TestCase(1200.0, 1.363827)]
		[TestCase(8000.0, 9.09218)]
		public void ConvertKnownQuartsToCubicMetres(double input, double expectation)
		{
			var result = Volume.Quarts.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(20.0, 0.802718)]
		[TestCase(800.0, 32.1087)]
		[TestCase(67.0, 2.68911)]
		public void ConvertKnownQuartsToCubicFeet(double input, double expectation)
		{
			var result = Volume.Quarts.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(777.0, 53888.75729)]
		[TestCase(8.16093, 566.0)]
		[TestCase(76.0, 5270.97)]
		public void ConvertKnownQuartsToCubicInches(double input, double expectation)
		{
			var result = Volume.Quarts.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromQuartsToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Quarts.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(839.336, 6.0)]
		[TestCase(41.9668, 0.3)]
		[TestCase(22.0, 0.157267)]
		public void ConvertKnownQuartsToOilBarrels(double input, double expectation)
		{
			var result = Volume.Quarts.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class TablespoonsTests
	{
		[Property]
		public void FromTablespoonsToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.7, 47.9471)]
		[TestCase(0.65, 11.54281)]
		[TestCase(80.1, 1422.43)]
		public void ConvertKnownTablespoonsToMillilitres(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToLitres(value);
				var convertBack = Volume.Litres.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(55.0, 0.976699)]
		[TestCase(190.0, 3.37405)]
		[TestCase(4000.0, 71.0397889)]
		public void ConvertKnownTablespoonsToLitres(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(10000.0, 0.1775817)]
		[TestCase(98765.0, 1.7538858)]
		[TestCase(666999.0, 11.8446826)]
		public void ConvertKnownTablespoonsToKilolitres(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 36.0)]
		[TestCase(0.24, 0.72)]
		[TestCase(19.9, 59.7)]
		public void ConvertKnownTablespoonsToTeaspoons(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToQuarts(value);
				var convertBack = Volume.Quarts.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(190.0, 2.96875)]
		[TestCase(9.0, 0.140625)]
		[TestCase(3.7, 0.0578125)]
		public void ConvertKnownTablespoonsToQuarts(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToPints(value);
				var convertBack = Volume.Pints.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.7, 0.146875)]
		[TestCase(190.0, 5.9375)]
		[TestCase(1090.9, 34.0906391)]
		public void ConvertKnownTablespoonsToPints(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToGallons(value);
				var convertBack = Volume.Gallons.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8000.0, 31.25001)]
		[TestCase(54.0, 0.210938)]
		[TestCase(99.3, 0.3878908)]
		public void ConvertKnownTablespoonsToGallons(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(80.8, 50.50002)]
		[TestCase(9009.0, 5630.627)]
		[TestCase(12.6, 7.875003)]
		public void ConvertKnownTablespoonsToFluidOunces(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 43.2342)]
		[TestCase(0.6, 2.16171)]
		[TestCase(52.9, 190.5909)]
		public void ConvertKnownTablespoonsToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(67.0, 80.4637)]
		[TestCase(5.8, 6.96551)]
		[TestCase(0.23, 0.2762186)]
		public void ConvertKnownTablespoonsToUSTablespoons(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(54.0, 1.0133)]
		[TestCase(1005.9, 18.875563)]
		[TestCase(0.9, 0.0168884)]
		public void ConvertKnownTablespoonsToUSQuarts(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToUSPints(value);
				var convertBack = Volume.USPints.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(34.0, 1.27601)]
		[TestCase(109.3, 4.1019963)]
		[TestCase(190.0, 7.13064)]
		public void ConvertKnownTablespoonsToUSPints(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 4.22209)]
		[TestCase(2.8, 0.0131354)]
		[TestCase(1469.0, 6.891391)]
		public void ConvertKnownTablespoonsToUSGallons(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1009.0, 605.8795)]
		[TestCase(8.2, 4.9239)]
		[TestCase(190.5, 114.39053)]
		public void ConvertKnownTablespoonsToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToUSCups(value);
				var convertBack = Volume.USCups.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.0, 8.18147)]
		[TestCase(3.4, 0.255202)]
		[TestCase(1000.0, 75.0594)]
		public void ConvertKnownTablespoonsToUSCups(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(10000.0, 0.1775817)]
		[TestCase(3378.726, 0.059999995422)]
		[TestCase(800009.0, 14.2066969)]
		public void ConvertKnownTablespoonsToCubicMetres(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(780.0, 0.489157)]
		[TestCase(6378.32, 4.0)]
		[TestCase(8451.28, 5.3)]
		public void ConvertKnownTablespoonsToCubicFeet(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(66.0, 71.5222)]
		[TestCase(123.0, 133.291)]
		[TestCase(56.0, 60.6855)]
		public void ConvertKnownTablespoonsToCubicInches(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTablespoonsToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Tablespoons.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(44764.5, 5.0)]
		[TestCase(12222.0, 1.3651429)]
		[TestCase(800.0, 0.0893564)]
		public void ConvertKnownTablespoonsToOilBarrels(double input, double expectation)
		{
			var result = Volume.Tablespoons.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class TeaspoonsTests
	{
		[Property]
		public void FromTeaspoonsToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.6, 3.55163)]
		[TestCase(1.3, 7.69521)]
		[TestCase(0.07, 0.4143573)]
		public void ConvertKnownTeaspoonsToMillilitres(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToLitres(value);
				var convertBack = Volume.Litres.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(32.0, 0.18942)]
		[TestCase(180.0, 1.06549)]
		[TestCase(4567.0, 27.03386)]
		public void ConvertKnownTeaspoonsToLitres(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(236511.0, 1.4)]
		[TestCase(33787.3, 0.2)]
		[TestCase(1689.363, 0.01)]
		public void ConvertKnownTeaspoonsToKilolitres(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 4.0)]
		[TestCase(900.8, 300.26667)]
		[TestCase(1.23, 0.41)]
		public void ConvertKnownTeaspoonsToTablespoons(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToQuarts(value);
				var convertBack = Volume.Quarts.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.0, 0.567709)]
		[TestCase(4500.0, 23.43751)]
		[TestCase(89.0, 0.463542)]
		public void ConvertKnownTeaspoonsToQuarts(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToPints(value);
				var convertBack = Volume.Pints.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(678.0, 7.0625)]
		[TestCase(109.0, 1.13542)]
		[TestCase(12.5, 0.1302084)]
		public void ConvertKnownTeaspoonsToPints(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToGallons(value);
				var convertBack = Volume.Gallons.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(190.0, 0.247396)]
		[TestCase(8090.0, 10.53386)]
		[TestCase(238.9, 0.31106784)]
		public void ConvertKnownTeaspoonsToGallons(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.0, 22.7083)]
		[TestCase(55.7, 11.60417)]
		[TestCase(609.0, 126.875)]
		public void ConvertKnownTeaspoonsToFluidOunces(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(90.0, 108.086)]
		[TestCase(1.45, 1.741379)]
		[TestCase(80.1, 96.19616)]
		public void ConvertKnownTeaspoonsToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(56.0, 22.4177)]
		[TestCase(7.0, 2.80222)]
		[TestCase(109.0, 43.6345)]
		public void ConvertKnownTeaspoonsToUSTablespoons(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(199.0, 1.24474)]
		[TestCase(5.9, 0.0369042)]
		[TestCase(23.0, 0.143864)]
		public void ConvertKnownTeaspoonsToUSQuarts(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToUSPints(value);
				var convertBack = Volume.USPints.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(106.0, 1.32605)]
		[TestCase(34.0, 0.425337)]
		[TestCase(6.21, 0.07768648)]
		public void ConvertKnownTeaspoonsToUSPints(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 1.40736)]
		[TestCase(1234.6, 1.93059035)]
		[TestCase(88.0, 0.137609)]
		public void ConvertKnownTeaspoonsToUSGallons(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(56.0, 11.2089)]
		[TestCase(2.9, 0.580459)]
		[TestCase(1020.0, 204.1616)]
		public void ConvertKnownTeaspoonsToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToUSCups(value);
				var convertBack = Volume.USCups.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8000.0, 200.1584)]
		[TestCase(34.0, 0.850673)]
		[TestCase(109.9, 2.7496761)]
		public void ConvertKnownTeaspoonsToUSCups(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(152043.0, 0.9)]
		[TestCase(3378.726, 0.02)]
		[TestCase(8000.0, 0.04735512)]
		public void ConvertKnownTeaspoonsToCubicMetres(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(600.0, 0.125425)]
		[TestCase(1234.0, 0.257957)]
		[TestCase(880.0, 0.183956)]
		public void ConvertKnownTeaspoonsToCubicFeet(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8.0, 2.88979)]
		[TestCase(12.0, 4.33468)]
		[TestCase(666.0, 240.575)]
		public void ConvertKnownTeaspoonsToCubicInches(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeaspoonsToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.Teaspoons.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(10743.5, 0.4)]
		[TestCase(107435.0, 4.0)]
		[TestCase(134294.0, 5.0)]
		public void ConvertKnownTeaspoonsToOilBarrels(double input, double expectation)
		{
			var result = Volume.Teaspoons.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class USCupsTests
	{
		[Property]
		public void FromUSCupsToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(11.0, 2602.47)]
		[TestCase(109.0, 25788.1177)]
		[TestCase(4.5, 1064.65)]
		public void ConvertKnownUSCupsToMillilitres(double input, double expectation)
		{
			var result = Volume.USCups.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToLitres(value);
				var convertBack = Volume.Litres.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(56.0, 13.2489)]
		[TestCase(4.1, 0.970012)]
		[TestCase(399.0, 94.3987)]
		public void ConvertKnownUSCupsToLitres(double input, double expectation)
		{
			var result = Volume.USCups.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(67.0, 0.0158514)]
		[TestCase(1009.7, 0.238883142)]
		[TestCase(918273.0, 217.25259)]
		public void ConvertKnownUSCupsToKilolitres(double input, double expectation)
		{
			var result = Volume.USCups.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.0, 159.873)]
		[TestCase(0.2, 7.99367)]
		[TestCase(6.12, 244.6063)]
		public void ConvertKnownUSCupsToTeaspoons(double input, double expectation)
		{
			var result = Volume.USCups.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.3, 57.288)]
		[TestCase(120.6, 1606.7274)]
		[TestCase(0.66, 8.793036)]
		public void ConvertKnownUSCupsToTablespoons(double input, double expectation)
		{
			var result = Volume.USCups.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToQuarts(value);
				var convertBack = Volume.Quarts.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1009.0, 210.0421)]
		[TestCase(66.98, 13.943129)]
		[TestCase(0.123, 0.025604731)]
		public void ConvertKnownUSCupsToQuarts(double input, double expectation)
		{
			var result = Volume.USCups.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToPints(value);
				var convertBack = Volume.Pints.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 2.08169)]
		[TestCase(0.43, 0.1790249)]
		[TestCase(800.4, 333.23621)]
		public void ConvertKnownUSCupsToPints(double input, double expectation)
		{
			var result = Volume.USCups.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToGallons(value);
				var convertBack = Volume.Gallons.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(56.0, 2.91436)]
		[TestCase(104.12, 5.41862726)]
		[TestCase(6.1, 0.317457)]
		public void ConvertKnownUSCupsToGallons(double input, double expectation)
		{
			var result = Volume.USCups.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(55.0, 457.971)]
		[TestCase(0.4, 3.3307)]
		[TestCase(88.4, 736.084)]
		public void ConvertKnownUSCupsToFluidOunces(double input, double expectation)
		{
			var result = Volume.USCups.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 576.0)]
		[TestCase(5.12, 245.7601)]
		[TestCase(6701.0, 321648.0)]
		public void ConvertKnownUSCupsToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.USCups.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(677.0, 10832.0)]
		[TestCase(1.9, 30.4)]
		[TestCase(800.8, 12812.8)]
		public void ConvertKnownUSCupsToUSTablespoons(double input, double expectation)
		{
			var result = Volume.USCups.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(800.8, 200.2)]
		[TestCase(4.84, 1.21)]
		[TestCase(0.99, 0.2475)]
		public void ConvertKnownUSCupsToUSQuarts(double input, double expectation)
		{
			var result = Volume.USCups.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToUSPints(value);
				var convertBack = Volume.USPints.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.99, 0.495)]
		[TestCase(358.9, 179.45)]
		[TestCase(1000.0, 500.0)]
		public void ConvertKnownUSCupsToUSPints(double input, double expectation)
		{
			var result = Volume.USCups.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1000.0, 62.5)]
		[TestCase(0.78, 0.04875)]
		[TestCase(123.123, 7.6951875)]
		public void ConvertKnownUSCupsToUSGallons(double input, double expectation)
		{
			var result = Volume.USCups.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123.123, 984.984)]
		[TestCase(4.0, 32.0)]
		[TestCase(0.9, 7.2)]
		public void ConvertKnownUSCupsToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.USCups.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4555.0, 1.0932)]
		[TestCase(100900.0, 24.216)]
		[TestCase(7800.0, 1.872)]
		public void ConvertKnownUSCupsToCubicMetres(double input, double expectation)
		{
			var result = Volume.USCups.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(88.0, 0.745846)]
		[TestCase(471.947, 4.0)]
		[TestCase(123.0, 1.04249)]
		public void ConvertKnownUSCupsToCubicFeet(double input, double expectation)
		{
			var result = Volume.USCups.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 87.8742)]
		[TestCase(2.3, 33.6851)]
		[TestCase(0.9, 13.1811)]
		public void ConvertKnownUSCupsToCubicInches(double input, double expectation)
		{
			var result = Volume.USCups.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSCupsToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USCups.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToUSCups(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(43721.5, 66.0)]
		[TestCase(1111.0, 1.677115)]
		[TestCase(3312.24, 5.0)]
		public void ConvertKnownUSCupsToOilBarrels(double input, double expectation)
		{
			var result = Volume.USCups.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class USFluidOuncesTests
	{
		[Property]
		public void FromUSFluidOuncesToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.98, 28.98206)]
		[TestCase(8.2, 242.503)]
		[TestCase(100.3, 2966.225)]
		public void ConvertKnownUSFluidOuncesToMillilitres(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToLitres(value);
				var convertBack = Volume.Litres.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 0.354882)]
		[TestCase(150.6, 4.4537736)]
		[TestCase(5.9, 0.174484)]
		public void ConvertKnownUSFluidOuncesToLitres(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(34.0, 0.0010055)]
		[TestCase(109.1, 0.0032264721)]
		[TestCase(45678.0, 1.3508597)]
		public void ConvertKnownUSFluidOuncesToKilolitres(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.0, 19.9842)]
		[TestCase(0.12, 0.5995252)]
		[TestCase(2.99, 14.93817)]
		public void ConvertKnownUSFluidOuncesToTeaspoons(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(800.0, 1332.28)]
		[TestCase(0.02, 0.03330695)]
		[TestCase(2.7, 4.49644)]
		public void ConvertKnownUSFluidOuncesToTablespoons(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToQuarts(value);
				var convertBack = Volume.Quarts.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.5, 0.0910737)]
		[TestCase(0.76, 0.01977601)]
		[TestCase(2.0, 0.0520421)]
		public void ConvertKnownUSFluidOuncesToQuarts(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToPints(value);
				var convertBack = Volume.Pints.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 0.624506)]
		[TestCase(0.4, 0.0208169)]
		[TestCase(1.99, 0.1035639)]
		public void ConvertKnownUSFluidOuncesToPints(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToGallons(value);
				var convertBack = Volume.Gallons.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.0, 0.0195158)]
		[TestCase(100.5, 0.65377934)]
		[TestCase(0.9, 0.00585474)]
		public void ConvertKnownUSFluidOuncesToGallons(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.6, 0.624506)]
		[TestCase(123.0, 128.024)]
		[TestCase(8009.0, 8336.109)]
		public void ConvertKnownUSFluidOuncesToFluidOunces(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(45.0, 270.0)]
		[TestCase(1.5, 9.0)]
		[TestCase(400.8, 2404.8008)]
		public void ConvertKnownUSFluidOuncesToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.0, 8.0)]
		[TestCase(170.2, 340.4)]
		[TestCase(8811.0, 17622.0)]
		public void ConvertKnownUSFluidOuncesToUSTablespoons(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8811.0, 275.3438)]
		[TestCase(4.2, 0.13125)]
		[TestCase(109.0, 3.40625)]
		public void ConvertKnownUSFluidOuncesToUSQuarts(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToUSPints(value);
				var convertBack = Volume.USPints.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.0, 6.8125)]
		[TestCase(77.09, 4.818125)]
		[TestCase(180.4, 11.275)]
		public void ConvertKnownUSFluidOuncesToUSPints(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(45.0, 0.351563)]
		[TestCase(1.8, 0.0140625)]
		[TestCase(778.9, 6.0851562)]
		public void ConvertKnownUSFluidOuncesToUSGallons(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToUSCups(value);
				var convertBack = Volume.USCups.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(45.0, 5.625)]
		[TestCase(66.9, 8.3625)]
		[TestCase(0.29, 0.03625)]
		public void ConvertKnownUSFluidOuncesToUSCups(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(800900.0, 23.6854398)]
		[TestCase(789.0, 0.0233335)]
		[TestCase(100100.0, 2.96031031)]
		public void ConvertKnownUSFluidOuncesToCubicMetres(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(344.0, 0.359266)]
		[TestCase(8009.0, 8.364434)]
		[TestCase(3830.03, 4.0)]
		public void ConvertKnownUSFluidOuncesToCubicFeet(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(66.0, 119.109)]
		[TestCase(900.0, 1624.22)]
		[TestCase(8.0, 14.4375)]
		public void ConvertKnownUSFluidOuncesToCubicInches(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSFluidOuncesToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USFluidOunces.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToUSFluidOunces(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(32256.0, 6.0)]
		[TestCase(1899.0, 0.3532366)]
		[TestCase(6988.8, 1.3)]
		public void ConvertKnownUSFluidOuncesToOilBarrels(double input, double expectation)
		{
			var result = Volume.USFluidOunces.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class USGallonsTests
	{
		[Property]
		public void FromUSGallonsToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.0, 7570.82)]
		[TestCase(0.1, 378.541)]
		[TestCase(56.0, 211983.0599039)]
		public void ConvertKnownUSGallonsToMillilitres(double input, double expectation)
		{
			var result = Volume.USGallons.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToLitres(value);
				var convertBack = Volume.Litres.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(56.0, 211.983)]
		[TestCase(5.1, 19.3056)]
		[TestCase(2.5, 9.46353)]
		public void ConvertKnownUSGallonsToLitres(double input, double expectation)
		{
			var result = Volume.USGallons.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(111.0, 0.420181)]
		[TestCase(9090.0, 34.40939)]
		[TestCase(12345.0, 46.730908)]
		public void ConvertKnownUSGallonsToKilolitres(double input, double expectation)
		{
			var result = Volume.USGallons.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 3197.47)]
		[TestCase(0.4, 255.797)]
		[TestCase(8000.0, 5115948.07582550)]
		public void ConvertKnownUSGallonsToTeaspoons(double input, double expectation)
		{
			var result = Volume.USGallons.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(79.0, 16840.0)]
		[TestCase(12.67, 2700.7943)]
		[TestCase(55.1, 11745.36)]
		public void ConvertKnownUSGallonsToTablespoons(double input, double expectation)
		{
			var result = Volume.USGallons.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToQuarts(value);
				var convertBack = Volume.Quarts.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(54.0, 179.858)]
		[TestCase(2.9, 9.65902)]
		[TestCase(0.2, 0.666139)]
		public void ConvertKnownUSGallonsToQuarts(double input, double expectation)
		{
			var result = Volume.USGallons.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToPints(value);
				var convertBack = Volume.Pints.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.0, 13.3228)]
		[TestCase(0.12, 0.7993672)]
		[TestCase(500.0, 3330.7)]
		public void ConvertKnownUSGallonsToPints(double input, double expectation)
		{
			var result = Volume.USGallons.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToGallons(value);
				var convertBack = Volume.Gallons.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(23.0, 19.1515)]
		[TestCase(8.2, 6.82793)]
		[TestCase(1.09, 0.9076149)]
		public void ConvertKnownUSGallonsToGallons(double input, double expectation)
		{
			var result = Volume.USGallons.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.09, 145.2184)]
		[TestCase(34.0, 4529.75)]
		[TestCase(666.0, 88729.724440098)]
		public void ConvertKnownUSGallonsToFluidOunces(double input, double expectation)
		{
			var result = Volume.USGallons.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.0, 3072.0)]
		[TestCase(1.28, 983.0403)]
		[TestCase(6.99, 5368.322)]
		public void ConvertKnownUSGallonsToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.USGallons.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(34.0, 8704.0)]
		[TestCase(8.4, 2150.4)]
		[TestCase(0.091, 23.296)]
		public void ConvertKnownUSGallonsToUSTablespoons(double input, double expectation)
		{
			var result = Volume.USGallons.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.091, 0.364)]
		[TestCase(23.0, 92.0)]
		[TestCase(1000.8, 4003.2)]
		public void ConvertKnownUSGallonsToUSQuarts(double input, double expectation)
		{
			var result = Volume.USGallons.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToUSPints(value);
				var convertBack = Volume.USPints.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1000.8, 8006.4)]
		[TestCase(23.6, 188.8)]
		[TestCase(0.71, 5.68)]
		public void ConvertKnownUSGallonsToUSPints(double input, double expectation)
		{
			var result = Volume.USGallons.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.71, 90.88)]
		[TestCase(83.2, 10649.6)]
		[TestCase(777.0, 99456.0)]
		public void ConvertKnownUSGallonsToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.USGallons.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToUSCups(value);
				var convertBack = Volume.USCups.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(777.0, 12432.0)]
		[TestCase(5.71, 91.36)]
		[TestCase(0.98, 15.68)]
		public void ConvertKnownUSGallonsToUSCups(double input, double expectation)
		{
			var result = Volume.USGallons.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1849.2, 7.0)]
		[TestCase(87.0, 0.329331)]
		[TestCase(123456.0, 467.331797)]
		public void ConvertKnownUSGallonsToCubicMetres(double input, double expectation)
		{
			var result = Volume.USGallons.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 0.802083)]
		[TestCase(24.0, 3.20833)]
		[TestCase(5.0, 0.668403)]
		public void ConvertKnownUSGallonsToCubicFeet(double input, double expectation)
		{
			var result = Volume.USGallons.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 1386.0)]
		[TestCase(190.0, 43890.0)]
		[TestCase(55.0, 12705.0)]
		public void ConvertKnownUSGallonsToCubicInches(double input, double expectation)
		{
			var result = Volume.USGallons.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSGallonsToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USGallons.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToUSGallons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(966.0, 23.0)]
		[TestCase(1234.0, 29.38095)]
		[TestCase(16.8, 0.4)]
		public void ConvertKnownUSGallonsToOilBarrels(double input, double expectation)
		{
			var result = Volume.USGallons.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class USPintsTests
	{
		[Property]
		public void FromUSPintsToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.66, 312.2965)]
		[TestCase(9.1, 4305.91)]
		[TestCase(0.8, 378.541)]
		public void ConvertKnownUSPintsToMillilitres(double input, double expectation)
		{
			var result = Volume.USPints.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToLitres(value);
				var convertBack = Volume.Litres.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.5, 0.709765)]
		[TestCase(0.6, 0.283906)]
		[TestCase(1367.0, 646.8322)]
		public void ConvertKnownUSPintsToLitres(double input, double expectation)
		{
			var result = Volume.USPints.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1900.0, 0.8990353)]
		[TestCase(8888.0, 4.205592)]
		[TestCase(123456.0, 58.4164747)]
		public void ConvertKnownUSPintsToKilolitres(double input, double expectation)
		{
			var result = Volume.USPints.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 479.62)]
		[TestCase(0.08, 6.394935)]
		[TestCase(3.1, 247.804)]
		public void ConvertKnownUSPintsToTeaspoons(double input, double expectation)
		{
			var result = Volume.USPints.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.0, 53.2911)]
		[TestCase(0.09, 2.398101)]
		[TestCase(1678.0, 44711.25)]
		public void ConvertKnownUSPintsToTablespoons(double input, double expectation)
		{
			var result = Volume.USPints.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToQuarts(value);
				var convertBack = Volume.Quarts.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 4.99605)]
		[TestCase(503.8, 209.75063)]
		[TestCase(0.65, 0.2706191)]
		public void ConvertKnownUSPintsToQuarts(double input, double expectation)
		{
			var result = Volume.USPints.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToPints(value);
				var convertBack = Volume.Pints.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 0.749407)]
		[TestCase(102.0, 84.9328)]
		[TestCase(8000.7, 6661.97635)]
		public void ConvertKnownUSPintsToPints(double input, double expectation)
		{
			var result = Volume.USPints.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToGallons(value);
				var convertBack = Volume.Gallons.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(80.0, 8.32674)]
		[TestCase(6.2, 0.645322)]
		[TestCase(0.7, 0.072859)]
		public void ConvertKnownUSPintsToGallons(double input, double expectation)
		{
			var result = Volume.USPints.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 199.842)]
		[TestCase(9.7, 161.539)]
		[TestCase(124.0, 2065.03)]
		public void ConvertKnownUSPintsToFluidOunces(double input, double expectation)
		{
			var result = Volume.USPints.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.0, 384.0)]
		[TestCase(2.5, 240.0)]
		[TestCase(8001.9, 768182.4)]
		public void ConvertKnownUSPintsToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.USPints.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(80.0, 2560.0)]
		[TestCase(12.7, 406.4)]
		[TestCase(0.6, 19.2)]
		public void ConvertKnownUSPintsToUSTablespoons(double input, double expectation)
		{
			var result = Volume.USPints.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.6, 0.3)]
		[TestCase(10090.0, 5045.0)]
		[TestCase(4.56, 2.28)]
		public void ConvertKnownUSPintsToUSQuarts(double input, double expectation)
		{
			var result = Volume.USPints.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.56, 0.57)]
		[TestCase(9000.0, 1125.0)]
		[TestCase(47.2, 5.9)]
		public void ConvertKnownUSPintsToUSGallons(double input, double expectation)
		{
			var result = Volume.USPints.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(47.2, 755.2)]
		[TestCase(1001.0, 16016.0)]
		[TestCase(23.9, 382.4)]
		public void ConvertKnownUSPintsToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.USPints.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToUSCups(value);
				var convertBack = Volume.USCups.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(23.9, 47.8)]
		[TestCase(1009.0, 2018.0)]
		[TestCase(45.9, 91.8)]
		public void ConvertKnownUSPintsToUSCups(double input, double expectation)
		{
			var result = Volume.USPints.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(14793.6, 7.0)]
		[TestCase(700.0, 0.331224)]
		[TestCase(123456.0, 58.4164747)]
		public void ConvertKnownUSPintsToCubicMetres(double input, double expectation)
		{
			var result = Volume.USPints.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(66.0, 1.10286)]
		[TestCase(2692.99, 45.0)]
		[TestCase(123.0, 2.05534)]
		public void ConvertKnownUSPintsToCubicFeet(double input, double expectation)
		{
			var result = Volume.USPints.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(66.0, 1905.75)]
		[TestCase(900.0, 25987.5)]
		[TestCase(6.7, 193.463)]
		public void ConvertKnownUSPintsToCubicInches(double input, double expectation)
		{
			var result = Volume.USPints.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSPintsToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USPints.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToUSPints(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(223776.0, 666.0)]
		[TestCase(1234.0, 3.672619)]
		[TestCase(302.4, 0.9)]
		public void ConvertKnownUSPintsToOilBarrels(double input, double expectation)
		{
			var result = Volume.USPints.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class USQuartsTests
	{
		[Property]
		public void FromUSQuartsToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9000.0, 8517176.51400)]
		[TestCase(5.0, 4731.76)]
		[TestCase(0.7, 662.447)]
		public void ConvertKnownUSQuartsToMillilitres(double input, double expectation)
		{
			var result = Volume.USQuarts.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToLitres(value);
				var convertBack = Volume.Litres.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9.0, 8.51718)]
		[TestCase(1024.0, 969.0654)]
		[TestCase(0.8, 0.757082)]
		public void ConvertKnownUSQuartsToLitres(double input, double expectation)
		{
			var result = Volume.USQuarts.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1000.0, 0.946353)]
		[TestCase(6789.0, 6.42479)]
		[TestCase(45.0, 0.0425859)]
		public void ConvertKnownUSQuartsToKilolitres(double input, double expectation)
		{
			var result = Volume.USQuarts.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(45.0, 7194.3)]
		[TestCase(6.5, 1039.18)]
		[TestCase(0.9, 143.886)]
		public void ConvertKnownUSQuartsToTeaspoons(double input, double expectation)
		{
			var result = Volume.USQuarts.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 319.747)]
		[TestCase(89.4, 4764.227)]
		[TestCase(4.67, 248.8696)]
		public void ConvertKnownUSQuartsToTablespoons(double input, double expectation)
		{
			var result = Volume.USQuarts.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToQuarts(value);
				var convertBack = Volume.Quarts.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.6, 3.8303)]
		[TestCase(0.9, 0.749407)]
		[TestCase(134.0, 111.578)]
		public void ConvertKnownUSQuartsToQuarts(double input, double expectation)
		{
			var result = Volume.USQuarts.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToPints(value);
				var convertBack = Volume.Pints.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123.0, 204.838)]
		[TestCase(1090.9, 1816.72854)]
		[TestCase(56.0, 93.2595)]
		public void ConvertKnownUSQuartsToPints(double input, double expectation)
		{
			var result = Volume.USQuarts.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToGallons(value);
				var convertBack = Volume.Gallons.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(56.0, 11.6574)]
		[TestCase(7.12, 1.48216)]
		[TestCase(800.0, 166.535)]
		public void ConvertKnownUSQuartsToGallons(double input, double expectation)
		{
			var result = Volume.USQuarts.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(800.0, 26645.56289492)]
		[TestCase(6.8, 226.487)]
		[TestCase(0.9, 29.9763)]
		public void ConvertKnownUSQuartsToFluidOunces(double input, double expectation)
		{
			var result = Volume.USQuarts.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.0, 576.0)]
		[TestCase(0.12, 23.04001)]
		[TestCase(4.5, 864.0)]
		public void ConvertKnownUSQuartsToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.USQuarts.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.5, 288.0)]
		[TestCase(0.777, 49.728)]
		[TestCase(1.8, 115.2)]
		public void ConvertKnownUSQuartsToUSTablespoons(double input, double expectation)
		{
			var result = Volume.USQuarts.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToUSPints(value);
				var convertBack = Volume.USPints.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.8, 3.6)]
		[TestCase(900.0, 1800.0)]
		[TestCase(12.45, 24.9)]
		public void ConvertKnownUSQuartsToUSPints(double input, double expectation)
		{
			var result = Volume.USQuarts.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.45, 3.1125)]
		[TestCase(0.8, 0.2)]
		[TestCase(100.9, 25.225)]
		public void ConvertKnownUSQuartsToUSGallons(double input, double expectation)
		{
			var result = Volume.USQuarts.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100.9, 3228.8)]
		[TestCase(12345.0, 395040.0)]
		[TestCase(8.7, 278.4)]
		public void ConvertKnownUSQuartsToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.USQuarts.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToUSCups(value);
				var convertBack = Volume.USCups.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8.7, 34.8)]
		[TestCase(123.9, 495.6)]
		[TestCase(0.66, 2.64)]
		public void ConvertKnownUSQuartsToUSCups(double input, double expectation)
		{
			var result = Volume.USQuarts.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8453.51, 8.0)]
		[TestCase(5000.0, 4.731765)]
		[TestCase(123456.0, 116.832949)]
		public void ConvertKnownUSQuartsToCubicMetres(double input, double expectation)
		{
			var result = Volume.USQuarts.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(44.0, 1.47049)]
		[TestCase(2663.06, 89.0)]
		[TestCase(444.0, 14.8385)]
		public void ConvertKnownUSQuartsToCubicFeet(double input, double expectation)
		{
			var result = Volume.USQuarts.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(44.0, 2541.0)]
		[TestCase(800.0, 46200.0)]
		[TestCase(6.0, 346.5)]
		public void ConvertKnownUSQuartsToCubicInches(double input, double expectation)
		{
			var result = Volume.USQuarts.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSQuartsToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USQuarts.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToUSQuarts(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9240.0, 55.0)]
		[TestCase(1344.0, 8.0)]
		[TestCase(207312.0, 1234.0)]
		public void ConvertKnownUSQuartsToOilBarrels(double input, double expectation)
		{
			var result = Volume.USQuarts.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class USTablespoonsTests
	{
		[Property]
		public void FromUSTablespoonsToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 177.441)]
		[TestCase(0.8, 11.8294)]
		[TestCase(4500.0, 66540.44)]
		public void ConvertKnownUSTablespoonsToMillilitres(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToLitres(value);
				var convertBack = Volume.Litres.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(567.0, 8.3841)]
		[TestCase(80.9, 1.196249)]
		[TestCase(10000.0, 147.8676)]
		public void ConvertKnownUSTablespoonsToLitres(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9900.0, 0.146389)]
		[TestCase(123456.0, 1.82551483)]
		[TestCase(18009.0, 0.26629485)]
		public void ConvertKnownUSTablespoonsToKilolitres(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(14.0, 34.9723)]
		[TestCase(0.9, 2.24822)]
		[TestCase(180.0, 449.644)]
		public void ConvertKnownUSTablespoonsToTeaspoons(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.0, 90.7614)]
		[TestCase(89.0, 74.108)]
		[TestCase(5.2, 4.3299)]
		public void ConvertKnownUSTablespoonsToTablespoons(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToQuarts(value);
				var convertBack = Volume.Quarts.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(345.0, 4.48863)]
		[TestCase(89.9, 1.169647)]
		[TestCase(12.88, 0.16757568)]
		public void ConvertKnownUSTablespoonsToQuarts(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToPints(value);
				var convertBack = Volume.Pints.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 0.312253)]
		[TestCase(809.7, 21.069259)]
		[TestCase(0.4, 0.0104084)]
		public void ConvertKnownUSTablespoonsToPints(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToGallons(value);
				var convertBack = Volume.Gallons.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(400.0, 1.30105)]
		[TestCase(1200.9, 3.90608761)]
		[TestCase(8.0, 0.0260211)]
		public void ConvertKnownUSTablespoonsToGallons(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.0, 2.08169)]
		[TestCase(50.9, 26.48945)]
		[TestCase(123.0, 64.0118)]
		public void ConvertKnownUSTablespoonsToFluidOunces(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToUSTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToUSTeaspoons(value);
				var convertBack = Volume.USTeaspoons.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(90.0, 270.0)]
		[TestCase(4.5, 13.5)]
		[TestCase(4608.0, 13824.0)]
		public void ConvertKnownUSTablespoonsToUSTeaspoons(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToUSTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(456.0, 7.125)]
		[TestCase(7.12, 0.11125)]
		[TestCase(194.9, 3.0453125)]
		public void ConvertKnownUSTablespoonsToUSQuarts(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToUSPints(value);
				var convertBack = Volume.USPints.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(194.9, 6.090625)]
		[TestCase(2000.0, 62.5)]
		[TestCase(18.7, 0.584375)]
		public void ConvertKnownUSTablespoonsToUSPints(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(18.7, 0.07304687)]
		[TestCase(1900.0, 7.421875)]
		[TestCase(12345.0, 48.222656)]
		public void ConvertKnownUSTablespoonsToUSGallons(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1234.0, 617.0)]
		[TestCase(89.3, 44.65)]
		[TestCase(90.99, 45.495)]
		public void ConvertKnownUSTablespoonsToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToUSCups(value);
				var convertBack = Volume.USCups.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(90.99, 5.686875)]
		[TestCase(1230.0, 76.875)]
		[TestCase(9000.9, 562.55625)]
		public void ConvertKnownUSTablespoonsToUSCups(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(541024.0, 8.0)]
		[TestCase(10200.0, 0.150825)]
		[TestCase(123456.0, 1.82551483)]
		public void ConvertKnownUSTablespoonsToCubicMetres(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(66.0, 0.0344645)]
		[TestCase(7660.05, 4.0)]
		[TestCase(1234.0, 0.6443821)]
		public void ConvertKnownUSTablespoonsToCubicFeet(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 812.109)]
		[TestCase(10.0, 9.02344)]
		[TestCase(4.0, 3.60938)]
		public void ConvertKnownUSTablespoonsToCubicInches(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTablespoonsToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTablespoons.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToUSTablespoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(591360.0, 55.0)]
		[TestCase(4300.8, 0.4)]
		[TestCase(34406.4, 3.2)]
		public void ConvertKnownUSTablespoonsToOilBarrels(double input, double expectation)
		{
			var result = Volume.USTablespoons.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class USTeaspoonsTests
	{
		[Property]
		public void FromUSTeaspoonsToMillilitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToMillilitres(value);
				var convertBack = Volume.Millilitres.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.9, 34.0095)]
		[TestCase(1.6, 7.88627)]
		[TestCase(800.0, 3943.14)]
		public void ConvertKnownUSTeaspoonsToMillilitres(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToMillilitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToLitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToLitres(value);
				var convertBack = Volume.Litres.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(7.0, 0.0345024)]
		[TestCase(90.0, 0.443603)]
		[TestCase(56.7, 0.2794698)]
		public void ConvertKnownUSTeaspoonsToLitres(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToLitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToKilolitresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToKilolitres(value);
				var convertBack = Volume.Kilolitres.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(10009000.0, 49.33356028)]
		[TestCase(1234567.8, 6.08508592078)]
		[TestCase(9800.0, 0.04830342)]
		public void ConvertKnownUSTeaspoonsToKilolitres(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToKilolitres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToTeaspoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToTeaspoons(value);
				var convertBack = Volume.Teaspoons.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(122.0, 101.586)]
		[TestCase(89.2, 74.27448)]
		[TestCase(900.0, 749.406)]
		public void ConvertKnownUSTeaspoonsToTeaspoons(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToTeaspoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToTablespoons(value);
				var convertBack = Volume.Tablespoons.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(500.0, 138.779)]
		[TestCase(12.34, 3.425064)]
		[TestCase(667.0, 185.131)]
		public void ConvertKnownUSTeaspoonsToTablespoons(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToQuarts(value);
				var convertBack = Volume.Quarts.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(78.0, 0.338274)]
		[TestCase(900.1, 3.9035927)]
		[TestCase(116.9, 0.50697698)]
		public void ConvertKnownUSTeaspoonsToQuarts(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToPints(value);
				var convertBack = Volume.Pints.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(116.0, 1.00615)]
		[TestCase(59.5, 0.5160844)]
		[TestCase(1900.0, 16.48)]
		public void ConvertKnownUSTeaspoonsToPints(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToGallons(value);
				var convertBack = Volume.Gallons.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(199.0, 0.215758)]
		[TestCase(12345.0, 13.384583)]
		[TestCase(90001.0, 97.580059)]
		public void ConvertKnownUSTeaspoonsToGallons(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToFluidOunces(value);
				var convertBack = Volume.FluidOunces.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123.0, 21.3373)]
		[TestCase(89.0, 15.4392)]
		[TestCase(1009.0, 175.035)]
		public void ConvertKnownUSTeaspoonsToFluidOunces(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToUSTablespoonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToUSTablespoons(value);
				var convertBack = Volume.USTablespoons.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(190.0, 63.3333)]
		[TestCase(5.6, 1.86667)]
		[TestCase(0.7, 0.233333)]
		public void ConvertKnownUSTeaspoonsToUSTablespoons(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToUSTablespoons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToUSQuartsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToUSQuarts(value);
				var convertBack = Volume.USQuarts.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100.4, 0.5229165)]
		[TestCase(9000.0, 46.87498)]
		[TestCase(1234.0, 6.427081)]
		public void ConvertKnownUSTeaspoonsToUSQuarts(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToUSQuarts(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToUSPintsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToUSPints(value);
				var convertBack = Volume.USPints.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.0, 1.13542)]
		[TestCase(3400.0, 35.41666)]
		[TestCase(10.7, 0.1114583)]
		public void ConvertKnownUSTeaspoonsToUSPints(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToUSPints(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToUSGallonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToUSGallons(value);
				var convertBack = Volume.USGallons.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.0, 0.141927)]
		[TestCase(9876.0, 12.85937)]
		[TestCase(10900.0, 14.192704)]
		public void ConvertKnownUSTeaspoonsToUSGallons(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToUSGallons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToUSFluidOuncesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToUSFluidOunces(value);
				var convertBack = Volume.USFluidOunces.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(180.0, 30.0)]
		[TestCase(5.6, 0.933333)]
		[TestCase(900.5, 150.08328)]
		public void ConvertKnownUSTeaspoonsToUSFluidOunces(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToUSFluidOunces(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToUSCupsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToUSCups(value);
				var convertBack = Volume.USCups.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(90.0, 1.875)]
		[TestCase(4500.8, 93.7666363)]
		[TestCase(0.9, 0.01875)]
		public void ConvertKnownUSTeaspoonsToUSCups(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToUSCups(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToCubicMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToCubicMetres(value);
				var convertBack = Volume.CubicMetres.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(405768.0, 2.0)]
		[TestCase(80808.0, 0.39829617)]
		[TestCase(123456.0, 0.608504748)]
		public void ConvertKnownUSTeaspoonsToCubicMetres(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToCubicMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToCubicFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToCubicFeet(value);
				var convertBack = Volume.CubicFeet.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2000.0, 0.3481263)]
		[TestCase(6894.05, 1.2)]
		[TestCase(12345.0, 2.1488098)]
		public void ConvertKnownUSTeaspoonsToCubicFeet(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToCubicFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToCubicInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToCubicInches(value);
				var convertBack = Volume.CubicInches.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(23.2727, 7.0)]
		[TestCase(219.429, 66.0)]
		[TestCase(39.8961, 12.0)]
		public void ConvertKnownUSTeaspoonsToCubicInches(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToCubicInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromUSTeaspoonsToOilBarrelsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Volume.USTeaspoons.ToOilBarrels(value);
				var convertBack = Volume.OilBarrels.ToUSTeaspoons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(103219.0, 3.2)]
		[TestCase(6666.0, 0.2066592)]
		[TestCase(64512.0, 2.0)]
		public void ConvertKnownUSTeaspoonsToOilBarrels(double input, double expectation)
		{
			var result = Volume.USTeaspoons.ToOilBarrels(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
}
