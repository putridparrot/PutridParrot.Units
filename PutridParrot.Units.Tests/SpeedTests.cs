/// <summary>
/// Do not change this code, it's generated by the UnitCodeGenerator app.
/// </summary>

using NUnit.Framework;
using FsCheck;
using PropertyAttribute = FsCheck.NUnit.PropertyAttribute;

namespace PutridParrot.Units.Tests;

public class FeetPerSecondTests
{
	[Property]
	public void FromFeetPerSecondToMilesPerHourAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.FeetPerSecond.ToMilesPerHour(value);
			var convertBack = Speed.MilesPerHour.ToFeetPerSecond(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(14.5, 9.886364)]
	[TestCase(100.0, 68.1818)]
	[TestCase(1.6, 1.09091)]
	public void ConvertKnownFeetPerSecondToMilesPerHour(double input, double expectation)
	{
		var result = Speed.FeetPerSecond.ToMilesPerHour(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFeetPerSecondToKilometresPerHourAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.FeetPerSecond.ToKilometresPerHour(value);
			var convertBack = Speed.KilometresPerHour.ToFeetPerSecond(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.5, 1.64592)]
	[TestCase(67.9, 74.50531)]
	[TestCase(109.0, 119.604)]
	public void ConvertKnownFeetPerSecondToKilometresPerHour(double input, double expectation)
	{
		var result = Speed.FeetPerSecond.ToKilometresPerHour(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFeetPerSecondToMetresPerSecondAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.FeetPerSecond.ToMetresPerSecond(value);
			var convertBack = Speed.MetresPerSecond.ToFeetPerSecond(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(10.8, 3.29184)]
	[TestCase(66.0, 20.1168)]
	[TestCase(2.3, 0.70104)]
	public void ConvertKnownFeetPerSecondToMetresPerSecond(double input, double expectation)
	{
		var result = Speed.FeetPerSecond.ToMetresPerSecond(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFeetPerSecondToKnotsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.FeetPerSecond.ToKnots(value);
			var convertBack = Speed.Knots.ToFeetPerSecond(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(2.3, 1.36271)]
	[TestCase(666.0, 394.594)]
	[TestCase(17.1, 10.13147)]
	public void ConvertKnownFeetPerSecondToKnots(double input, double expectation)
	{
		var result = Speed.FeetPerSecond.ToKnots(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class KilometresPerHourTests
{
	[Property]
	public void FromKilometresPerHourToMilesPerHourAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.KilometresPerHour.ToMilesPerHour(value);
			var convertBack = Speed.MilesPerHour.ToKilometresPerHour(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(67.0, 41.6319)]
	[TestCase(12.0, 7.45645)]
	[TestCase(6.3, 3.91464)]
	public void ConvertKnownKilometresPerHourToMilesPerHour(double input, double expectation)
	{
		var result = Speed.KilometresPerHour.ToMilesPerHour(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilometresPerHourToFeetPerSecondAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.KilometresPerHour.ToFeetPerSecond(value);
			var convertBack = Speed.FeetPerSecond.ToKilometresPerHour(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(5.0, 4.55672)]
	[TestCase(1.5, 1.36702)]
	[TestCase(89.8, 81.83873)]
	public void ConvertKnownKilometresPerHourToFeetPerSecond(double input, double expectation)
	{
		var result = Speed.KilometresPerHour.ToFeetPerSecond(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilometresPerHourToMetresPerSecondAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.KilometresPerHour.ToMetresPerSecond(value);
			var convertBack = Speed.MetresPerSecond.ToKilometresPerHour(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(67.0, 18.6111)]
	[TestCase(5.9, 1.63889)]
	[TestCase(900.0, 250.0)]
	public void ConvertKnownKilometresPerHourToMetresPerSecond(double input, double expectation)
	{
		var result = Speed.KilometresPerHour.ToMetresPerSecond(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilometresPerHourToKnotsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.KilometresPerHour.ToKnots(value);
			var convertBack = Speed.Knots.ToKilometresPerHour(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(900.0, 485.961)]
	[TestCase(3.9, 2.10583)]
	[TestCase(12.0, 6.47948)]
	public void ConvertKnownKilometresPerHourToKnots(double input, double expectation)
	{
		var result = Speed.KilometresPerHour.ToKnots(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class KnotsTests
{
	[Property]
	public void FromKnotsToMilesPerHourAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.Knots.ToMilesPerHour(value);
			var convertBack = Speed.MilesPerHour.ToKnots(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(8.0, 9.20624)]
	[TestCase(1.2, 1.38094)]
	[TestCase(670.0, 771.022)]
	public void ConvertKnownKnotsToMilesPerHour(double input, double expectation)
	{
		var result = Speed.Knots.ToMilesPerHour(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKnotsToKilometresPerHourAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.Knots.ToKilometresPerHour(value);
			var convertBack = Speed.KilometresPerHour.ToKnots(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(678.0, 1255.66)]
	[TestCase(1.8, 3.3336)]
	[TestCase(56.0, 103.712)]
	public void ConvertKnownKnotsToKilometresPerHour(double input, double expectation)
	{
		var result = Speed.Knots.ToKilometresPerHour(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKnotsToFeetPerSecondAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.Knots.ToFeetPerSecond(value);
			var convertBack = Speed.FeetPerSecond.ToKnots(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(56.0, 94.5174)]
	[TestCase(4.7, 7.93271)]
	[TestCase(3.0, 5.06343)]
	public void ConvertKnownKnotsToFeetPerSecond(double input, double expectation)
	{
		var result = Speed.Knots.ToFeetPerSecond(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKnotsToMetresPerSecondAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.Knots.ToMetresPerSecond(value);
			var convertBack = Speed.MetresPerSecond.ToKnots(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(5.0, 2.57222)]
	[TestCase(9.1, 4.68144)]
	[TestCase(190.0, 97.7444)]
	public void ConvertKnownKnotsToMetresPerSecond(double input, double expectation)
	{
		var result = Speed.Knots.ToMetresPerSecond(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class MetresPerSecondTests
{
	[Property]
	public void FromMetresPerSecondToMilesPerHourAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.MetresPerSecond.ToMilesPerHour(value);
			var convertBack = Speed.MilesPerHour.ToMetresPerSecond(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(13.0, 29.0802)]
	[TestCase(6.7, 14.9875)]
	[TestCase(140.0, 313.171)]
	public void ConvertKnownMetresPerSecondToMilesPerHour(double input, double expectation)
	{
		var result = Speed.MetresPerSecond.ToMilesPerHour(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMetresPerSecondToKilometresPerHourAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.MetresPerSecond.ToKilometresPerHour(value);
			var convertBack = Speed.KilometresPerHour.ToMetresPerSecond(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(800.0, 2880.0)]
	[TestCase(7.8, 28.08)]
	[TestCase(9000.0, 32400.0)]
	public void ConvertKnownMetresPerSecondToKilometresPerHour(double input, double expectation)
	{
		var result = Speed.MetresPerSecond.ToKilometresPerHour(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMetresPerSecondToFeetPerSecondAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.MetresPerSecond.ToFeetPerSecond(value);
			var convertBack = Speed.FeetPerSecond.ToMetresPerSecond(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(9000.0, 29527.56)]
	[TestCase(3.4, 11.1549)]
	[TestCase(12.0, 39.3701)]
	public void ConvertKnownMetresPerSecondToFeetPerSecond(double input, double expectation)
	{
		var result = Speed.MetresPerSecond.ToFeetPerSecond(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMetresPerSecondToKnotsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.MetresPerSecond.ToKnots(value);
			var convertBack = Speed.Knots.ToMetresPerSecond(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12.0, 23.3261)]
	[TestCase(6.3, 12.2462)]
	[TestCase(9.0, 17.4946)]
	public void ConvertKnownMetresPerSecondToKnots(double input, double expectation)
	{
		var result = Speed.MetresPerSecond.ToKnots(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class MilesPerHourTests
{
	[Property]
	public void FromMilesPerHourToKilometresPerHourAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.MilesPerHour.ToKilometresPerHour(value);
			var convertBack = Speed.KilometresPerHour.ToMilesPerHour(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(345.0, 555.224)]
	[TestCase(1.6, 2.57495)]
	[TestCase(0.5, 0.804672)]
	public void ConvertKnownMilesPerHourToKilometresPerHour(double input, double expectation)
	{
		var result = Speed.MilesPerHour.ToKilometresPerHour(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMilesPerHourToFeetPerSecondAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.MilesPerHour.ToFeetPerSecond(value);
			var convertBack = Speed.FeetPerSecond.ToMilesPerHour(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.5, 0.733333)]
	[TestCase(123.0, 180.4)]
	[TestCase(4.5, 6.6)]
	public void ConvertKnownMilesPerHourToFeetPerSecond(double input, double expectation)
	{
		var result = Speed.MilesPerHour.ToFeetPerSecond(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMilesPerHourToMetresPerSecondAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.MilesPerHour.ToMetresPerSecond(value);
			var convertBack = Speed.MetresPerSecond.ToMilesPerHour(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.5, 2.01168)]
	[TestCase(100.0, 44.704)]
	[TestCase(40.0, 17.8816)]
	public void ConvertKnownMilesPerHourToMetresPerSecond(double input, double expectation)
	{
		var result = Speed.MilesPerHour.ToMetresPerSecond(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMilesPerHourToKnotsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Speed.MilesPerHour.ToKnots(value);
			var convertBack = Speed.Knots.ToMilesPerHour(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(30.0, 26.0693)]
	[TestCase(4.5, 3.91039)]
	[TestCase(55.0, 47.7937)]
	public void ConvertKnownMilesPerHourToKnots(double input, double expectation)
	{
		var result = Speed.MilesPerHour.ToKnots(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
