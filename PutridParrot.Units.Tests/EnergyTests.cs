/// <summary>
/// Do not change this code, it's generated by the UnitCodeGenerator app.
/// </summary>

using NUnit.Framework;
using FsCheck;
using PropertyAttribute = FsCheck.NUnit.PropertyAttribute;

namespace PutridParrot.Units.Tests;

public class BtuTests
{
	[Property]
	public void FromBtuToKilojoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Btu.ToKilojoules(value);
			var convertBack = Energy.Kilojoules.ToBtu(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(100.0, 105.506)]
	[TestCase(987.65, 1042.03)]
	[TestCase(555666.0, 586258.6917293)]
	public void ConvertKnownBtuToKilojoules(double input, double expectation)
	{
		var result = Energy.Btu.ToKilojoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromBtuToKilocaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Btu.ToKilocalories(value);
			var convertBack = Energy.Kilocalories.ToBtu(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(67.9, 17.12196)]
	[TestCase(109.9, 27.712868)]
	[TestCase(5000.0, 1260.716)]
	public void ConvertKnownBtuToKilocalories(double input, double expectation)
	{
		var result = Energy.Btu.ToKilocalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromBtuToJoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Btu.ToJoules(value);
			var convertBack = Energy.Joules.ToBtu(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(5.0, 5275.3)]
	[TestCase(912.9, 963164.274)]
	[TestCase(109.0, 115001.54)]
	public void ConvertKnownBtuToJoules(double input, double expectation)
	{
		var result = Energy.Btu.ToJoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromBtuToCaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Btu.ToCalories(value);
			var convertBack = Energy.Calories.ToBtu(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(56.0, 14121.184)]
	[TestCase(123.0, 31016.172)]
	[TestCase(0.9, 226.9476)]
	public void ConvertKnownBtuToCalories(double input, double expectation)
	{
		var result = Energy.Btu.ToCalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromBtuToUSThermsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Btu.ToUSTherms(value);
			var convertBack = Energy.USTherms.ToBtu(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12000.0, 0.120028657)]
	[TestCase(9876.5, 0.098788586)]
	[TestCase(666.999, 0.006671583)]
	public void ConvertKnownBtuToUSTherms(double input, double expectation)
	{
		var result = Energy.Btu.ToUSTherms(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromBtuToWattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Btu.ToWattHours(value);
			var convertBack = Energy.WattHours.ToBtu(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(900.0, 263.764)]
	[TestCase(125.7, 36.839034)]
	[TestCase(0.99, 0.2901404)]
	public void ConvertKnownBtuToWattHours(double input, double expectation)
	{
		var result = Energy.Btu.ToWattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromBtuToKilowattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Btu.ToKilowattHours(value);
			var convertBack = Energy.KilowattHours.ToBtu(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(9000.0, 2.63764)]
	[TestCase(12345.0, 3.6179624)]
	[TestCase(8090.8, 2.37117941)]
	public void ConvertKnownBtuToKilowattHours(double input, double expectation)
	{
		var result = Energy.Btu.ToKilowattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromBtuToFootPoundsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Btu.ToFootPounds(value);
			var convertBack = Energy.FootPounds.ToBtu(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(189.0, 147073.9409)]
	[TestCase(0.3, 233.451)]
	[TestCase(2.6, 2023.24)]
	public void ConvertKnownBtuToFootPounds(double input, double expectation)
	{
		var result = Energy.Btu.ToFootPounds(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class CaloriesTests
{
	[Property]
	public void FromCaloriesToKilojoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Calories.ToKilojoules(value);
			var convertBack = Energy.Kilojoules.ToCalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(109.0, 0.456056)]
	[TestCase(12.3, 0.0514632)]
	[TestCase(9876.0, 41.32118)]
	public void ConvertKnownCaloriesToKilojoules(double input, double expectation)
	{
		var result = Energy.Calories.ToKilojoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromCaloriesToKilocaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Calories.ToKilocalories(value);
			var convertBack = Energy.Kilocalories.ToCalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(900.0, 0.9)]
	[TestCase(1782.0, 1.782)]
	[TestCase(900800.0, 900.8)]
	public void ConvertKnownCaloriesToKilocalories(double input, double expectation)
	{
		var result = Energy.Calories.ToKilocalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromCaloriesToJoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Calories.ToJoules(value);
			var convertBack = Energy.Joules.ToCalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(98.0, 410.032)]
	[TestCase(1.67, 6.98728)]
	[TestCase(55.0, 230.12)]
	public void ConvertKnownCaloriesToJoules(double input, double expectation)
	{
		var result = Energy.Calories.ToJoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromCaloriesToBtuAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Calories.ToBtu(value);
			var convertBack = Energy.Btu.ToCalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(550.0, 2.18112)]
	[TestCase(1234.0, 4.893633)]
	[TestCase(900.9, 3.5726692)]
	public void ConvertKnownCaloriesToBtu(double input, double expectation)
	{
		var result = Energy.Calories.ToBtu(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromCaloriesToUSThermsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Calories.ToUSTherms(value);
			var convertBack = Energy.USTherms.ToCalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(9000000.0, 0.356995242)]
	[TestCase(12e6, 0.475993657)]
	[TestCase(100200300.0, 3.974558932)]
	public void ConvertKnownCaloriesToUSTherms(double input, double expectation)
	{
		var result = Energy.Calories.ToUSTherms(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromCaloriesToWattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Calories.ToWattHours(value);
			var convertBack = Energy.WattHours.ToCalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(600.0, 0.697333)]
	[TestCase(1234.5, 1.43476333)]
	[TestCase(88.7, 0.1030891)]
	public void ConvertKnownCaloriesToWattHours(double input, double expectation)
	{
		var result = Energy.Calories.ToWattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromCaloriesToKilowattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Calories.ToKilowattHours(value);
			var convertBack = Energy.KilowattHours.ToCalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(100900.0, 0.117268222)]
	[TestCase(987654.0, 1.14787343)]
	[TestCase(506012.0, 0.588098391)]
	public void ConvertKnownCaloriesToKilowattHours(double input, double expectation)
	{
		var result = Energy.Calories.ToKilowattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromCaloriesToFootPoundsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Calories.ToFootPounds(value);
			var convertBack = Energy.FootPounds.ToCalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(123.0, 379.573)]
	[TestCase(9.01, 27.8045)]
	[TestCase(2.8, 8.64069)]
	public void ConvertKnownCaloriesToFootPounds(double input, double expectation)
	{
		var result = Energy.Calories.ToFootPounds(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class FootPoundsTests
{
	[Property]
	public void FromFootPoundsToKilojoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.FootPounds.ToKilojoules(value);
			var convertBack = Energy.Kilojoules.ToFootPounds(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(190.0, 0.257605)]
	[TestCase(4.6, 0.00623676)]
	[TestCase(123.8, 0.16785026)]
	public void ConvertKnownFootPoundsToKilojoules(double input, double expectation)
	{
		var result = Energy.FootPounds.ToKilojoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFootPoundsToKilocaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.FootPounds.ToKilocalories(value);
			var convertBack = Energy.Kilocalories.ToFootPounds(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1999.0, 0.6477725)]
	[TestCase(890.8, 0.2886622)]
	[TestCase(12000.0, 3.8885792)]
	public void ConvertKnownFootPoundsToKilocalories(double input, double expectation)
	{
		var result = Energy.FootPounds.ToKilocalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFootPoundsToJoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.FootPounds.ToJoules(value);
			var convertBack = Energy.Joules.ToFootPounds(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(190.0, 257.605)]
	[TestCase(23.4, 31.72614)]
	[TestCase(9.2, 12.4735)]
	public void ConvertKnownFootPoundsToJoules(double input, double expectation)
	{
		var result = Energy.FootPounds.ToJoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFootPoundsToBtuAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.FootPounds.ToBtu(value);
			var convertBack = Energy.Btu.ToFootPounds(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(9000.0, 11.56561)]
	[TestCase(45.6, 0.05859908)]
	[TestCase(1996.0, 2.564995)]
	public void ConvertKnownFootPoundsToBtu(double input, double expectation)
	{
		var result = Energy.FootPounds.ToBtu(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFootPoundsToCaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.FootPounds.ToCalories(value);
			var convertBack = Energy.Calories.ToFootPounds(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(123.0, 39.8579)]
	[TestCase(54.7, 17.72544)]
	[TestCase(109.2, 35.386071)]
	public void ConvertKnownFootPoundsToCalories(double input, double expectation)
	{
		var result = Energy.FootPounds.ToCalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFootPoundsToUSThermsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.FootPounds.ToUSTherms(value);
			var convertBack = Energy.USTherms.ToFootPounds(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(19000000.0, 0.24422111613)]
	[TestCase(1234567.0, 0.01586880688)]
	[TestCase(100200300.0, 1.28794890016)]
	public void ConvertKnownFootPoundsToUSTherms(double input, double expectation)
	{
		var result = Energy.FootPounds.ToUSTherms(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFootPoundsToWattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.FootPounds.ToWattHours(value);
			var convertBack = Energy.WattHours.ToFootPounds(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(44.0, 0.0165711)]
	[TestCase(9080.0, 3.419674)]
	[TestCase(1200.0, 0.4519393)]
	public void ConvertKnownFootPoundsToWattHours(double input, double expectation)
	{
		var result = Energy.FootPounds.ToWattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromFootPoundsToKilowattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.FootPounds.ToKilowattHours(value);
			var convertBack = Energy.KilowattHours.ToFootPounds(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(900000.0, 0.338954487)]
	[TestCase(100200.0, 0.0377369329)]
	[TestCase(9876543.0, 3.719665074)]
	public void ConvertKnownFootPoundsToKilowattHours(double input, double expectation)
	{
		var result = Energy.FootPounds.ToKilowattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class JoulesTests
{
	[Property]
	public void FromJoulesToKilojoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Joules.ToKilojoules(value);
			var convertBack = Energy.Kilojoules.ToJoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(790.0, 0.79)]
	[TestCase(800100.0, 800.1)]
	[TestCase(509.2, 0.5092)]
	public void ConvertKnownJoulesToKilojoules(double input, double expectation)
	{
		var result = Energy.Joules.ToKilojoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromJoulesToKilocaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Joules.ToKilocalories(value);
			var convertBack = Energy.Kilocalories.ToJoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(790.0, 0.188815)]
	[TestCase(125.9, 0.030090822)]
	[TestCase(8000.0, 1.912046)]
	public void ConvertKnownJoulesToKilocalories(double input, double expectation)
	{
		var result = Energy.Joules.ToKilocalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromJoulesToBtuAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Joules.ToBtu(value);
			var convertBack = Energy.Btu.ToJoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(500.0, 0.473909)]
	[TestCase(1910.0, 1.810331)]
	[TestCase(67000.1, 63.50384184)]
	public void ConvertKnownJoulesToBtu(double input, double expectation)
	{
		var result = Energy.Joules.ToBtu(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromJoulesToCaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Joules.ToCalories(value);
			var convertBack = Energy.Calories.ToJoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(67.0, 16.0134)]
	[TestCase(909.0, 217.256)]
	[TestCase(190.0, 45.4111)]
	public void ConvertKnownJoulesToCalories(double input, double expectation)
	{
		var result = Energy.Joules.ToCalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromJoulesToUSThermsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Joules.ToUSTherms(value);
			var convertBack = Energy.USTherms.ToJoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(100090000.0, 0.948896667059)]
	[TestCase(55.7e6, 0.52806018938)]
	[TestCase(1234567890.0, 11.70423974501)]
	public void ConvertKnownJoulesToUSTherms(double input, double expectation)
	{
		var result = Energy.Joules.ToUSTherms(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromJoulesToWattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Joules.ToWattHours(value);
			var convertBack = Energy.WattHours.ToJoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(56000.0, 15.555556)]
	[TestCase(890.0, 0.247222)]
	[TestCase(22001.0, 6.1113889)]
	public void ConvertKnownJoulesToWattHours(double input, double expectation)
	{
		var result = Energy.Joules.ToWattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromJoulesToKilowattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Joules.ToKilowattHours(value);
			var convertBack = Energy.KilowattHours.ToJoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(560000.8, 0.1555557)]
	[TestCase(1234567.0, 0.3429352778)]
	[TestCase(900100.0, 0.250027778)]
	public void ConvertKnownJoulesToKilowattHours(double input, double expectation)
	{
		var result = Energy.Joules.ToKilowattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromJoulesToFootPoundsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Joules.ToFootPounds(value);
			var convertBack = Energy.FootPounds.ToJoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(900.0, 663.806)]
	[TestCase(10.2, 7.523134)]
	[TestCase(6.7, 4.94167)]
	public void ConvertKnownJoulesToFootPounds(double input, double expectation)
	{
		var result = Energy.Joules.ToFootPounds(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class KilocaloriesTests
{
	[Property]
	public void FromKilocaloriesToKilojoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilocalories.ToKilojoules(value);
			var convertBack = Energy.Kilojoules.ToKilocalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(67.0, 280.328)]
	[TestCase(4.5, 18.828)]
	[TestCase(100.3, 419.6552)]
	public void ConvertKnownKilocaloriesToKilojoules(double input, double expectation)
	{
		var result = Energy.Kilocalories.ToKilojoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilocaloriesToJoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilocalories.ToJoules(value);
			var convertBack = Energy.Joules.ToKilocalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(100.3, 419655.2)]
	[TestCase(0.9, 3765.6)]
	[TestCase(3.4, 14225.6)]
	public void ConvertKnownKilocaloriesToJoules(double input, double expectation)
	{
		var result = Energy.Kilocalories.ToJoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilocaloriesToBtuAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilocalories.ToBtu(value);
			var convertBack = Energy.Btu.ToKilocalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(3.4, 13.4833)]
	[TestCase(109.0, 432.2940)]
	[TestCase(22.89, 90.774114)]
	public void ConvertKnownKilocaloriesToBtu(double input, double expectation)
	{
		var result = Energy.Kilocalories.ToBtu(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilocaloriesToCaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilocalories.ToCalories(value);
			var convertBack = Energy.Calories.ToKilocalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(22.8, 22800.0)]
	[TestCase(76.23, 76230.0)]
	[TestCase(0.07, 70.0)]
	public void ConvertKnownKilocaloriesToCalories(double input, double expectation)
	{
		var result = Energy.Kilocalories.ToCalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilocaloriesToUSThermsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilocalories.ToUSTherms(value);
			var convertBack = Energy.USTherms.ToKilocalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(12345.0, 0.4896388)]
	[TestCase(90002.0, 3.5700317)]
	[TestCase(180180.0, 7.14704457)]
	public void ConvertKnownKilocaloriesToUSTherms(double input, double expectation)
	{
		var result = Energy.Kilocalories.ToUSTherms(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilocaloriesToWattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilocalories.ToWattHours(value);
			var convertBack = Energy.WattHours.ToKilocalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(89.0, 103.438)]
	[TestCase(23.6, 27.42844)]
	[TestCase(0.9, 1.046)]
	public void ConvertKnownKilocaloriesToWattHours(double input, double expectation)
	{
		var result = Energy.Kilocalories.ToWattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilocaloriesToKilowattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilocalories.ToKilowattHours(value);
			var convertBack = Energy.KilowattHours.ToKilocalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(456.0, 0.529973)]
	[TestCase(1090.8, 1.267752)]
	[TestCase(567.1, 0.65909622)]
	public void ConvertKnownKilocaloriesToKilowattHours(double input, double expectation)
	{
		var result = Energy.Kilocalories.ToKilowattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilocaloriesToFootPoundsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilocalories.ToFootPounds(value);
			var convertBack = Energy.FootPounds.ToKilocalories(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(109.0, 336369.64)]
	[TestCase(0.5, 1542.98)]
	[TestCase(2.4, 7406.3)]
	public void ConvertKnownKilocaloriesToFootPounds(double input, double expectation)
	{
		var result = Energy.Kilocalories.ToFootPounds(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class KilojoulesTests
{
	[Property]
	public void FromKilojoulesToKilocaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilojoules.ToKilocalories(value);
			var convertBack = Energy.Kilocalories.ToKilojoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(199.0, 47.5621)]
	[TestCase(0.67, 0.1601338)]
	[TestCase(4.7, 1.12333)]
	public void ConvertKnownKilojoulesToKilocalories(double input, double expectation)
	{
		var result = Energy.Kilojoules.ToKilocalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilojoulesToJoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilojoules.ToJoules(value);
			var convertBack = Energy.Joules.ToKilojoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(4.7, 4700.0)]
	[TestCase(7.8, 7800.0)]
	[TestCase(1800.0, 1800000.0)]
	public void ConvertKnownKilojoulesToJoules(double input, double expectation)
	{
		var result = Energy.Kilojoules.ToJoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilojoulesToBtuAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilojoules.ToBtu(value);
			var convertBack = Energy.Btu.ToKilojoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1800.0, 1706.070)]
	[TestCase(1.4, 1.32694)]
	[TestCase(89.2, 84.54529)]
	public void ConvertKnownKilojoulesToBtu(double input, double expectation)
	{
		var result = Energy.Kilojoules.ToBtu(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilojoulesToCaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilojoules.ToCalories(value);
			var convertBack = Energy.Calories.ToKilojoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(67.0, 16013.381899)]
	[TestCase(1.4, 334.608)]
	[TestCase(87.0, 20793.5)]
	public void ConvertKnownKilojoulesToCalories(double input, double expectation)
	{
		var result = Energy.Kilojoules.ToCalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilojoulesToUSThermsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilojoules.ToUSTherms(value);
			var convertBack = Energy.USTherms.ToKilojoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(123456.0, 1.17041649)]
	[TestCase(88000.0, 0.83427822)]
	[TestCase(9000.0, 0.08532391)]
	public void ConvertKnownKilojoulesToUSTherms(double input, double expectation)
	{
		var result = Energy.Kilojoules.ToUSTherms(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilojoulesToWattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilojoules.ToWattHours(value);
			var convertBack = Energy.WattHours.ToKilojoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(98000.0, 27222.222)]
	[TestCase(1.5, 0.416667)]
	[TestCase(67.9, 18.86111)]
	public void ConvertKnownKilojoulesToWattHours(double input, double expectation)
	{
		var result = Energy.Kilojoules.ToWattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilojoulesToKilowattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilojoules.ToKilowattHours(value);
			var convertBack = Energy.KilowattHours.ToKilojoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(8000.0, 2.222222)]
	[TestCase(67.99, 0.018886111)]
	[TestCase(406.8, 0.113)]
	public void ConvertKnownKilojoulesToKilowattHours(double input, double expectation)
	{
		var result = Energy.Kilojoules.ToKilowattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilojoulesToFootPoundsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.Kilojoules.ToFootPounds(value);
			var convertBack = Energy.FootPounds.ToKilojoules(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(100.9, 74420.00579)]
	[TestCase(2.4, 1770.15)]
	[TestCase(0.9, 663.806)]
	public void ConvertKnownKilojoulesToFootPounds(double input, double expectation)
	{
		var result = Energy.Kilojoules.ToFootPounds(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class KilowattHoursTests
{
	[Property]
	public void FromKilowattHoursToKilojoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.KilowattHours.ToKilojoules(value);
			var convertBack = Energy.Kilojoules.ToKilowattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.6, 2160.0)]
	[TestCase(134.0, 482400.0)]
	[TestCase(45.6, 164160.0)]
	public void ConvertKnownKilowattHoursToKilojoules(double input, double expectation)
	{
		var result = Energy.KilowattHours.ToKilojoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilowattHoursToKilocaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.KilowattHours.ToKilocalories(value);
			var convertBack = Energy.Kilocalories.ToKilowattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(45.6, 39235.1976)]
	[TestCase(12.0, 10325.052)]
	[TestCase(0.4, 344.168)]
	public void ConvertKnownKilowattHoursToKilocalories(double input, double expectation)
	{
		var result = Energy.KilowattHours.ToKilocalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilowattHoursToJoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.KilowattHours.ToJoules(value);
			var convertBack = Energy.Joules.ToKilowattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.01, 36000.0)]
	[TestCase(0.009, 32400.0)]
	[TestCase(2.0, 7.2e+6)]
	public void ConvertKnownKilowattHoursToJoules(double input, double expectation)
	{
		var result = Energy.KilowattHours.ToJoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilowattHoursToBtuAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.KilowattHours.ToBtu(value);
			var convertBack = Energy.Btu.ToKilowattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(2.0, 6824.28)]
	[TestCase(0.7, 2388.4979)]
	[TestCase(0.02, 68.24283)]
	public void ConvertKnownKilowattHoursToBtu(double input, double expectation)
	{
		var result = Energy.KilowattHours.ToBtu(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilowattHoursToCaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.KilowattHours.ToCalories(value);
			var convertBack = Energy.Calories.ToKilowattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.1, 86042.1)]
	[TestCase(0.07, 60229.47)]
	[TestCase(0.0123, 10583.174)]
	public void ConvertKnownKilowattHoursToCalories(double input, double expectation)
	{
		var result = Energy.KilowattHours.ToCalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilowattHoursToUSThermsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.KilowattHours.ToUSTherms(value);
			var convertBack = Energy.USTherms.ToKilowattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(5.0, 0.170648)]
	[TestCase(234.0, 7.98632)]
	[TestCase(1001.0, 34.16369)]
	public void ConvertKnownKilowattHoursToUSTherms(double input, double expectation)
	{
		var result = Energy.KilowattHours.ToUSTherms(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilowattHoursToWattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.KilowattHours.ToWattHours(value);
			var convertBack = Energy.WattHours.ToKilowattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(123.0, 123000.0)]
	[TestCase(98.4, 98400.0)]
	[TestCase(1.6, 1600.0)]
	public void ConvertKnownKilowattHoursToWattHours(double input, double expectation)
	{
		var result = Energy.KilowattHours.ToWattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilowattHoursToFootPoundsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.KilowattHours.ToFootPounds(value);
			var convertBack = Energy.FootPounds.ToKilowattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.001, 2655.196219)]
	[TestCase(0.09, 238967.6597)]
	[TestCase(0.0006, 1593.1177314)]
	public void ConvertKnownKilowattHoursToFootPounds(double input, double expectation)
	{
		var result = Energy.KilowattHours.ToFootPounds(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class USThermsTests
{
	[Property]
	public void FromUSThermsToKilojoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.USTherms.ToKilojoules(value);
			var convertBack = Energy.Kilojoules.ToUSTherms(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.009, 949.3236)]
	[TestCase(3.0, 316440.12)]
	[TestCase(1.9, 200412.075)]
	public void ConvertKnownUSThermsToKilojoules(double input, double expectation)
	{
		var result = Energy.USTherms.ToKilojoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSThermsToKilocaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.USTherms.ToKilocalories(value);
			var convertBack = Energy.Kilocalories.ToUSTherms(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.1, 27731.44)]
	[TestCase(0.04, 1008.417)]
	[TestCase(0.0123, 310.088174)]
	public void ConvertKnownUSThermsToKilocalories(double input, double expectation)
	{
		var result = Energy.USTherms.ToKilocalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSThermsToJoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.USTherms.ToJoules(value);
			var convertBack = Energy.Joules.ToUSTherms(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.008, 843843.2)]
	[TestCase(3.4e-6, 358.633)]
	[TestCase(0.00678, 715157.112)]
	public void ConvertKnownUSThermsToJoules(double input, double expectation)
	{
		var result = Energy.USTherms.ToJoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSThermsToBtuAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.USTherms.ToBtu(value);
			var convertBack = Energy.Btu.ToUSTherms(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.00666, 665.8409891)]
	[TestCase(2.0, 199952.249)]
	[TestCase(0.9, 89978.51204)]
	public void ConvertKnownUSThermsToBtu(double input, double expectation)
	{
		var result = Energy.USTherms.ToBtu(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSThermsToCaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.USTherms.ToCalories(value);
			var convertBack = Energy.Calories.ToUSTherms(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.003, 75631.262)]
	[TestCase(6.8e-3, 171430.856)]
	[TestCase(0.0008, 20168.3365)]
	public void ConvertKnownUSThermsToCalories(double input, double expectation)
	{
		var result = Energy.USTherms.ToCalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSThermsToWattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.USTherms.ToWattHours(value);
			var convertBack = Energy.WattHours.ToUSTherms(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(6.0, 175800.59)]
	[TestCase(1.9, 55670.189)]
	[TestCase(0.07, 2051.008)]
	public void ConvertKnownUSThermsToWattHours(double input, double expectation)
	{
		var result = Energy.USTherms.ToWattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSThermsToKilowattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.USTherms.ToKilowattHours(value);
			var convertBack = Energy.KilowattHours.ToUSTherms(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.9, 26.3701)]
	[TestCase(7.9, 231.471)]
	[TestCase(1.4, 41.0202)]
	public void ConvertKnownUSThermsToKilowattHours(double input, double expectation)
	{
		var result = Energy.USTherms.ToKilowattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromUSThermsToFootPoundsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.USTherms.ToFootPounds(value);
			var convertBack = Energy.FootPounds.ToUSTherms(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.009, 700352.43389267)]
	[TestCase(0.02, 1556338.74198)]
	[TestCase(0.0003, 23345.081129)]
	public void ConvertKnownUSThermsToFootPounds(double input, double expectation)
	{
		var result = Energy.USTherms.ToFootPounds(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class WattHoursTests
{
	[Property]
	public void FromWattHoursToKilojoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.WattHours.ToKilojoules(value);
			var convertBack = Energy.Kilojoules.ToWattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.6, 5.76)]
	[TestCase(67.0, 241.2)]
	[TestCase(8.12, 29.232)]
	public void ConvertKnownWattHoursToKilojoules(double input, double expectation)
	{
		var result = Energy.WattHours.ToKilojoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromWattHoursToKilocaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.WattHours.ToKilocalories(value);
			var convertBack = Energy.Kilocalories.ToWattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(8.12, 6.986616)]
	[TestCase(170.0, 146.272)]
	[TestCase(19.2, 16.52008)]
	public void ConvertKnownWattHoursToKilocalories(double input, double expectation)
	{
		var result = Energy.WattHours.ToKilocalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromWattHoursToJoulesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.WattHours.ToJoules(value);
			var convertBack = Energy.Joules.ToWattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(6.7, 24120.0)]
	[TestCase(12.34, 44424.0)]
	[TestCase(0.09, 324.0)]
	public void ConvertKnownWattHoursToJoules(double input, double expectation)
	{
		var result = Energy.WattHours.ToJoules(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromWattHoursToBtuAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.WattHours.ToBtu(value);
			var convertBack = Energy.Btu.ToWattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(34.0, 116.013)]
	[TestCase(179.2, 611.45578)]
	[TestCase(0.9, 3.07093)]
	public void ConvertKnownWattHoursToBtu(double input, double expectation)
	{
		var result = Energy.WattHours.ToBtu(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromWattHoursToCaloriesAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.WattHours.ToCalories(value);
			var convertBack = Energy.Calories.ToWattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.2, 172.084)]
	[TestCase(0.09, 77.43786)]
	[TestCase(12.0, 10325.06754)]
	public void ConvertKnownWattHoursToCalories(double input, double expectation)
	{
		var result = Energy.WattHours.ToCalories(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromWattHoursToUSThermsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.WattHours.ToUSTherms(value);
			var convertBack = Energy.USTherms.ToWattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1090.0, 0.03720122)]
	[TestCase(49990.0, 1.7061369)]
	[TestCase(900800.0, 30.7439107)]
	public void ConvertKnownWattHoursToUSTherms(double input, double expectation)
	{
		var result = Energy.WattHours.ToUSTherms(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromWattHoursToKilowattHoursAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.WattHours.ToKilowattHours(value);
			var convertBack = Energy.KilowattHours.ToWattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(98.0, 0.098)]
	[TestCase(12.5, 0.0125)]
	[TestCase(0.6, 0.0006)]
	public void ConvertKnownWattHoursToKilowattHours(double input, double expectation)
	{
		var result = Energy.WattHours.ToKilowattHours(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromWattHoursToFootPoundsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Energy.WattHours.ToFootPounds(value);
			var convertBack = Energy.FootPounds.ToWattHours(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(1.5, 3982.829)]
	[TestCase(0.3, 796.567)]
	[TestCase(90.1, 239235.3219)]
	public void ConvertKnownWattHoursToFootPounds(double input, double expectation)
	{
		var result = Energy.WattHours.ToFootPounds(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
