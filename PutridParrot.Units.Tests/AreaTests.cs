// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

using NUnit.Framework;
using FsCheck;
using PropertyAttribute = FsCheck.NUnit.PropertyAttribute;

namespace PutridParrot.Units.Tests
{
	public class AcresTests
	{
		[Property]
		public void FromAcresToSquareKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Acres.ToSquareKilometres(value);
				var convertBack = Area.SquareKilometres.ToAcres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100.0, 0.404686)]
		[TestCase(90.0, 0.364217)]
		[TestCase(1800.0, 7.284342)]
		public void ConvertKnownAcresToSquareKilometres(double input, double expectation)
		{
			var result = Area.Acres.ToSquareKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromAcresToSquareMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Acres.ToSquareMetres(value);
				var convertBack = Area.SquareMetres.ToAcres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.2, 4856.23)]
		[TestCase(0.8, 3237.49)]
		[TestCase(5.6, 22662.416)]
		public void ConvertKnownAcresToSquareMetres(double input, double expectation)
		{
			var result = Area.Acres.ToSquareMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromAcresToSquareMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Acres.ToSquareMiles(value);
				var convertBack = Area.SquareMiles.ToAcres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1009.0, 1.576562)]
		[TestCase(90.0, 0.140625)]
		[TestCase(765.0, 1.19531)]
		public void ConvertKnownAcresToSquareMiles(double input, double expectation)
		{
			var result = Area.Acres.ToSquareMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromAcresToSquareYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Acres.ToSquareYards(value);
				var convertBack = Area.SquareYards.ToAcres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.4, 16456.0)]
		[TestCase(0.7, 3388.0)]
		[TestCase(0.01, 48.4)]
		public void ConvertKnownAcresToSquareYards(double input, double expectation)
		{
			var result = Area.Acres.ToSquareYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromAcresToSquareFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Acres.ToSquareFeet(value);
				var convertBack = Area.SquareFeet.ToAcres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.01, 435.6)]
		[TestCase(12.0, 522720.0)]
		[TestCase(0.67, 29185.2)]
		public void ConvertKnownAcresToSquareFeet(double input, double expectation)
		{
			var result = Area.Acres.ToSquareFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromAcresToSquareInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Acres.ToSquareInches(value);
				var convertBack = Area.SquareInches.ToAcres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.09, 564537.6)]
		[TestCase(0.005, 31363.2)]
		[TestCase(0.012, 75271.68)]
		public void ConvertKnownAcresToSquareInches(double input, double expectation)
		{
			var result = Area.Acres.ToSquareInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromAcresToHectaresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Acres.ToHectares(value);
				var convertBack = Area.Hectares.ToAcres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1109.0, 448.7964)]
		[TestCase(5.6, 2.26624)]
		[TestCase(1.23, 0.4977633)]
		public void ConvertKnownAcresToHectares(double input, double expectation)
		{
			var result = Area.Acres.ToHectares(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class HectaresTests
	{
		[Property]
		public void FromHectaresToSquareKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Hectares.ToSquareKilometres(value);
				var convertBack = Area.SquareKilometres.ToHectares(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(15000.0, 150.0)]
		[TestCase(300.0, 3.0)]
		[TestCase(45.6, 0.456)]
		public void ConvertKnownHectaresToSquareKilometres(double input, double expectation)
		{
			var result = Area.Hectares.ToSquareKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromHectaresToSquareMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Hectares.ToSquareMetres(value);
				var convertBack = Area.SquareMetres.ToHectares(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.4, 14000.0)]
		[TestCase(0.9, 9000.0)]
		[TestCase(0.012, 120.0)]
		public void ConvertKnownHectaresToSquareMetres(double input, double expectation)
		{
			var result = Area.Hectares.ToSquareMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromHectaresToSquareMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Hectares.ToSquareMiles(value);
				var convertBack = Area.SquareMiles.ToHectares(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1102.0, 4.254846)]
		[TestCase(4500.0, 17.3746)]
		[TestCase(90.0, 0.347492)]
		public void ConvertKnownHectaresToSquareMiles(double input, double expectation)
		{
			var result = Area.Hectares.ToSquareMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromHectaresToSquareYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Hectares.ToSquareYards(value);
				var convertBack = Area.SquareYards.ToHectares(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.2, 14351.8805556)]
		[TestCase(0.8, 9567.92)]
		[TestCase(34.0, 406636.615)]
		public void ConvertKnownHectaresToSquareYards(double input, double expectation)
		{
			var result = Area.Hectares.ToSquareYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromHectaresToSquareFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Hectares.ToSquareFeet(value);
				var convertBack = Area.SquareFeet.ToHectares(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.4, 365972.599)]
		[TestCase(0.09, 9687.519)]
		[TestCase(1.2, 129166.7999)]
		public void ConvertKnownHectaresToSquareFeet(double input, double expectation)
		{
			var result = Area.Hectares.ToSquareFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromHectaresToSquareInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Hectares.ToSquareInches(value);
				var convertBack = Area.SquareInches.ToHectares(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 139500.28)]
		[TestCase(0.01, 155000.31)]
		[TestCase(0.0061, 94550.1891)]
		public void ConvertKnownHectaresToSquareInches(double input, double expectation)
		{
			var result = Area.Hectares.ToSquareInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromHectaresToAcresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.Hectares.ToAcres(value);
				var convertBack = Area.Acres.ToHectares(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.2, 2.96526)]
		[TestCase(0.8, 1.97684)]
		[TestCase(4.2, 10.3784)]
		public void ConvertKnownHectaresToAcres(double input, double expectation)
		{
			var result = Area.Hectares.ToAcres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class SquareFeetTests
	{
		[Property]
		public void FromSquareFeetToSquareKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareFeet.ToSquareKilometres(value);
				var convertBack = Area.SquareKilometres.ToSquareFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(88997766.0, 8.2681630146)]
		[TestCase(10009002.0, 0.92986671317)]
		[TestCase(987654321.0, 91.75608889)]
		public void ConvertKnownSquareFeetToSquareKilometres(double input, double expectation)
		{
			var result = Area.SquareFeet.ToSquareKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareFeetToSquareMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareFeet.ToSquareMetres(value);
				var convertBack = Area.SquareMetres.ToSquareFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 83.6127)]
		[TestCase(799.123, 74.24095603)]
		[TestCase(500.0, 46.4515)]
		public void ConvertKnownSquareFeetToSquareMetres(double input, double expectation)
		{
			var result = Area.SquareFeet.ToSquareMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareFeetToSquareMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareFeet.ToSquareMiles(value);
				var convertBack = Area.SquareMiles.ToSquareFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12000000.0, 0.43044077135)]
		[TestCase(987654321.0, 35.4272239799)]
		[TestCase(900800700.0, 32.3117790117)]
		public void ConvertKnownSquareFeetToSquareMiles(double input, double expectation)
		{
			var result = Area.SquareFeet.ToSquareMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareFeetToSquareYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareFeet.ToSquareYards(value);
				var convertBack = Area.SquareYards.ToSquareFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(909.0, 101.0)]
		[TestCase(123.456, 13.71733333)]
		[TestCase(8009.0, 889.8889)]
		public void ConvertKnownSquareFeetToSquareYards(double input, double expectation)
		{
			var result = Area.SquareFeet.ToSquareYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareFeetToSquareInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareFeet.ToSquareInches(value);
				var convertBack = Area.SquareInches.ToSquareFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.7, 964.8)]
		[TestCase(1.5, 216.0)]
		[TestCase(0.9, 129.6)]
		public void ConvertKnownSquareFeetToSquareInches(double input, double expectation)
		{
			var result = Area.SquareFeet.ToSquareInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareFeetToHectaresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareFeet.ToHectares(value);
				var convertBack = Area.Hectares.ToSquareFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(90000.0, 0.83612736)]
		[TestCase(120120.0, 1.11595132)]
		[TestCase(90071.0, 0.83678697)]
		public void ConvertKnownSquareFeetToHectares(double input, double expectation)
		{
			var result = Area.SquareFeet.ToHectares(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareFeetToAcresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareFeet.ToAcres(value);
				var convertBack = Area.Acres.ToSquareFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(90000.0, 2.0661157)]
		[TestCase(123456.0, 2.83415978)]
		[TestCase(8809.0, 0.2022268)]
		public void ConvertKnownSquareFeetToAcres(double input, double expectation)
		{
			var result = Area.SquareFeet.ToAcres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class SquareInchesTests
	{
		[Property]
		public void FromSquareInchesToSquareKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareInches.ToSquareKilometres(value);
				var convertBack = Area.SquareKilometres.ToSquareInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(678900000.0, 0.437999124)]
		[TestCase(10000000000.0, 6.4516)]
		[TestCase(9e12, 5806.44)]
		public void ConvertKnownSquareInchesToSquareKilometres(double input, double expectation)
		{
			var result = Area.SquareInches.ToSquareKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareInchesToSquareMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareInches.ToSquareMetres(value);
				var convertBack = Area.SquareMetres.ToSquareInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1090.0, 0.7032244)]
		[TestCase(1.3e6, 838.708)]
		[TestCase(9988.0, 6.443858)]
		public void ConvertKnownSquareInchesToSquareMetres(double input, double expectation)
		{
			var result = Area.SquareInches.ToSquareMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareInchesToSquareMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareInches.ToSquareMiles(value);
				var convertBack = Area.SquareMiles.ToSquareInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1007008000.0, 0.2508433450668)]
		[TestCase(1.2e12, 298.9172023262932)]
		[TestCase(250e7, 0.6227441715131)]
		public void ConvertKnownSquareInchesToSquareMiles(double input, double expectation)
		{
			var result = Area.SquareInches.ToSquareMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareInchesToSquareYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareInches.ToSquareYards(value);
				var convertBack = Area.SquareYards.ToSquareInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 0.694444)]
		[TestCase(15000.0, 11.574074)]
		[TestCase(3e6, 2314.814815)]
		public void ConvertKnownSquareInchesToSquareYards(double input, double expectation)
		{
			var result = Area.SquareInches.ToSquareYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareInchesToSquareFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareInches.ToSquareFeet(value);
				var convertBack = Area.SquareFeet.ToSquareInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(34.0, 0.236111)]
		[TestCase(1002.0, 6.958333)]
		[TestCase(890.0, 6.18056)]
		public void ConvertKnownSquareInchesToSquareFeet(double input, double expectation)
		{
			var result = Area.SquareInches.ToSquareFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareInchesToHectaresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareInches.ToHectares(value);
				var convertBack = Area.Hectares.ToSquareInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9000000.0, 0.580644)]
		[TestCase(12345678.0, 0.79649376185)]
		[TestCase(99887766.0, 6.4443591113)]
		public void ConvertKnownSquareInchesToHectares(double input, double expectation)
		{
			var result = Area.SquareInches.ToHectares(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareInchesToAcresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareInches.ToAcres(value);
				var convertBack = Area.Acres.ToSquareInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900100.0, 0.143496199)]
		[TestCase(5e6, 0.7971125395)]
		[TestCase(12345678.0, 1.9681789486)]
		public void ConvertKnownSquareInchesToAcres(double input, double expectation)
		{
			var result = Area.SquareInches.ToAcres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class SquareKilometresTests
	{
		[Property]
		public void FromSquareKilometresToSquareMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareKilometres.ToSquareMetres(value);
				var convertBack = Area.SquareMetres.ToSquareKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.12, 120000.0)]
		[TestCase(0.9, 900000.0)]
		[TestCase(8.123456, 8123456.0)]
		public void ConvertKnownSquareKilometresToSquareMetres(double input, double expectation)
		{
			var result = Area.SquareKilometres.ToSquareMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareKilometresToSquareMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareKilometres.ToSquareMiles(value);
				var convertBack = Area.SquareMiles.ToSquareKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(492.098, 190.0)]
		[TestCase(23.3099, 9.0)]
		[TestCase(4661.979, 1800.0)]
		public void ConvertKnownSquareKilometresToSquareMiles(double input, double expectation)
		{
			var result = Area.SquareKilometres.ToSquareMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareKilometresToSquareYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareKilometres.ToSquareYards(value);
				var convertBack = Area.SquareYards.ToSquareKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.158028071, 189000.0005)]
		[TestCase(8.361272764, 9999999.0310)]
		[TestCase(0.6, 717594.030)]
		public void ConvertKnownSquareKilometresToSquareYards(double input, double expectation)
		{
			var result = Area.SquareKilometres.ToSquareYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareKilometresToSquareFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareKilometres.ToSquareFeet(value);
				var convertBack = Area.SquareFeet.ToSquareKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 96875.194)]
		[TestCase(0.08, 861112.833)]
		[TestCase(0.123, 1323960.9812553)]
		public void ConvertKnownSquareKilometresToSquareFeet(double input, double expectation)
		{
			var result = Area.SquareKilometres.ToSquareFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareKilometresToSquareInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareKilometres.ToSquareInches(value);
				var convertBack = Area.SquareInches.ToSquareKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0008, 1240002.48)]
		[TestCase(0.00123, 1906503.813)]
		[TestCase(0.000045, 69750.1395)]
		public void ConvertKnownSquareKilometresToSquareInches(double input, double expectation)
		{
			var result = Area.SquareKilometres.ToSquareInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareKilometresToHectaresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareKilometres.ToHectares(value);
				var convertBack = Area.Hectares.ToSquareKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(190.0, 19000.0)]
		[TestCase(55.67, 5567.0)]
		[TestCase(0.9, 90.0)]
		public void ConvertKnownSquareKilometresToHectares(double input, double expectation)
		{
			var result = Area.SquareKilometres.ToHectares(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareKilometresToAcresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareKilometres.ToAcres(value);
				var convertBack = Area.Acres.ToSquareKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(30.393962, 7510.4999900100)]
		[TestCase(54.1, 13368.3805)]
		[TestCase(90.67, 22405.0103)]
		public void ConvertKnownSquareKilometresToAcres(double input, double expectation)
		{
			var result = Area.SquareKilometres.ToAcres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class SquareMetresTests
	{
		[Property]
		public void FromSquareMetresToSquareKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMetres.ToSquareKilometres(value);
				var convertBack = Area.SquareKilometres.ToSquareMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(19000.0, 0.019)]
		[TestCase(123456.0, 0.123456)]
		[TestCase(900100.0, 0.9001)]
		public void ConvertKnownSquareMetresToSquareKilometres(double input, double expectation)
		{
			var result = Area.SquareMetres.ToSquareKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareMetresToSquareMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMetres.ToSquareMiles(value);
				var convertBack = Area.SquareMiles.ToSquareMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(190009.0, 0.073362885)]
		[TestCase(12345678.0, 4.7666929245)]
		[TestCase(777666.0, 0.300258521)]
		public void ConvertKnownSquareMetresToSquareMiles(double input, double expectation)
		{
			var result = Area.SquareMetres.ToSquareMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareMetresToSquareYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMetres.ToSquareYards(value);
				var convertBack = Area.SquareYards.ToSquareMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 5.97995)]
		[TestCase(1.23, 1.471068)]
		[TestCase(700.0, 837.193)]
		public void ConvertKnownSquareMetresToSquareYards(double input, double expectation)
		{
			var result = Area.SquareMetres.ToSquareYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareMetresToSquareFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMetres.ToSquareFeet(value);
				var convertBack = Area.SquareFeet.ToSquareMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(90.0, 968.7519375)]
		[TestCase(180.0, 1937.503875)]
		[TestCase(123.4, 1328.2665454)]
		public void ConvertKnownSquareMetresToSquareFeet(double input, double expectation)
		{
			var result = Area.SquareMetres.ToSquareFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareMetresToSquareInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMetres.ToSquareInches(value);
				var convertBack = Area.SquareInches.ToSquareMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8.0, 12400.0)]
		[TestCase(1.23, 1906.504)]
		[TestCase(0.9, 1395.0)]
		public void ConvertKnownSquareMetresToSquareInches(double input, double expectation)
		{
			var result = Area.SquareMetres.ToSquareInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareMetresToHectaresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMetres.ToHectares(value);
				var convertBack = Area.Hectares.ToSquareMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1234.0, 0.1234)]
		[TestCase(560.9, 0.05609)]
		[TestCase(100900.0, 10.09)]
		public void ConvertKnownSquareMetresToHectares(double input, double expectation)
		{
			var result = Area.SquareMetres.ToHectares(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareMetresToAcresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMetres.ToAcres(value);
				var convertBack = Area.Acres.ToSquareMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(986.0, 0.243646)]
		[TestCase(1020.0, 0.2520475)]
		[TestCase(666111.0, 164.599613)]
		public void ConvertKnownSquareMetresToAcres(double input, double expectation)
		{
			var result = Area.SquareMetres.ToAcres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class SquareMilesTests
	{
		[Property]
		public void FromSquareMilesToSquareKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMiles.ToSquareKilometres(value);
				var convertBack = Area.SquareKilometres.ToSquareMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.0, 7.76996)]
		[TestCase(0.9, 2.33099)]
		[TestCase(100.0, 258.999)]
		public void ConvertKnownSquareMilesToSquareKilometres(double input, double expectation)
		{
			var result = Area.SquareMiles.ToSquareKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareMilesToSquareMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMiles.ToSquareMetres(value);
				var convertBack = Area.SquareMetres.ToSquareMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 23309.893)]
		[TestCase(0.010, 25899.88)]
		[TestCase(0.0006, 1553.99287)]
		public void ConvertKnownSquareMilesToSquareMetres(double input, double expectation)
		{
			var result = Area.SquareMiles.ToSquareMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareMilesToSquareYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMiles.ToSquareYards(value);
				var convertBack = Area.SquareYards.ToSquareMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.01, 30976.0)]
		[TestCase(0.00123, 3810.048)]
		[TestCase(0.09, 278784.0)]
		public void ConvertKnownSquareMilesToSquareYards(double input, double expectation)
		{
			var result = Area.SquareMiles.ToSquareYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareMilesToSquareFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMiles.ToSquareFeet(value);
				var convertBack = Area.SquareFeet.ToSquareMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.01, 278784.0)]
		[TestCase(0.005, 139392.0)]
		[TestCase(0.08, 2230272.0)]
		public void ConvertKnownSquareMilesToSquareFeet(double input, double expectation)
		{
			var result = Area.SquareMiles.ToSquareFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareMilesToSquareInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMiles.ToSquareInches(value);
				var convertBack = Area.SquareInches.ToSquareMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0001, 401448.96)]
		[TestCase(0.00098, 3934199.808)]
		[TestCase(0.000007, 28101.4272)]
		public void ConvertKnownSquareMilesToSquareInches(double input, double expectation)
		{
			var result = Area.SquareMiles.ToSquareInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareMilesToHectaresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMiles.ToHectares(value);
				var convertBack = Area.Hectares.ToSquareMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100.0, 25899.881103)]
		[TestCase(2.3, 595.697)]
		[TestCase(0.9, 233.099)]
		public void ConvertKnownSquareMilesToHectares(double input, double expectation)
		{
			var result = Area.SquareMiles.ToHectares(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareMilesToAcresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareMiles.ToAcres(value);
				var convertBack = Area.Acres.ToSquareMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.0, 1280.0)]
		[TestCase(0.1, 64.0)]
		[TestCase(4.6, 2944.0)]
		public void ConvertKnownSquareMilesToAcres(double input, double expectation)
		{
			var result = Area.SquareMiles.ToAcres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class SquareYardsTests
	{
		[Property]
		public void FromSquareYardsToSquareKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareYards.ToSquareKilometres(value);
				var convertBack = Area.SquareKilometres.ToSquareYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900000.0, 0.752514624)]
		[TestCase(190190.0, 0.159023063)]
		[TestCase(7000000.0, 5.85289152)]
		public void ConvertKnownSquareYardsToSquareKilometres(double input, double expectation)
		{
			var result = Area.SquareYards.ToSquareKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareYardsToSquareMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareYards.ToSquareMetres(value);
				var convertBack = Area.SquareMetres.ToSquareYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(700.0, 585.289)]
		[TestCase(12.0, 10.0335)]
		[TestCase(9.1, 7.60876)]
		public void ConvertKnownSquareYardsToSquareMetres(double input, double expectation)
		{
			var result = Area.SquareYards.ToSquareMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareYardsToSquareMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareYards.ToSquareMiles(value);
				var convertBack = Area.SquareMiles.ToSquareYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(98700.0, 0.031863378)]
		[TestCase(8888888.0, 2.869604855)]
		[TestCase(100200300.0, 32.3477208161)]
		public void ConvertKnownSquareYardsToSquareMiles(double input, double expectation)
		{
			var result = Area.SquareYards.ToSquareMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareYardsToSquareFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareYards.ToSquareFeet(value);
				var convertBack = Area.SquareFeet.ToSquareYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 108.0)]
		[TestCase(5.6, 50.4)]
		[TestCase(102.5, 922.5)]
		public void ConvertKnownSquareYardsToSquareFeet(double input, double expectation)
		{
			var result = Area.SquareYards.ToSquareFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareYardsToSquareInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareYards.ToSquareInches(value);
				var convertBack = Area.SquareInches.ToSquareYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(56.7, 73483.2)]
		[TestCase(1.8, 2332.8)]
		[TestCase(0.2, 259.2)]
		public void ConvertKnownSquareYardsToSquareInches(double input, double expectation)
		{
			var result = Area.SquareYards.ToSquareInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareYardsToHectaresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareYards.ToHectares(value);
				var convertBack = Area.Hectares.ToSquareYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(10090.0, 0.84365251)]
		[TestCase(98765.0, 8.2580119)]
		[TestCase(3090.09, 0.2583634)]
		public void ConvertKnownSquareYardsToHectares(double input, double expectation)
		{
			var result = Area.SquareYards.ToHectares(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromSquareYardsToAcresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Area.SquareYards.ToAcres(value);
				var convertBack = Area.Acres.ToSquareYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1000.0, 0.206612)]
		[TestCase(899.0, 0.185744)]
		[TestCase(5678.0, 1.17314)]
		public void ConvertKnownSquareYardsToAcres(double input, double expectation)
		{
			var result = Area.SquareYards.ToAcres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
}
