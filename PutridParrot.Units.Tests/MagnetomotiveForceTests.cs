/// <summary>
/// Do not change this code, it's generated by the UnitCodeGenerator app.
/// </summary>

using NUnit.Framework;
using FsCheck;
using PropertyAttribute = FsCheck.NUnit.PropertyAttribute;

namespace PutridParrot.Units.Tests;

public class AmpereturnsTests
{
	[Property]
	public void FromAmpereturnsToGilbertsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = MagnetomotiveForce.Ampereturns.ToGilberts(value);
			var convertBack = MagnetomotiveForce.Gilberts.ToAmpereturns(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(400.0, 502.6548248)]
	[TestCase(6.7, 8.4194683154)]
	[TestCase(0.8, 1.0053096496)]
	public void ConvertKnownAmpereturnsToGilberts(double input, double expectation)
	{
		var result = MagnetomotiveForce.Ampereturns.ToGilberts(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class GilbertsTests
{
	[Property]
	public void FromGilbertsToAmpereturnsAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = MagnetomotiveForce.Gilberts.ToAmpereturns(value);
			var convertBack = MagnetomotiveForce.Ampereturns.ToGilberts(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.8, 0.6366197721)]
	[TestCase(67.0, 53.316905912)]
	[TestCase(2.3, 1.8302818447)]
	public void ConvertKnownGilbertsToAmpereturns(double input, double expectation)
	{
		var result = MagnetomotiveForce.Gilberts.ToAmpereturns(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
