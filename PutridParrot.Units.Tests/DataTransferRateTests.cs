// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

using NUnit.Framework;
using FsCheck;
using PropertyAttribute = FsCheck.NUnit.PropertyAttribute;

namespace PutridParrot.Units.Tests
{
	public class BitsPerSecondTests
	{
		[Property]
		public void FromBitsPerSecondToKiloBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.BitsPerSecond.ToKiloBitsPerSecond(value);
				var convertBack = DataTransferRate.KiloBitsPerSecond.ToBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100.0, 0.1)]
		[TestCase(6021.0, 6.021)]
		[TestCase(9100.0, 9.1)]
		public void ConvertKnownBitsPerSecondToKiloBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.BitsPerSecond.ToKiloBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsPerSecondToMegaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.BitsPerSecond.ToMegaBitsPerSecond(value);
				var convertBack = DataTransferRate.MegaBitsPerSecond.ToBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9000000.0, 9.0)]
		[TestCase(123456.0, 0.123456)]
		[TestCase(1900000.0, 1.9)]
		public void ConvertKnownBitsPerSecondToMegaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.BitsPerSecond.ToMegaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsPerSecondToGigaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.BitsPerSecond.ToGigaBitsPerSecond(value);
				var convertBack = DataTransferRate.GigaBitsPerSecond.ToBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(190000000.0, 0.19)]
		[TestCase(8009.0, 8.009e-6)]
		[TestCase(987654321.0, 0.987654321)]
		public void ConvertKnownBitsPerSecondToGigaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.BitsPerSecond.ToGigaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsPerSecondToTeraBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.BitsPerSecond.ToTeraBitsPerSecond(value);
				var convertBack = DataTransferRate.TeraBitsPerSecond.ToBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(987654321234.0, 0.987654321234)]
		[TestCase(1234567890123456.0, 1234.567890123455982)]
		[TestCase(999888777666555.0, 999.888777666555029)]
		public void ConvertKnownBitsPerSecondToTeraBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.BitsPerSecond.ToTeraBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsPerSecondToKiloBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.BitsPerSecond.ToKiloBytesPerSecond(value);
				var convertBack = DataTransferRate.KiloBytesPerSecond.ToBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 0.1125)]
		[TestCase(12345.0, 1.543125)]
		[TestCase(6000.9, 0.7501125)]
		public void ConvertKnownBitsPerSecondToKiloBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.BitsPerSecond.ToKiloBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsPerSecondToMegaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.BitsPerSecond.ToMegaBytesPerSecond(value);
				var convertBack = DataTransferRate.MegaBytesPerSecond.ToBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123456.0, 0.015432)]
		[TestCase(900800.0, 0.1126)]
		[TestCase(999888777.0, 124.986097125)]
		public void ConvertKnownBitsPerSecondToMegaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.BitsPerSecond.ToMegaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsPerSecondToGigaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.BitsPerSecond.ToGigaBytesPerSecond(value);
				var convertBack = DataTransferRate.GigaBytesPerSecond.ToBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(999888777.0, 0.124986097125)]
		[TestCase(1.9e+9, 0.2375)]
		[TestCase(80090077.0, 0.010011259625)]
		public void ConvertKnownBitsPerSecondToGigaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.BitsPerSecond.ToGigaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsPerSecondToTeraBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.BitsPerSecond.ToTeraBytesPerSecond(value);
				var convertBack = DataTransferRate.TeraBytesPerSecond.ToBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(999888777666.0, 0.12498609720825)]
		[TestCase(12345678912345.0, 1.5432098640431251)]
		[TestCase(111999222888333.0, 13.9999028610416243)]
		public void ConvertKnownBitsPerSecondToTeraBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.BitsPerSecond.ToTeraBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsPerSecondToKibibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.BitsPerSecond.ToKibibitsPerSecond(value);
				var convertBack = DataTransferRate.KibibitsPerSecond.ToBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1800.0, 1.757813)]
		[TestCase(888.0, 0.867188)]
		[TestCase(7687.0, 7.506836)]
		public void ConvertKnownBitsPerSecondToKibibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.BitsPerSecond.ToKibibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromBitsPerSecondToMebibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.BitsPerSecond.ToMebibitsPerSecond(value);
				var convertBack = DataTransferRate.MebibitsPerSecond.ToBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(999888.0, 0.953567505)]
		[TestCase(1234567.0, 1.17737484)]
		[TestCase(900800.0, 0.859069824)]
		public void ConvertKnownBitsPerSecondToMebibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.BitsPerSecond.ToMebibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class GigaBitsPerSecondTests
	{
		[Property]
		public void FromGigaBitsPerSecondToBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBitsPerSecond.ToBitsPerSecond(value);
				var convertBack = DataTransferRate.BitsPerSecond.ToGigaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0009, 900000.0)]
		[TestCase(0.00007, 70000.0)]
		[TestCase(1.2e-5, 12000.0)]
		public void ConvertKnownGigaBitsPerSecondToBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBitsPerSecond.ToBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBitsPerSecondToKiloBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBitsPerSecond.ToKiloBitsPerSecond(value);
				var convertBack = DataTransferRate.KiloBitsPerSecond.ToGigaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.01, 10000.0)]
		[TestCase(0.91, 910000.0)]
		[TestCase(6.1, 6.1e+6)]
		public void ConvertKnownGigaBitsPerSecondToKiloBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBitsPerSecond.ToKiloBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBitsPerSecondToMegaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBitsPerSecond.ToMegaBitsPerSecond(value);
				var convertBack = DataTransferRate.MegaBitsPerSecond.ToGigaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.1, 6100.0)]
		[TestCase(0.961, 961.0)]
		[TestCase(1.2e-3, 1.2)]
		public void ConvertKnownGigaBitsPerSecondToMegaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBitsPerSecond.ToMegaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBitsPerSecondToTeraBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBitsPerSecond.ToTeraBitsPerSecond(value);
				var convertBack = DataTransferRate.TeraBitsPerSecond.ToGigaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1200.0, 1.2)]
		[TestCase(90012.0, 90.012)]
		[TestCase(8000.0, 8.0)]
		public void ConvertKnownGigaBitsPerSecondToTeraBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBitsPerSecond.ToTeraBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBitsPerSecondToKiloBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBitsPerSecond.ToKiloBytesPerSecond(value);
				var convertBack = DataTransferRate.KiloBytesPerSecond.ToGigaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.2, 150000.0)]
		[TestCase(0.9, 112500.0)]
		[TestCase(0.001, 125.0)]
		public void ConvertKnownGigaBitsPerSecondToKiloBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBitsPerSecond.ToKiloBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBitsPerSecondToMegaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBitsPerSecond.ToMegaBytesPerSecond(value);
				var convertBack = DataTransferRate.MegaBytesPerSecond.ToGigaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 112.5)]
		[TestCase(1.2, 150.0)]
		[TestCase(80.1, 10012.5)]
		public void ConvertKnownGigaBitsPerSecondToMegaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBitsPerSecond.ToMegaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBitsPerSecondToGigaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBitsPerSecond.ToGigaBytesPerSecond(value);
				var convertBack = DataTransferRate.GigaBytesPerSecond.ToGigaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(99.0, 12.375)]
		[TestCase(123.123, 15.390375)]
		[TestCase(8000.9, 1000.1125)]
		public void ConvertKnownGigaBitsPerSecondToGigaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBitsPerSecond.ToGigaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBitsPerSecondToTeraBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBitsPerSecond.ToTeraBytesPerSecond(value);
				var convertBack = DataTransferRate.TeraBytesPerSecond.ToGigaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9000.0, 1.125)]
		[TestCase(1234567.0, 154.320875)]
		[TestCase(613.0, 0.076625)]
		public void ConvertKnownGigaBitsPerSecondToTeraBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBitsPerSecond.ToTeraBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBitsPerSecondToKibibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBitsPerSecond.ToKibibitsPerSecond(value);
				var convertBack = DataTransferRate.KibibitsPerSecond.ToGigaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.8, 781250.0)]
		[TestCase(0.012, 11718.75)]
		[TestCase(0.002, 1953.125)]
		public void ConvertKnownGigaBitsPerSecondToKibibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBitsPerSecond.ToKibibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBitsPerSecondToMebibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBitsPerSecond.ToMebibitsPerSecond(value);
				var convertBack = DataTransferRate.MebibitsPerSecond.ToGigaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.002, 1.9073486)]
		[TestCase(0.9, 858.6)]
		[TestCase(6.1, 5819.4)]
		public void ConvertKnownGigaBitsPerSecondToMebibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBitsPerSecond.ToMebibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class GigaBytesPerSecondTests
	{
		[Property]
		public void FromGigaBytesPerSecondToBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBytesPerSecond.ToBitsPerSecond(value);
				var convertBack = DataTransferRate.BitsPerSecond.ToGigaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.004, 32000000.0)]
		[TestCase(0.012, 96000000.0)]
		[TestCase(3e-9, 24.0)]
		public void ConvertKnownGigaBytesPerSecondToBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBytesPerSecond.ToBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBytesPerSecondToKiloBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBytesPerSecond.ToKiloBitsPerSecond(value);
				var convertBack = DataTransferRate.KiloBitsPerSecond.ToGigaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 72000.0)]
		[TestCase(1.2e-4, 960.0)]
		[TestCase(0.0078, 62400.0)]
		public void ConvertKnownGigaBytesPerSecondToKiloBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBytesPerSecond.ToKiloBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBytesPerSecondToMegaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBytesPerSecond.ToMegaBitsPerSecond(value);
				var convertBack = DataTransferRate.MegaBitsPerSecond.ToGigaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0078, 62.4)]
		[TestCase(0.01, 80.0)]
		[TestCase(0.001234, 9.872)]
		public void ConvertKnownGigaBytesPerSecondToMegaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBytesPerSecond.ToMegaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBytesPerSecondToGigaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBytesPerSecond.ToGigaBitsPerSecond(value);
				var convertBack = DataTransferRate.GigaBitsPerSecond.ToGigaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 40.0)]
		[TestCase(1.2, 9.6)]
		[TestCase(0.01, 0.08)]
		public void ConvertKnownGigaBytesPerSecondToGigaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBytesPerSecond.ToGigaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBytesPerSecondToTeraBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBytesPerSecond.ToTeraBitsPerSecond(value);
				var convertBack = DataTransferRate.TeraBitsPerSecond.ToGigaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(70.0, 0.56)]
		[TestCase(9001.0, 72.008)]
		[TestCase(768123.9, 6144.9912)]
		public void ConvertKnownGigaBytesPerSecondToTeraBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBytesPerSecond.ToTeraBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBytesPerSecondToKiloBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBytesPerSecond.ToKiloBytesPerSecond(value);
				var convertBack = DataTransferRate.KiloBytesPerSecond.ToGigaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.2, 200000.0)]
		[TestCase(0.009, 9000.0)]
		[TestCase(0.00123, 1230.0)]
		public void ConvertKnownGigaBytesPerSecondToKiloBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBytesPerSecond.ToKiloBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBytesPerSecondToMegaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBytesPerSecond.ToMegaBytesPerSecond(value);
				var convertBack = DataTransferRate.MegaBytesPerSecond.ToGigaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 900.0)]
		[TestCase(12.0, 12000.0)]
		[TestCase(35.6, 35600.0)]
		public void ConvertKnownGigaBytesPerSecondToMegaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBytesPerSecond.ToMegaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBytesPerSecondToTeraBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBytesPerSecond.ToTeraBytesPerSecond(value);
				var convertBack = DataTransferRate.TeraBytesPerSecond.ToGigaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(35.6, 0.0356)]
		[TestCase(100.23, 0.10023)]
		[TestCase(900100.0, 900.1)]
		public void ConvertKnownGigaBytesPerSecondToTeraBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBytesPerSecond.ToTeraBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBytesPerSecondToKibibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBytesPerSecond.ToKibibitsPerSecond(value);
				var convertBack = DataTransferRate.KibibitsPerSecond.ToGigaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.05, 390625.0)]
		[TestCase(0.008, 62500.0)]
		[TestCase(0.00123, 9609.375)]
		public void ConvertKnownGigaBytesPerSecondToKibibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBytesPerSecond.ToKibibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromGigaBytesPerSecondToMebibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.GigaBytesPerSecond.ToMebibitsPerSecond(value);
				var convertBack = DataTransferRate.MebibitsPerSecond.ToGigaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 68.66451)]
		[TestCase(1.2, 9155.268)]
		[TestCase(19.2, 146484.288)]
		public void ConvertKnownGigaBytesPerSecondToMebibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.GigaBytesPerSecond.ToMebibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class KibibitsPerSecondTests
	{
		[Property]
		public void FromKibibitsPerSecondToBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KibibitsPerSecond.ToBitsPerSecond(value);
				var convertBack = DataTransferRate.BitsPerSecond.ToKibibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.0, 2048.0)]
		[TestCase(9.0, 9216.0)]
		[TestCase(17.8, 18227.2)]
		public void ConvertKnownKibibitsPerSecondToBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KibibitsPerSecond.ToBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsPerSecondToKiloBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KibibitsPerSecond.ToKiloBitsPerSecond(value);
				var convertBack = DataTransferRate.KiloBitsPerSecond.ToKibibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.2, 6.3488)]
		[TestCase(0.9, 0.9216)]
		[TestCase(87.0, 89.088)]
		public void ConvertKnownKibibitsPerSecondToKiloBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KibibitsPerSecond.ToKiloBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsPerSecondToMegaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KibibitsPerSecond.ToMegaBitsPerSecond(value);
				var convertBack = DataTransferRate.MegaBitsPerSecond.ToKibibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(87.0, 0.089088)]
		[TestCase(12.34, 0.01263616)]
		[TestCase(123456.0, 126.418879)]
		public void ConvertKnownKibibitsPerSecondToMegaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KibibitsPerSecond.ToMegaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsPerSecondToGigaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KibibitsPerSecond.ToGigaBitsPerSecond(value);
				var convertBack = DataTransferRate.GigaBitsPerSecond.ToKibibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123456.0, 0.126418944)]
		[TestCase(8000000.0, 8.192)]
		[TestCase(1276876.0, 1.307521024)]
		public void ConvertKnownKibibitsPerSecondToGigaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KibibitsPerSecond.ToGigaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsPerSecondToTeraBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KibibitsPerSecond.ToTeraBitsPerSecond(value);
				var convertBack = DataTransferRate.TeraBitsPerSecond.ToKibibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(800000000.0, 0.8192)]
		[TestCase(1.5e12, 1536.0)]
		[TestCase(9999999.0, 0.01023999898)]
		public void ConvertKnownKibibitsPerSecondToTeraBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KibibitsPerSecond.ToTeraBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsPerSecondToKiloBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KibibitsPerSecond.ToKiloBytesPerSecond(value);
				var convertBack = DataTransferRate.KiloBytesPerSecond.ToKibibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(919.0, 117.632)]
		[TestCase(77.4, 9.9072)]
		[TestCase(109.109, 13.965952)]
		public void ConvertKnownKibibitsPerSecondToKiloBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KibibitsPerSecond.ToKiloBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsPerSecondToMegaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KibibitsPerSecond.ToMegaBytesPerSecond(value);
				var convertBack = DataTransferRate.MegaBytesPerSecond.ToKibibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1000.0, 0.128)]
		[TestCase(800.123, 0.102415744)]
		[TestCase(123456.0, 15.802368)]
		public void ConvertKnownKibibitsPerSecondToMegaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KibibitsPerSecond.ToMegaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsPerSecondToGigaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KibibitsPerSecond.ToGigaBytesPerSecond(value);
				var convertBack = DataTransferRate.GigaBytesPerSecond.ToKibibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12345678.0, 1.580347926)]
		[TestCase(8e12, 1024000.00)]
		[TestCase(1.2e5, 0.01536)]
		public void ConvertKnownKibibitsPerSecondToGigaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KibibitsPerSecond.ToGigaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsPerSecondToTeraBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KibibitsPerSecond.ToTeraBytesPerSecond(value);
				var convertBack = DataTransferRate.TeraBytesPerSecond.ToKibibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(120000000.0, 0.01536)]
		[TestCase(88e12, 11264.0)]
		[TestCase(9000000.0, 0.009216)]
		public void ConvertKnownKibibitsPerSecondToTeraBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KibibitsPerSecond.ToTeraBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKibibitsPerSecondToMebibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KibibitsPerSecond.ToMebibitsPerSecond(value);
				var convertBack = DataTransferRate.MebibitsPerSecond.ToKibibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(600.0, 0.5859375)]
		[TestCase(12345.0, 12.055664)]
		[TestCase(101.0, 0.0986328)]
		public void ConvertKnownKibibitsPerSecondToMebibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KibibitsPerSecond.ToMebibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class KiloBitsPerSecondTests
	{
		[Property]
		public void FromKiloBitsPerSecondToBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBitsPerSecond.ToBitsPerSecond(value);
				var convertBack = DataTransferRate.BitsPerSecond.ToKiloBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9.0, 9000.0)]
		[TestCase(6.7, 6700.0)]
		[TestCase(1.2345, 1234.5)]
		public void ConvertKnownKiloBitsPerSecondToBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBitsPerSecond.ToBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBitsPerSecondToMegaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBitsPerSecond.ToMegaBitsPerSecond(value);
				var convertBack = DataTransferRate.MegaBitsPerSecond.ToKiloBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 0.9)]
		[TestCase(12345.0, 12.345)]
		[TestCase(9988.0, 9.988)]
		public void ConvertKnownKiloBitsPerSecondToMegaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBitsPerSecond.ToMegaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBitsPerSecondToGigaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBitsPerSecond.ToGigaBitsPerSecond(value);
				var convertBack = DataTransferRate.GigaBitsPerSecond.ToKiloBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123456.0, 0.123456)]
		[TestCase(8000700.0, 8.0007)]
		[TestCase(191987578.0, 191.987578)]
		public void ConvertKnownKiloBitsPerSecondToGigaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBitsPerSecond.ToGigaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBitsPerSecondToTeraBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBitsPerSecond.ToTeraBitsPerSecond(value);
				var convertBack = DataTransferRate.TeraBitsPerSecond.ToKiloBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(191987578.0, 0.191987578)]
		[TestCase(9010081903.0, 9.010081903)]
		[TestCase(123456789.0, 0.123456789)]
		public void ConvertKnownKiloBitsPerSecondToTeraBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBitsPerSecond.ToTeraBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBitsPerSecondToKiloBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBitsPerSecond.ToKiloBytesPerSecond(value);
				var convertBack = DataTransferRate.KiloBytesPerSecond.ToKiloBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(80.0, 10.0)]
		[TestCase(15.67, 1.95875)]
		[TestCase(8007.09, 1000.88625)]
		public void ConvertKnownKiloBitsPerSecondToKiloBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBitsPerSecond.ToKiloBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBitsPerSecondToMegaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBitsPerSecond.ToMegaBytesPerSecond(value);
				var convertBack = DataTransferRate.MegaBytesPerSecond.ToKiloBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123456.0, 15.432)]
		[TestCase(998877.0, 124.859625)]
		[TestCase(10090.0, 1.26125)]
		public void ConvertKnownKiloBitsPerSecondToMegaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBitsPerSecond.ToMegaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBitsPerSecondToGigaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBitsPerSecond.ToGigaBytesPerSecond(value);
				var convertBack = DataTransferRate.GigaBytesPerSecond.ToKiloBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1828972.0, 0.2286215)]
		[TestCase(879860.8, 0.1099826)]
		[TestCase(78178971.0, 9.772371375)]
		public void ConvertKnownKiloBitsPerSecondToGigaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBitsPerSecond.ToGigaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBitsPerSecondToTeraBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBitsPerSecond.ToTeraBytesPerSecond(value);
				var convertBack = DataTransferRate.TeraBytesPerSecond.ToKiloBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1234567891.0, 0.154320986375)]
		[TestCase(999999098.0, 0.12499988725)]
		[TestCase(84618364142.0, 10.57729551775)]
		public void ConvertKnownKiloBitsPerSecondToTeraBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBitsPerSecond.ToTeraBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBitsPerSecondToKibibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBitsPerSecond.ToKibibitsPerSecond(value);
				var convertBack = DataTransferRate.KibibitsPerSecond.ToKiloBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(89.1, 87.01172)]
		[TestCase(7.1, 6.93359)]
		[TestCase(438.0, 427.734)]
		public void ConvertKnownKiloBitsPerSecondToKibibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBitsPerSecond.ToKibibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBitsPerSecondToMebibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBitsPerSecond.ToMebibitsPerSecond(value);
				var convertBack = DataTransferRate.MebibitsPerSecond.ToKiloBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(77790.0, 74.186325)]
		[TestCase(123456.0, 117.736816)]
		[TestCase(23972.0, 22.861481)]
		public void ConvertKnownKiloBitsPerSecondToMebibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBitsPerSecond.ToMebibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class KiloBytesPerSecondTests
	{
		[Property]
		public void FromKiloBytesPerSecondToBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBytesPerSecond.ToBitsPerSecond(value);
				var convertBack = DataTransferRate.BitsPerSecond.ToKiloBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123.456, 987648.0)]
		[TestCase(900.0, 7.2e+6)]
		[TestCase(100200.0, 801600000.0)]
		public void ConvertKnownKiloBytesPerSecondToBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBytesPerSecond.ToBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBytesPerSecondToKiloBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBytesPerSecond.ToKiloBitsPerSecond(value);
				var convertBack = DataTransferRate.KiloBitsPerSecond.ToKiloBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.0, 32.0)]
		[TestCase(1.2, 9.6)]
		[TestCase(88.1, 704.8)]
		public void ConvertKnownKiloBytesPerSecondToKiloBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBytesPerSecond.ToKiloBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBytesPerSecondToMegaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBytesPerSecond.ToMegaBitsPerSecond(value);
				var convertBack = DataTransferRate.MegaBitsPerSecond.ToKiloBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(88.1, 0.7048)]
		[TestCase(7.1, 0.0568)]
		[TestCase(12.8, 0.1024)]
		public void ConvertKnownKiloBytesPerSecondToMegaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBytesPerSecond.ToMegaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBytesPerSecondToGigaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBytesPerSecond.ToGigaBitsPerSecond(value);
				var convertBack = DataTransferRate.GigaBitsPerSecond.ToKiloBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(10080.0, 0.08064)]
		[TestCase(4.5e+9, 36000.0)]
		[TestCase(271279.0, 2.170232)]
		public void ConvertKnownKiloBytesPerSecondToGigaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBytesPerSecond.ToGigaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBytesPerSecondToTeraBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBytesPerSecond.ToTeraBitsPerSecond(value);
				var convertBack = DataTransferRate.TeraBitsPerSecond.ToKiloBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9009000.0, 0.072072)]
		[TestCase(7.2e9, 57.6)]
		[TestCase(100100100900.0, 800.8008072)]
		public void ConvertKnownKiloBytesPerSecondToTeraBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBytesPerSecond.ToTeraBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBytesPerSecondToMegaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBytesPerSecond.ToMegaBytesPerSecond(value);
				var convertBack = DataTransferRate.MegaBytesPerSecond.ToKiloBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1009.0, 1.009)]
		[TestCase(8899.0, 8.899)]
		[TestCase(619.0, 0.619)]
		public void ConvertKnownKiloBytesPerSecondToMegaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBytesPerSecond.ToMegaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBytesPerSecondToGigaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBytesPerSecond.ToGigaBytesPerSecond(value);
				var convertBack = DataTransferRate.GigaBytesPerSecond.ToKiloBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900800.0, 0.9008)]
		[TestCase(1234567.0, 1.234567)]
		[TestCase(7.9e9, 7900.0)]
		public void ConvertKnownKiloBytesPerSecondToGigaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBytesPerSecond.ToGigaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBytesPerSecondToTeraBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBytesPerSecond.ToTeraBytesPerSecond(value);
				var convertBack = DataTransferRate.TeraBytesPerSecond.ToKiloBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 9e-10)]
		[TestCase(140000000.0, 0.14)]
		[TestCase(7.0, 7e-9)]
		public void ConvertKnownKiloBytesPerSecondToTeraBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBytesPerSecond.ToTeraBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBytesPerSecondToKibibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBytesPerSecond.ToKibibitsPerSecond(value);
				var convertBack = DataTransferRate.KibibitsPerSecond.ToKiloBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 0.0703125)]
		[TestCase(6e+3, 46872.0)]
		[TestCase(1.23, 9.609375)]
		public void ConvertKnownKiloBytesPerSecondToKibibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBytesPerSecond.ToKibibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKiloBytesPerSecondToMebibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.KiloBytesPerSecond.ToMebibitsPerSecond(value);
				var convertBack = DataTransferRate.MebibitsPerSecond.ToKiloBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(70.0, 0.534058)]
		[TestCase(9.0, 0.0686646)]
		[TestCase(10022.0, 76.461792)]
		public void ConvertKnownKiloBytesPerSecondToMebibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.KiloBytesPerSecond.ToMebibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class MebibitsPerSecondTests
	{
		[Property]
		public void FromMebibitsPerSecondToBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MebibitsPerSecond.ToBitsPerSecond(value);
				var convertBack = DataTransferRate.BitsPerSecond.ToMebibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 943718.4)]
		[TestCase(0.006, 6291.456)]
		[TestCase(2.0, 2097152.0)]
		public void ConvertKnownMebibitsPerSecondToBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MebibitsPerSecond.ToBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsPerSecondToKiloBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MebibitsPerSecond.ToKiloBitsPerSecond(value);
				var convertBack = DataTransferRate.KiloBitsPerSecond.ToMebibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.8, 838.861)]
		[TestCase(2.0, 2097.15)]
		[TestCase(0.23, 241.1725)]
		public void ConvertKnownMebibitsPerSecondToKiloBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MebibitsPerSecond.ToKiloBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsPerSecondToMegaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MebibitsPerSecond.ToMegaBitsPerSecond(value);
				var convertBack = DataTransferRate.MegaBitsPerSecond.ToMebibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 0.943718)]
		[TestCase(12.3, 12.89748)]
		[TestCase(8.1, 8.49347)]
		public void ConvertKnownMebibitsPerSecondToMegaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MebibitsPerSecond.ToMegaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsPerSecondToGigaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MebibitsPerSecond.ToGigaBitsPerSecond(value);
				var convertBack = DataTransferRate.GigaBitsPerSecond.ToMebibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12345.0, 12.944671)]
		[TestCase(100.0, 0.104858)]
		[TestCase(999.9, 1.0484711)]
		public void ConvertKnownMebibitsPerSecondToGigaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MebibitsPerSecond.ToGigaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsPerSecondToTeraBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MebibitsPerSecond.ToTeraBitsPerSecond(value);
				var convertBack = DataTransferRate.TeraBitsPerSecond.ToMebibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100009.0, 0.104867037)]
		[TestCase(9876543.0, 10.35630595)]
		[TestCase(1000900.0, 1.049519718)]
		public void ConvertKnownMebibitsPerSecondToTeraBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MebibitsPerSecond.ToTeraBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsPerSecondToKiloBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MebibitsPerSecond.ToKiloBytesPerSecond(value);
				var convertBack = DataTransferRate.KiloBytesPerSecond.ToMebibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.0, 524.288)]
		[TestCase(1.45, 190.0544)]
		[TestCase(88.11, 11548.754)]
		public void ConvertKnownMebibitsPerSecondToKiloBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MebibitsPerSecond.ToKiloBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsPerSecondToMegaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MebibitsPerSecond.ToMegaBytesPerSecond(value);
				var convertBack = DataTransferRate.MegaBytesPerSecond.ToMebibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.0, 14.2868)]
		[TestCase(55.67, 7.2967782)]
		[TestCase(45678.0, 5987.1068)]
		public void ConvertKnownMebibitsPerSecondToMegaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MebibitsPerSecond.ToMegaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsPerSecondToGigaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MebibitsPerSecond.ToGigaBytesPerSecond(value);
				var convertBack = DataTransferRate.GigaBytesPerSecond.ToMebibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4000.0, 0.524288311)]
		[TestCase(90100.0, 11.80959421)]
		[TestCase(1009.0, 0.132251727)]
		public void ConvertKnownMebibitsPerSecondToGigaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MebibitsPerSecond.ToGigaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsPerSecondToTeraBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MebibitsPerSecond.ToTeraBytesPerSecond(value);
				var convertBack = DataTransferRate.TeraBytesPerSecond.ToMebibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1000009.0, 0.1310731796)]
		[TestCase(90808080.0, 11.902396662)]
		[TestCase(5.2e12, 681574.4)]
		public void ConvertKnownMebibitsPerSecondToTeraBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MebibitsPerSecond.ToTeraBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMebibitsPerSecondToKibibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MebibitsPerSecond.ToKibibitsPerSecond(value);
				var convertBack = DataTransferRate.KibibitsPerSecond.ToMebibitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 5120.0)]
		[TestCase(1234.56, 1264189.44)]
		[TestCase(505.0, 517120.0)]
		public void ConvertKnownMebibitsPerSecondToKibibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MebibitsPerSecond.ToKibibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class MegaBitsPerSecondTests
	{
		[Property]
		public void FromMegaBitsPerSecondToBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBitsPerSecond.ToBitsPerSecond(value);
				var convertBack = DataTransferRate.BitsPerSecond.ToMegaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.34, 340000.0)]
		[TestCase(9.12, 9120000.0)]
		[TestCase(0.987, 987000.0)]
		public void ConvertKnownMegaBitsPerSecondToBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBitsPerSecond.ToBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBitsPerSecondToKiloBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBitsPerSecond.ToKiloBitsPerSecond(value);
				var convertBack = DataTransferRate.KiloBitsPerSecond.ToMegaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.77, 770.0)]
		[TestCase(5.0, 5000.0)]
		[TestCase(0.987, 987.0)]
		public void ConvertKnownMegaBitsPerSecondToKiloBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBitsPerSecond.ToKiloBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBitsPerSecondToGigaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBitsPerSecond.ToGigaBitsPerSecond(value);
				var convertBack = DataTransferRate.GigaBitsPerSecond.ToMegaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 0.9)]
		[TestCase(12345.0, 12.345)]
		[TestCase(189.1, 0.1891)]
		public void ConvertKnownMegaBitsPerSecondToGigaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBitsPerSecond.ToGigaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBitsPerSecondToTeraBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBitsPerSecond.ToTeraBitsPerSecond(value);
				var convertBack = DataTransferRate.TeraBitsPerSecond.ToMegaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100200300.0, 100.2003)]
		[TestCase(99887777.0, 99.887777)]
		[TestCase(80009.0, 0.080009)]
		public void ConvertKnownMegaBitsPerSecondToTeraBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBitsPerSecond.ToTeraBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBitsPerSecondToKiloBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBitsPerSecond.ToKiloBytesPerSecond(value);
				var convertBack = DataTransferRate.KiloBytesPerSecond.ToMegaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9.0, 1125.0)]
		[TestCase(1.23, 153.75)]
		[TestCase(98.1, 12262.5)]
		public void ConvertKnownMegaBitsPerSecondToKiloBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBitsPerSecond.ToKiloBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBitsPerSecondToMegaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBitsPerSecond.ToMegaBytesPerSecond(value);
				var convertBack = DataTransferRate.MegaBytesPerSecond.ToMegaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(98.1, 12.2625)]
		[TestCase(10.9, 1.3625)]
		[TestCase(888.123, 111.015375)]
		public void ConvertKnownMegaBitsPerSecondToMegaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBitsPerSecond.ToMegaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBitsPerSecondToGigaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBitsPerSecond.ToGigaBytesPerSecond(value);
				var convertBack = DataTransferRate.GigaBytesPerSecond.ToMegaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 0.1125)]
		[TestCase(10123.0, 1.265375)]
		[TestCase(9988.0, 1.2485)]
		public void ConvertKnownMegaBitsPerSecondToGigaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBitsPerSecond.ToGigaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBitsPerSecondToTeraBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBitsPerSecond.ToTeraBytesPerSecond(value);
				var convertBack = DataTransferRate.TeraBytesPerSecond.ToMegaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(998877.0, 0.124859625)]
		[TestCase(100200400.0, 12.5250375)]
		[TestCase(9008877.0, 1.126109625)]
		public void ConvertKnownMegaBitsPerSecondToTeraBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBitsPerSecond.ToTeraBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBitsPerSecondToKibibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBitsPerSecond.ToKibibitsPerSecond(value);
				var convertBack = DataTransferRate.KibibitsPerSecond.ToMegaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 11718.756)]
		[TestCase(0.9, 878.906)]
		[TestCase(1.23, 1201.172)]
		public void ConvertKnownMegaBitsPerSecondToKibibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBitsPerSecond.ToKibibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBitsPerSecondToMebibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBitsPerSecond.ToMebibitsPerSecond(value);
				var convertBack = DataTransferRate.MebibitsPerSecond.ToMegaBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(4.5, 4.29153)]
		[TestCase(0.8, 0.762939)]
		[TestCase(900.0, 858.307)]
		public void ConvertKnownMegaBitsPerSecondToMebibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBitsPerSecond.ToMebibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class MegaBytesPerSecondTests
	{
		[Property]
		public void FromMegaBytesPerSecondToBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBytesPerSecond.ToBitsPerSecond(value);
				var convertBack = DataTransferRate.BitsPerSecond.ToMegaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.04, 320000.0)]
		[TestCase(0.0091, 72800.0)]
		[TestCase(3e-5, 240.0)]
		public void ConvertKnownMegaBytesPerSecondToBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBytesPerSecond.ToBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBytesPerSecondToKiloBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBytesPerSecond.ToKiloBitsPerSecond(value);
				var convertBack = DataTransferRate.KiloBitsPerSecond.ToMegaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 48000.0)]
		[TestCase(0.3, 2400.0)]
		[TestCase(0.009, 72.0)]
		public void ConvertKnownMegaBytesPerSecondToKiloBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBytesPerSecond.ToKiloBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBytesPerSecondToMegaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBytesPerSecond.ToMegaBitsPerSecond(value);
				var convertBack = DataTransferRate.MegaBitsPerSecond.ToMegaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.0, 24.0)]
		[TestCase(0.9, 7.2)]
		[TestCase(13.0, 104.0)]
		public void ConvertKnownMegaBytesPerSecondToMegaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBytesPerSecond.ToMegaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBytesPerSecondToGigaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBytesPerSecond.ToGigaBitsPerSecond(value);
				var convertBack = DataTransferRate.GigaBitsPerSecond.ToMegaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(13.0, 0.104)]
		[TestCase(900.0, 7.2)]
		[TestCase(18000.0, 144.0)]
		public void ConvertKnownMegaBytesPerSecondToGigaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBytesPerSecond.ToGigaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBytesPerSecondToTeraBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBytesPerSecond.ToTeraBitsPerSecond(value);
				var convertBack = DataTransferRate.TeraBitsPerSecond.ToMegaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(18000.0, 0.144)]
		[TestCase(9718290.0, 77.74632)]
		[TestCase(9e12, 72000000.0)]
		public void ConvertKnownMegaBytesPerSecondToTeraBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBytesPerSecond.ToTeraBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBytesPerSecondToKiloBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBytesPerSecond.ToKiloBytesPerSecond(value);
				var convertBack = DataTransferRate.KiloBytesPerSecond.ToMegaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 6000.0)]
		[TestCase(0.9, 900.0)]
		[TestCase(123.4, 123400.0)]
		public void ConvertKnownMegaBytesPerSecondToKiloBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBytesPerSecond.ToKiloBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBytesPerSecondToGigaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBytesPerSecond.ToGigaBytesPerSecond(value);
				var convertBack = DataTransferRate.GigaBytesPerSecond.ToMegaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123.4, 0.1234)]
		[TestCase(900.0, 0.9)]
		[TestCase(8e6, 8000.0)]
		public void ConvertKnownMegaBytesPerSecondToGigaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBytesPerSecond.ToGigaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBytesPerSecondToTeraBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBytesPerSecond.ToTeraBytesPerSecond(value);
				var convertBack = DataTransferRate.TeraBytesPerSecond.ToMegaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(80000.0, 0.08)]
		[TestCase(12345678.0, 12.345678)]
		[TestCase(900800.0, 0.9008)]
		public void ConvertKnownMegaBytesPerSecondToTeraBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBytesPerSecond.ToTeraBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBytesPerSecondToKibibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBytesPerSecond.ToKibibitsPerSecond(value);
				var convertBack = DataTransferRate.KibibitsPerSecond.ToMegaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(6.0, 46875.0)]
		[TestCase(0.9, 7031.25)]
		[TestCase(0.03, 234.375)]
		public void ConvertKnownMegaBytesPerSecondToKibibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBytesPerSecond.ToKibibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMegaBytesPerSecondToMebibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.MegaBytesPerSecond.ToMebibitsPerSecond(value);
				var convertBack = DataTransferRate.MebibitsPerSecond.ToMegaBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.03, 0.2288818)]
		[TestCase(4.5, 34.3323)]
		[TestCase(80.1, 611.1145)]
		public void ConvertKnownMegaBytesPerSecondToMebibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.MegaBytesPerSecond.ToMebibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class TeraBitsPerSecondTests
	{
		[Property]
		public void FromTeraBitsPerSecondToBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBitsPerSecond.ToBitsPerSecond(value);
				var convertBack = DataTransferRate.BitsPerSecond.ToTeraBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0007, 700000000.0)]
		[TestCase(1.23e-6, 1230000.0)]
		[TestCase(0.00098, 980000000.0)]
		public void ConvertKnownTeraBitsPerSecondToBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBitsPerSecond.ToBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBitsPerSecondToKiloBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBitsPerSecond.ToKiloBitsPerSecond(value);
				var convertBack = DataTransferRate.KiloBitsPerSecond.ToTeraBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.001, 1000000.0)]
		[TestCase(6.1e-6, 6100.0)]
		[TestCase(0.00009, 90000.0)]
		public void ConvertKnownTeraBitsPerSecondToKiloBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBitsPerSecond.ToKiloBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBitsPerSecondToMegaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBitsPerSecond.ToMegaBitsPerSecond(value);
				var convertBack = DataTransferRate.MegaBitsPerSecond.ToTeraBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.09, 90000.0)]
		[TestCase(3.5e-4, 350.0)]
		[TestCase(0.0123, 12300.0)]
		public void ConvertKnownTeraBitsPerSecondToMegaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBitsPerSecond.ToMegaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBitsPerSecondToGigaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBitsPerSecond.ToGigaBitsPerSecond(value);
				var convertBack = DataTransferRate.GigaBitsPerSecond.ToTeraBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 900.0)]
		[TestCase(1.45, 1450.0)]
		[TestCase(8.19, 8190.0)]
		public void ConvertKnownTeraBitsPerSecondToGigaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBitsPerSecond.ToGigaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBitsPerSecondToKiloBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBitsPerSecond.ToKiloBytesPerSecond(value);
				var convertBack = DataTransferRate.KiloBytesPerSecond.ToTeraBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0009, 112500.0)]
		[TestCase(3.14e-6, 392.5)]
		[TestCase(0.001, 125000.0)]
		public void ConvertKnownTeraBitsPerSecondToKiloBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBitsPerSecond.ToKiloBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBitsPerSecondToMegaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBitsPerSecond.ToMegaBytesPerSecond(value);
				var convertBack = DataTransferRate.MegaBytesPerSecond.ToTeraBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.4, 50000.0)]
		[TestCase(3.9e-3, 487.5)]
		[TestCase(0.007, 875.0)]
		public void ConvertKnownTeraBitsPerSecondToMegaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBitsPerSecond.ToMegaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBitsPerSecondToGigaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBitsPerSecond.ToGigaBytesPerSecond(value);
				var convertBack = DataTransferRate.GigaBytesPerSecond.ToTeraBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 1.125)]
		[TestCase(0.00123, 0.15375)]
		[TestCase(8.1e-3, 1.0125)]
		public void ConvertKnownTeraBitsPerSecondToGigaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBitsPerSecond.ToGigaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBitsPerSecondToTeraBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBitsPerSecond.ToTeraBytesPerSecond(value);
				var convertBack = DataTransferRate.TeraBytesPerSecond.ToTeraBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.3, 0.0375)]
		[TestCase(14.0, 1.75)]
		[TestCase(0.8, 0.1)]
		public void ConvertKnownTeraBitsPerSecondToTeraBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBitsPerSecond.ToTeraBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBitsPerSecondToKibibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBitsPerSecond.ToKibibitsPerSecond(value);
				var convertBack = DataTransferRate.KibibitsPerSecond.ToTeraBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0009, 878906.25)]
		[TestCase(6.1e-6, 5957.031)]
		[TestCase(12e-9, 11.71875)]
		public void ConvertKnownTeraBitsPerSecondToKibibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBitsPerSecond.ToKibibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBitsPerSecondToMebibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBitsPerSecond.ToMebibitsPerSecond(value);
				var convertBack = DataTransferRate.MebibitsPerSecond.ToTeraBitsPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 858306.59999)]
		[TestCase(4.6e-3, 4386.9)]
		[TestCase(0.00123, 1173.0194092)]
		public void ConvertKnownTeraBitsPerSecondToMebibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBitsPerSecond.ToMebibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class TeraBytesPerSecondTests
	{
		[Property]
		public void FromTeraBytesPerSecondToBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBytesPerSecond.ToBitsPerSecond(value);
				var convertBack = DataTransferRate.BitsPerSecond.ToTeraBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.00008, 640000000.0)]
		[TestCase(1.2e-12, 9.6)]
		[TestCase(9.0, 7.2e+13)]
		public void ConvertKnownTeraBytesPerSecondToBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBytesPerSecond.ToBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBytesPerSecondToKiloBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBytesPerSecond.ToKiloBitsPerSecond(value);
				var convertBack = DataTransferRate.KiloBitsPerSecond.ToTeraBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 72000000.0)]
		[TestCase(1.4e-6, 11200.0)]
		[TestCase(6.1e-5, 488000.0)]
		public void ConvertKnownTeraBytesPerSecondToKiloBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBytesPerSecond.ToKiloBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBytesPerSecondToMegaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBytesPerSecond.ToMegaBitsPerSecond(value);
				var convertBack = DataTransferRate.MegaBitsPerSecond.ToTeraBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.005, 40000.0)]
		[TestCase(0.000123, 984.0)]
		[TestCase(0.00006, 480.0)]
		public void ConvertKnownTeraBytesPerSecondToMegaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBytesPerSecond.ToMegaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBytesPerSecondToGigaBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBytesPerSecond.ToGigaBitsPerSecond(value);
				var convertBack = DataTransferRate.GigaBitsPerSecond.ToTeraBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.008, 64.0)]
		[TestCase(3e-7, 0.0024)]
		[TestCase(0.00023, 1.84)]
		public void ConvertKnownTeraBytesPerSecondToGigaBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBytesPerSecond.ToGigaBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBytesPerSecondToTeraBitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBytesPerSecond.ToTeraBitsPerSecond(value);
				var convertBack = DataTransferRate.TeraBitsPerSecond.ToTeraBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(5.0, 40.0)]
		[TestCase(1.23, 9.84)]
		[TestCase(800.0, 6400.0)]
		public void ConvertKnownTeraBytesPerSecondToTeraBitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBytesPerSecond.ToTeraBitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBytesPerSecondToKiloBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBytesPerSecond.ToKiloBytesPerSecond(value);
				var convertBack = DataTransferRate.KiloBytesPerSecond.ToTeraBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0009, 900000.0)]
		[TestCase(3.14e-7, 314.0)]
		[TestCase(0.00063, 630000.0)]
		public void ConvertKnownTeraBytesPerSecondToKiloBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBytesPerSecond.ToKiloBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBytesPerSecondToMegaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBytesPerSecond.ToMegaBytesPerSecond(value);
				var convertBack = DataTransferRate.MegaBytesPerSecond.ToTeraBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.009, 9000.0)]
		[TestCase(0.234, 234000.0)]
		[TestCase(2.0, 2e+6)]
		public void ConvertKnownTeraBytesPerSecondToMegaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBytesPerSecond.ToMegaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBytesPerSecondToGigaBytesPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBytesPerSecond.ToGigaBytesPerSecond(value);
				var convertBack = DataTransferRate.GigaBytesPerSecond.ToTeraBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.7, 2700.0)]
		[TestCase(0.9, 900.0)]
		[TestCase(0.0123, 12.3)]
		public void ConvertKnownTeraBytesPerSecondToGigaBytesPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBytesPerSecond.ToGigaBytesPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBytesPerSecondToKibibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBytesPerSecond.ToKibibitsPerSecond(value);
				var convertBack = DataTransferRate.KibibitsPerSecond.ToTeraBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.0009, 7031250.0)]
		[TestCase(1.23e-5, 96093.75)]
		[TestCase(0.0001, 781250.0)]
		public void ConvertKnownTeraBytesPerSecondToKibibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBytesPerSecond.ToKibibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTeraBytesPerSecondToMebibitsPerSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = DataTransferRate.TeraBytesPerSecond.ToMebibitsPerSecond(value);
				var convertBack = DataTransferRate.MebibitsPerSecond.ToTeraBytesPerSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.01, 76293.95)]
		[TestCase(0.008, 61035.156)]
		[TestCase(2.0, 15258789.0625)]
		public void ConvertKnownTeraBytesPerSecondToMebibitsPerSecond(double input, double expectation)
		{
			var result = DataTransferRate.TeraBytesPerSecond.ToMebibitsPerSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
}
