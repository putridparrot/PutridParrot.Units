// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

using NUnit.Framework;
using FsCheck;
using PropertyAttribute = FsCheck.NUnit.PropertyAttribute;

namespace PutridParrot.Units.Tests
{
	public class LumenHourTests
	{
		[Property]
		public void FromLumenHourToTalbotAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = LuminousEnergy.LumenHour.ToTalbot(value);
				var convertBack = LuminousEnergy.Talbot.ToLumenHour(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9.0, 32400.0)]
		[TestCase(1.2, 4320.0)]
		[TestCase(4.0, 14400.0)]
		public void ConvertKnownLumenHourToTalbot(double input, double expectation)
		{
			var result = LuminousEnergy.LumenHour.ToTalbot(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLumenHourToLumenMinuteAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = LuminousEnergy.LumenHour.ToLumenMinute(value);
				var convertBack = LuminousEnergy.LumenMinute.ToLumenHour(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.2, 72.0)]
		[TestCase(0.8, 48.0)]
		[TestCase(109.00, 6540)]
		public void ConvertKnownLumenHourToLumenMinute(double input, double expectation)
		{
			var result = LuminousEnergy.LumenHour.ToLumenMinute(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLumenHourToLumenSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = LuminousEnergy.LumenHour.ToLumenSecond(value);
				var convertBack = LuminousEnergy.LumenSecond.ToLumenHour(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109.0, 392400.0)]
		[TestCase(6.1, 21960.0)]
		[TestCase(0.7, 2520.0)]
		public void ConvertKnownLumenHourToLumenSecond(double input, double expectation)
		{
			var result = LuminousEnergy.LumenHour.ToLumenSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class LumenMinuteTests
	{
		[Property]
		public void FromLumenMinuteToTalbotAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = LuminousEnergy.LumenMinute.ToTalbot(value);
				var convertBack = LuminousEnergy.Talbot.ToLumenMinute(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.7, 42.0)]
		[TestCase(678.0, 40680.0)]
		[TestCase(89.0, 5340.0)]
		public void ConvertKnownLumenMinuteToTalbot(double input, double expectation)
		{
			var result = LuminousEnergy.LumenMinute.ToTalbot(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLumenMinuteToLumenHourAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = LuminousEnergy.LumenMinute.ToLumenHour(value);
				var convertBack = LuminousEnergy.LumenHour.ToLumenMinute(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(89.0, 1.4833)]
		[TestCase(9.0, 0.15)]
		[TestCase(0.123, 0.00205)]
		public void ConvertKnownLumenMinuteToLumenHour(double input, double expectation)
		{
			var result = LuminousEnergy.LumenMinute.ToLumenHour(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLumenMinuteToLumenSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = LuminousEnergy.LumenMinute.ToLumenSecond(value);
				var convertBack = LuminousEnergy.LumenSecond.ToLumenMinute(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.123, 7.38)]
		[TestCase(8000.0, 480000.0)]
		[TestCase(34.1, 2046.0)]
		public void ConvertKnownLumenMinuteToLumenSecond(double input, double expectation)
		{
			var result = LuminousEnergy.LumenMinute.ToLumenSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class LumenSecondTests
	{
		[Property]
		public void FromLumenSecondToTalbotAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = LuminousEnergy.LumenSecond.ToTalbot(value);
				var convertBack = LuminousEnergy.Talbot.ToLumenSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(190.0, 190.0)]
		[TestCase(0.6, 0.6)]
		[TestCase(5000.0, 5000.0)]
		public void ConvertKnownLumenSecondToTalbot(double input, double expectation)
		{
			var result = LuminousEnergy.LumenSecond.ToTalbot(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLumenSecondToLumenHourAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = LuminousEnergy.LumenSecond.ToLumenHour(value);
				var convertBack = LuminousEnergy.LumenHour.ToLumenSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(190.0, 0.052778)]
		[TestCase(200600.0, 55.7222)]
		[TestCase(1234.0, 0.342778)]
		public void ConvertKnownLumenSecondToLumenHour(double input, double expectation)
		{
			var result = LuminousEnergy.LumenSecond.ToLumenHour(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromLumenSecondToLumenMinuteAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = LuminousEnergy.LumenSecond.ToLumenMinute(value);
				var convertBack = LuminousEnergy.LumenMinute.ToLumenSecond(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(10900.0, 181.6667)]
		[TestCase(50.3, 0.83833)]
		[TestCase(276.0, 4.6)]
		public void ConvertKnownLumenSecondToLumenMinute(double input, double expectation)
		{
			var result = LuminousEnergy.LumenSecond.ToLumenMinute(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class TalbotTests
	{
		[Property]
		public void FromTalbotToLumenSecondAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = LuminousEnergy.Talbot.ToLumenSecond(value);
				var convertBack = LuminousEnergy.LumenSecond.ToTalbot(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100.0, 100.0)]
		[TestCase(0.9, 0.9)]
		[TestCase(23.1, 23.1)]
		public void ConvertKnownTalbotToLumenSecond(double input, double expectation)
		{
			var result = LuminousEnergy.Talbot.ToLumenSecond(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTalbotToLumenHourAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = LuminousEnergy.Talbot.ToLumenHour(value);
				var convertBack = LuminousEnergy.LumenHour.ToTalbot(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(800.0, 0.222)]
		[TestCase(6789.0, 1.885833)]
		[TestCase(10900.0, 3.027778)]
		public void ConvertKnownTalbotToLumenHour(double input, double expectation)
		{
			var result = LuminousEnergy.Talbot.ToLumenHour(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromTalbotToLumenMinuteAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = LuminousEnergy.Talbot.ToLumenMinute(value);
				var convertBack = LuminousEnergy.LumenMinute.ToTalbot(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 15.0)]
		[TestCase(78.9, 1.315)]
		[TestCase(1500.0, 25.0)]
		public void ConvertKnownTalbotToLumenMinute(double input, double expectation)
		{
			var result = LuminousEnergy.Talbot.ToLumenMinute(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
}
