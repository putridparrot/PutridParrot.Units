/// <summary>
/// Do not change this code, it's generated by the UnitCodeGenerator app.
/// </summary>

using NUnit.Framework;
using FsCheck;
using PropertyAttribute = FsCheck.NUnit.PropertyAttribute;

namespace PutridParrot.Units.Tests;

public class GigahertzTests
{
	[Property]
	public void FromGigahertzToHertzAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Frequency.Gigahertz.ToHertz(value);
			var convertBack = Frequency.Hertz.ToGigahertz(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.009, 9000000.0)]
	[TestCase(0.000123, 123000.0)]
	[TestCase(0.0000456, 45600.0)]
	public void ConvertKnownGigahertzToHertz(double input, double expectation)
	{
		var result = Frequency.Gigahertz.ToHertz(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGigahertzToKilohertzAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Frequency.Gigahertz.ToKilohertz(value);
			var convertBack = Frequency.Kilohertz.ToGigahertz(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.009, 9000.0)]
	[TestCase(1e-5, 10.0)]
	[TestCase(0.000065, 65.0)]
	public void ConvertKnownGigahertzToKilohertz(double input, double expectation)
	{
		var result = Frequency.Gigahertz.ToKilohertz(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromGigahertzToMegahertzAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Frequency.Gigahertz.ToMegahertz(value);
			var convertBack = Frequency.Megahertz.ToGigahertz(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.9, 900.0)]
	[TestCase(0.0123, 12.3)]
	[TestCase(5.0, 5000.0)]
	public void ConvertKnownGigahertzToMegahertz(double input, double expectation)
	{
		var result = Frequency.Gigahertz.ToMegahertz(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class HertzTests
{
	[Property]
	public void FromHertzToKilohertzAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Frequency.Hertz.ToKilohertz(value);
			var convertBack = Frequency.Kilohertz.ToHertz(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(800.0, 0.8)]
	[TestCase(1506.9, 1.5069)]
	[TestCase(5000.0, 5.0)]
	public void ConvertKnownHertzToKilohertz(double input, double expectation)
	{
		var result = Frequency.Hertz.ToKilohertz(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromHertzToMegahertzAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Frequency.Hertz.ToMegahertz(value);
			var convertBack = Frequency.Megahertz.ToHertz(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(900009.0, 0.900009)]
	[TestCase(160000.0, 0.16)]
	[TestCase(888888.0, 0.888888)]
	public void ConvertKnownHertzToMegahertz(double input, double expectation)
	{
		var result = Frequency.Hertz.ToMegahertz(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromHertzToGigahertzAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Frequency.Hertz.ToGigahertz(value);
			var convertBack = Frequency.Gigahertz.ToHertz(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(100900900.0, 0.1009009)]
	[TestCase(9.0, 9e-9)]
	[TestCase(90909090.0, 0.09090909)]
	public void ConvertKnownHertzToGigahertz(double input, double expectation)
	{
		var result = Frequency.Hertz.ToGigahertz(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class KilohertzTests
{
	[Property]
	public void FromKilohertzToHertzAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Frequency.Kilohertz.ToHertz(value);
			var convertBack = Frequency.Hertz.ToKilohertz(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(90.90909, 90909.09)]
	[TestCase(0.12345, 123.45)]
	[TestCase(500.0, 500000.0)]
	public void ConvertKnownKilohertzToHertz(double input, double expectation)
	{
		var result = Frequency.Kilohertz.ToHertz(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilohertzToMegahertzAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Frequency.Kilohertz.ToMegahertz(value);
			var convertBack = Frequency.Megahertz.ToKilohertz(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(909.0, 0.909)]
	[TestCase(123456.0, 123.456)]
	[TestCase(900.0, 0.9)]
	public void ConvertKnownKilohertzToMegahertz(double input, double expectation)
	{
		var result = Frequency.Kilohertz.ToMegahertz(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromKilohertzToGigahertzAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Frequency.Kilohertz.ToGigahertz(value);
			var convertBack = Frequency.Gigahertz.ToKilohertz(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(987654.0, 0.987654)]
	[TestCase(10000.0, 0.01)]
	[TestCase(90090.0, 0.09009)]
	public void ConvertKnownKilohertzToGigahertz(double input, double expectation)
	{
		var result = Frequency.Kilohertz.ToGigahertz(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
public class MegahertzTests
{
	[Property]
	public void FromMegahertzToHertzAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Frequency.Megahertz.ToHertz(value);
			var convertBack = Frequency.Hertz.ToMegahertz(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.9, 900000.0)]
	[TestCase(0.001, 1000.0)]
	[TestCase(0.091, 91000.0)]
	public void ConvertKnownMegahertzToHertz(double input, double expectation)
	{
		var result = Frequency.Megahertz.ToHertz(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMegahertzToKilohertzAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Frequency.Megahertz.ToKilohertz(value);
			var convertBack = Frequency.Kilohertz.ToMegahertz(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(0.87, 870.0)]
	[TestCase(12.0, 12000.0)]
	[TestCase(88.1, 88100.0)]
	public void ConvertKnownMegahertzToKilohertz(double input, double expectation)
	{
		var result = Frequency.Megahertz.ToKilohertz(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

	[Property]
	public void FromMegahertzToGigahertzAndBack()
	{
		Prop.ForAll<int>(value =>
		{
			var convertTo = Frequency.Megahertz.ToGigahertz(value);
			var convertBack = Frequency.Gigahertz.ToMegahertz(convertTo);
			return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
		}).QuickCheckThrowOnFailure();
	}

	[TestCase(798.0, 0.798)]
	[TestCase(900.0, 0.9)]
	[TestCase(579.1, 0.5791)]
	public void ConvertKnownMegahertzToGigahertz(double input, double expectation)
	{
		var result = Frequency.Megahertz.ToGigahertz(input);
		Assert.AreEqual(expectation, result, 0.01);
	}

}
