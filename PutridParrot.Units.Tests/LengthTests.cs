// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

using NUnit.Framework;
using FsCheck;
using PropertyAttribute = FsCheck.NUnit.PropertyAttribute;

namespace PutridParrot.Units.Tests
{
	public class CentimetresTests
	{
		[Property]
		public void FromCentimetresToMillimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Centimetres.ToMillimetres(value);
				var convertBack = Length.Millimetres.ToCentimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 9000.0)]
		[TestCase(34.9, 349.0)]
		[TestCase(2.0, 20.0)]
		public void ConvertKnownCentimetresToMillimetres(double input, double expectation)
		{
			var result = Length.Centimetres.ToMillimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCentimetresToMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Centimetres.ToMetres(value);
				var convertBack = Length.Metres.ToCentimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(13.0, 0.13)]
		[TestCase(3900.0, 39.0)]
		[TestCase(1.0, 0.01)]
		public void ConvertKnownCentimetresToMetres(double input, double expectation)
		{
			var result = Length.Centimetres.ToMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCentimetresToKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Centimetres.ToKilometres(value);
				var convertBack = Length.Kilometres.ToCentimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123456.0, 1.23456)]
		[TestCase(8900.0, 0.089)]
		[TestCase(6009000.0, 60.09)]
		public void ConvertKnownCentimetresToKilometres(double input, double expectation)
		{
			var result = Length.Centimetres.ToKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCentimetresToInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Centimetres.ToInches(value);
				var convertBack = Length.Inches.ToCentimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(600.0, 236.22)]
		[TestCase(12.0, 4.72441)]
		[TestCase(7.8, 3.07087)]
		public void ConvertKnownCentimetresToInches(double input, double expectation)
		{
			var result = Length.Centimetres.ToInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCentimetresToFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Centimetres.ToFeet(value);
				var convertBack = Length.Feet.ToCentimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.3, 0.4035433)]
		[TestCase(89.0, 2.91995)]
		[TestCase(0.7, 0.0229659)]
		public void ConvertKnownCentimetresToFeet(double input, double expectation)
		{
			var result = Length.Centimetres.ToFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCentimetresToYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Centimetres.ToYards(value);
				var convertBack = Length.Yards.ToCentimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(700.0, 7.65529)]
		[TestCase(56.3, 0.6157043)]
		[TestCase(8.0, 0.0874891)]
		public void ConvertKnownCentimetresToYards(double input, double expectation)
		{
			var result = Length.Centimetres.ToYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCentimetresToMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Centimetres.ToMiles(value);
				var convertBack = Length.Miles.ToCentimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(80000.0, 0.49709695)]
		[TestCase(123456.0, 0.767120019)]
		[TestCase(90909090.0, 564.88289639)]
		public void ConvertKnownCentimetresToMiles(double input, double expectation)
		{
			var result = Length.Centimetres.ToMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromCentimetresToNauticalMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Centimetres.ToNauticalMiles(value);
				var convertBack = Length.NauticalMiles.ToCentimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(30000.0, 0.16198704)]
		[TestCase(987654.0, 5.33290497)]
		[TestCase(100200.0, 0.541036717)]
		public void ConvertKnownCentimetresToNauticalMiles(double input, double expectation)
		{
			var result = Length.Centimetres.ToNauticalMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class FeetTests
	{
		[Property]
		public void FromFeetToMillimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Feet.ToMillimetres(value);
				var convertBack = Length.Millimetres.ToFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.3, 91.44)]
		[TestCase(2.0, 609.6)]
		[TestCase(0.06, 18.288)]
		public void ConvertKnownFeetToMillimetres(double input, double expectation)
		{
			var result = Length.Feet.ToMillimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFeetToCentimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Feet.ToCentimetres(value);
				var convertBack = Length.Centimetres.ToFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.07, 2.1336)]
		[TestCase(3.5, 106.68)]
		[TestCase(89.0, 2712.72)]
		public void ConvertKnownFeetToCentimetres(double input, double expectation)
		{
			var result = Length.Feet.ToCentimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFeetToMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Feet.ToMetres(value);
				var convertBack = Length.Metres.ToFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 274.32)]
		[TestCase(1.2, 0.36576)]
		[TestCase(0.8, 0.24384)]
		public void ConvertKnownFeetToMetres(double input, double expectation)
		{
			var result = Length.Feet.ToMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFeetToKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Feet.ToKilometres(value);
				var convertBack = Length.Kilometres.ToFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1999.0, 0.6092952)]
		[TestCase(123456.0, 37.6293888)]
		[TestCase(800.0, 0.24384)]
		public void ConvertKnownFeetToKilometres(double input, double expectation)
		{
			var result = Length.Feet.ToKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFeetToInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Feet.ToInches(value);
				var convertBack = Length.Inches.ToFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8.0, 96.0)]
		[TestCase(1.2, 14.4)]
		[TestCase(0.4, 4.8)]
		public void ConvertKnownFeetToInches(double input, double expectation)
		{
			var result = Length.Feet.ToInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFeetToYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Feet.ToYards(value);
				var convertBack = Length.Yards.ToFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(78.0, 26.0)]
		[TestCase(0.1, 0.0333333)]
		[TestCase(7162.0, 2387.333)]
		public void ConvertKnownFeetToYards(double input, double expectation)
		{
			var result = Length.Feet.ToYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFeetToMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Feet.ToMiles(value);
				var convertBack = Length.Miles.ToFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9000.0, 1.704545)]
		[TestCase(1999.0, 0.3785985)]
		[TestCase(5020.0, 0.9507576)]
		public void ConvertKnownFeetToMiles(double input, double expectation)
		{
			var result = Length.Feet.ToMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromFeetToNauticalMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Feet.ToNauticalMiles(value);
				var convertBack = Length.NauticalMiles.ToFeet(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8765.0, 1.442533)]
		[TestCase(19000.0, 3.1269978)]
		[TestCase(1000.0, 0.164579)]
		public void ConvertKnownFeetToNauticalMiles(double input, double expectation)
		{
			var result = Length.Feet.ToNauticalMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class InchesTests
	{
		[Property]
		public void FromInchesToMillimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Inches.ToMillimetres(value);
				var convertBack = Length.Millimetres.ToInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.0, 25.4)]
		[TestCase(0.6, 15.24)]
		[TestCase(456.0, 11582.4)]
		public void ConvertKnownInchesToMillimetres(double input, double expectation)
		{
			var result = Length.Inches.ToMillimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromInchesToCentimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Inches.ToCentimetres(value);
				var convertBack = Length.Centimetres.ToInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123.0, 312.42)]
		[TestCase(0.9, 2.286)]
		[TestCase(3.4, 8.636)]
		public void ConvertKnownInchesToCentimetres(double input, double expectation)
		{
			var result = Length.Inches.ToCentimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromInchesToMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Inches.ToMetres(value);
				var convertBack = Length.Metres.ToInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.4, 0.08636)]
		[TestCase(1002.0, 25.4508)]
		[TestCase(56.0, 1.4224)]
		public void ConvertKnownInchesToMetres(double input, double expectation)
		{
			var result = Length.Inches.ToMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromInchesToKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Inches.ToKilometres(value);
				var convertBack = Length.Kilometres.ToInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(17890.0, 0.454406)]
		[TestCase(999000.0, 25.3746)]
		[TestCase(100200.0, 2.54508)]
		public void ConvertKnownInchesToKilometres(double input, double expectation)
		{
			var result = Length.Inches.ToKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromInchesToFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Inches.ToFeet(value);
				var convertBack = Length.Feet.ToInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(23.0, 1.91667)]
		[TestCase(0.9, 0.075)]
		[TestCase(479.0, 39.9167)]
		public void ConvertKnownInchesToFeet(double input, double expectation)
		{
			var result = Length.Inches.ToFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromInchesToYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Inches.ToYards(value);
				var convertBack = Length.Yards.ToInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123.0, 3.41667)]
		[TestCase(6.7, 0.186111)]
		[TestCase(9.0, 0.25)]
		public void ConvertKnownInchesToYards(double input, double expectation)
		{
			var result = Length.Inches.ToYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromInchesToMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Inches.ToMiles(value);
				var convertBack = Length.Miles.ToInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9000.0, 0.1420455)]
		[TestCase(123456.0, 1.94848485)]
		[TestCase(8800.0, 0.1388889)]
		public void ConvertKnownInchesToMiles(double input, double expectation)
		{
			var result = Length.Inches.ToMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromInchesToNauticalMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Inches.ToNauticalMiles(value);
				var convertBack = Length.NauticalMiles.ToInches(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9000.0, 0.1234341)]
		[TestCase(123456.0, 1.69318704)]
		[TestCase(100200.0, 1.37423326)]
		public void ConvertKnownInchesToNauticalMiles(double input, double expectation)
		{
			var result = Length.Inches.ToNauticalMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class KilometresTests
	{
		[Property]
		public void FromKilometresToMillimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Kilometres.ToMillimetres(value);
				var convertBack = Length.Millimetres.ToKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.09, 90000.0)]
		[TestCase(0.12, 120000.0)]
		[TestCase(2.3, 2.3e+6)]
		public void ConvertKnownKilometresToMillimetres(double input, double expectation)
		{
			var result = Length.Kilometres.ToMillimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilometresToCentimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Kilometres.ToCentimetres(value);
				var convertBack = Length.Centimetres.ToKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(7.9, 790000.0)]
		[TestCase(0.2, 20000.0)]
		[TestCase(0.09, 9000.0)]
		public void ConvertKnownKilometresToCentimetres(double input, double expectation)
		{
			var result = Length.Kilometres.ToCentimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilometresToMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Kilometres.ToMetres(value);
				var convertBack = Length.Metres.ToKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.8, 800.0)]
		[TestCase(45.0, 45000.0)]
		[TestCase(1.2, 1200)]
		public void ConvertKnownKilometresToMetres(double input, double expectation)
		{
			var result = Length.Kilometres.ToMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilometresToInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Kilometres.ToInches(value);
				var convertBack = Length.Inches.ToKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.2, 47244.1)]
		[TestCase(0.65, 25590.55)]
		[TestCase(5.0, 196850.3937)]
		public void ConvertKnownKilometresToInches(double input, double expectation)
		{
			var result = Length.Kilometres.ToInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilometresToFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Kilometres.ToFeet(value);
				var convertBack = Length.Feet.ToKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(3.8, 12467.2)]
		[TestCase(1.2, 3937.01)]
		[TestCase(0.65, 2132.546)]
		public void ConvertKnownKilometresToFeet(double input, double expectation)
		{
			var result = Length.Kilometres.ToFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilometresToYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Kilometres.ToYards(value);
				var convertBack = Length.Yards.ToKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.08, 87.48906)]
		[TestCase(1.2, 1312.34)]
		[TestCase(34.0, 37182.852143)]
		public void ConvertKnownKilometresToYards(double input, double expectation)
		{
			var result = Length.Kilometres.ToYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilometresToMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Kilometres.ToMiles(value);
				var convertBack = Length.Miles.ToKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 7.45645)]
		[TestCase(0.9, 0.559234)]
		[TestCase(3.9, 2.42335)]
		public void ConvertKnownKilometresToMiles(double input, double expectation)
		{
			var result = Length.Kilometres.ToMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilometresToNauticalMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Kilometres.ToNauticalMiles(value);
				var convertBack = Length.NauticalMiles.ToKilometres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.2, 0.647948)]
		[TestCase(0.2, 0.107991)]
		[TestCase(99.9, 53.94168)]
		public void ConvertKnownKilometresToNauticalMiles(double input, double expectation)
		{
			var result = Length.Kilometres.ToNauticalMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class MetresTests
	{
		[Property]
		public void FromMetresToMillimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Metres.ToMillimetres(value);
				var convertBack = Length.Millimetres.ToMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123.0, 123000.0)]
		[TestCase(0.9, 900.0)]
		[TestCase(0.0023, 2.3)]
		public void ConvertKnownMetresToMillimetres(double input, double expectation)
		{
			var result = Length.Metres.ToMillimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMetresToCentimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Metres.ToCentimetres(value);
				var convertBack = Length.Centimetres.ToMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.3, 230.0)]
		[TestCase(34.0, 3400.0)]
		[TestCase(0.9, 90.0)]
		public void ConvertKnownMetresToCentimetres(double input, double expectation)
		{
			var result = Length.Metres.ToCentimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMetresToKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Metres.ToKilometres(value);
				var convertBack = Length.Kilometres.ToMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(100.0, 0.1)]
		[TestCase(123456.0, 123.456)]
		[TestCase(91.1, 0.0911)]
		public void ConvertKnownMetresToKilometres(double input, double expectation)
		{
			var result = Length.Metres.ToKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMetresToInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Metres.ToInches(value);
				var convertBack = Length.Inches.ToMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 472.441)]
		[TestCase(9.3, 366.142)]
		[TestCase(0.1, 3.93701)]
		public void ConvertKnownMetresToInches(double input, double expectation)
		{
			var result = Length.Metres.ToInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMetresToFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Metres.ToFeet(value);
				var convertBack = Length.Feet.ToMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(67.0, 219.816)]
		[TestCase(1.2, 3.93701)]
		[TestCase(0.7, 2.29659)]
		public void ConvertKnownMetresToFeet(double input, double expectation)
		{
			var result = Length.Metres.ToFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMetresToYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Metres.ToYards(value);
				var convertBack = Length.Yards.ToMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.8, 0.874891)]
		[TestCase(34.5, 37.72966)]
		[TestCase(1.23, 1.345144)]
		public void ConvertKnownMetresToYards(double input, double expectation)
		{
			var result = Length.Metres.ToYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMetresToMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Metres.ToMiles(value);
				var convertBack = Length.Miles.ToMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(7900.0, 4.908832)]
		[TestCase(123456.0, 76.7120019)]
		[TestCase(1000.0, 0.621371)]
		public void ConvertKnownMetresToMiles(double input, double expectation)
		{
			var result = Length.Metres.ToMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMetresToNauticalMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Metres.ToNauticalMiles(value);
				var convertBack = Length.NauticalMiles.ToMetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 0.485961)]
		[TestCase(71819.0, 38.779158)]
		[TestCase(123456.0, 66.6609071)]
		public void ConvertKnownMetresToNauticalMiles(double input, double expectation)
		{
			var result = Length.Metres.ToNauticalMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class MilesTests
	{
		[Property]
		public void FromMilesToMillimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Miles.ToMillimetres(value);
				var convertBack = Length.Millimetres.ToMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.09, 144840.95999)]
		[TestCase(0.001, 1609.344)]
		[TestCase(0.5, 804672.0)]
		public void ConvertKnownMilesToMillimetres(double input, double expectation)
		{
			var result = Length.Miles.ToMillimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMilesToCentimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Miles.ToCentimetres(value);
				var convertBack = Length.Centimetres.ToMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.23, 37014.91)]
		[TestCase(0.01, 1609.344)]
		[TestCase(0.8, 128747.52)]
		public void ConvertKnownMilesToCentimetres(double input, double expectation)
		{
			var result = Length.Miles.ToCentimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMilesToMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Miles.ToMetres(value);
				var convertBack = Length.Metres.ToMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.1, 160.934)]
		[TestCase(0.08, 128.7475)]
		[TestCase(0.002, 3.218688)]
		public void ConvertKnownMilesToMetres(double input, double expectation)
		{
			var result = Length.Miles.ToMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMilesToKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Miles.ToKilometres(value);
				var convertBack = Length.Kilometres.ToMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.0, 3.21869)]
		[TestCase(0.8, 1.28748)]
		[TestCase(23.0, 37.0149)]
		public void ConvertKnownMilesToKilometres(double input, double expectation)
		{
			var result = Length.Miles.ToKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMilesToInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Miles.ToInches(value);
				var convertBack = Length.Inches.ToMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.7, 44352.0)]
		[TestCase(0.09, 5702.4)]
		[TestCase(2.0, 126720.0)]
		public void ConvertKnownMilesToInches(double input, double expectation)
		{
			var result = Length.Miles.ToInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMilesToFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Miles.ToFeet(value);
				var convertBack = Length.Feet.ToMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.0, 10560.0)]
		[TestCase(0.6, 3168.0)]
		[TestCase(0.07, 369.6)]
		public void ConvertKnownMilesToFeet(double input, double expectation)
		{
			var result = Length.Miles.ToFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMilesToYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Miles.ToYards(value);
				var convertBack = Length.Yards.ToMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.07, 123.2)]
		[TestCase(2.0, 3520.0)]
		[TestCase(8.1, 14256.0)]
		public void ConvertKnownMilesToYards(double input, double expectation)
		{
			var result = Length.Miles.ToYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMilesToNauticalMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Miles.ToNauticalMiles(value);
				var convertBack = Length.NauticalMiles.ToMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8.1, 7.03871)]
		[TestCase(0.8, 0.695181)]
		[TestCase(1.2, 1.04277)]
		public void ConvertKnownMilesToNauticalMiles(double input, double expectation)
		{
			var result = Length.Miles.ToNauticalMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class MillimetresTests
	{
		[Property]
		public void FromMillimetresToCentimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Millimetres.ToCentimetres(value);
				var convertBack = Length.Centimetres.ToMillimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 90.0)]
		[TestCase(190.0, 19.0)]
		[TestCase(5000.0, 500.0)]
		public void ConvertKnownMillimetresToCentimetres(double input, double expectation)
		{
			var result = Length.Millimetres.ToCentimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillimetresToMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Millimetres.ToMetres(value);
				var convertBack = Length.Metres.ToMillimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1090.0, 1.09)]
		[TestCase(9000.0, 9.0)]
		[TestCase(12345.0, 12.345)]
		public void ConvertKnownMillimetresToMetres(double input, double expectation)
		{
			var result = Length.Millimetres.ToMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillimetresToKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Millimetres.ToKilometres(value);
				var convertBack = Length.Kilometres.ToMillimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(109000.0, 0.109)]
		[TestCase(9876543.0, 9.876543)]
		[TestCase(900800.0, 0.9008)]
		public void ConvertKnownMillimetresToKilometres(double input, double expectation)
		{
			var result = Length.Millimetres.ToKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillimetresToInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Millimetres.ToInches(value);
				var convertBack = Length.Inches.ToMillimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 35.4331)]
		[TestCase(123.0, 4.84252)]
		[TestCase(80.0, 3.14961)]
		public void ConvertKnownMillimetresToInches(double input, double expectation)
		{
			var result = Length.Millimetres.ToInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillimetresToFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Millimetres.ToFeet(value);
				var convertBack = Length.Feet.ToMillimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(800.0, 2.62467)]
		[TestCase(1234.0, 4.048556)]
		[TestCase(600.8, 1.9711286)]
		public void ConvertKnownMillimetresToFeet(double input, double expectation)
		{
			var result = Length.Millimetres.ToFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillimetresToYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Millimetres.ToYards(value);
				var convertBack = Length.Yards.ToMillimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(800.0, 0.874891)]
		[TestCase(1200.0, 1.312336)]
		[TestCase(909.0, 0.994094)]
		public void ConvertKnownMillimetresToYards(double input, double expectation)
		{
			var result = Length.Millimetres.ToYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillimetresToMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Millimetres.ToMiles(value);
				var convertBack = Length.Miles.ToMillimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900000.0, 0.559234073)]
		[TestCase(12345678.9, 7.671249217072)]
		[TestCase(100200300.0, 62.2615798735)]
		public void ConvertKnownMillimetresToMiles(double input, double expectation)
		{
			var result = Length.Millimetres.ToMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromMillimetresToNauticalMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Millimetres.ToNauticalMiles(value);
				var convertBack = Length.NauticalMiles.ToMillimetres(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9000000.0, 4.859611231)]
		[TestCase(12345678.0, 6.6661328294)]
		[TestCase(926000.0, 0.5)]
		public void ConvertKnownMillimetresToNauticalMiles(double input, double expectation)
		{
			var result = Length.Millimetres.ToNauticalMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class NauticalMilesTests
	{
		[Property]
		public void FromNauticalMilesToMillimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.NauticalMiles.ToMillimetres(value);
				var convertBack = Length.Millimetres.ToNauticalMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.08, 148160.0)]
		[TestCase(0.001, 1852.0)]
		[TestCase(0.02, 37040.0)]
		public void ConvertKnownNauticalMilesToMillimetres(double input, double expectation)
		{
			var result = Length.NauticalMiles.ToMillimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromNauticalMilesToCentimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.NauticalMiles.ToCentimetres(value);
				var convertBack = Length.Centimetres.ToNauticalMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.9, 166680.0)]
		[TestCase(1.2, 222240.0)]
		[TestCase(0.1, 18520.0)]
		public void ConvertKnownNauticalMilesToCentimetres(double input, double expectation)
		{
			var result = Length.NauticalMiles.ToCentimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromNauticalMilesToMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.NauticalMiles.ToMetres(value);
				var convertBack = Length.Metres.ToNauticalMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.1, 185.2)]
		[TestCase(1.2, 2222.4)]
		[TestCase(89.0, 164828.0)]
		public void ConvertKnownNauticalMilesToMetres(double input, double expectation)
		{
			var result = Length.NauticalMiles.ToMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromNauticalMilesToKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.NauticalMiles.ToKilometres(value);
				var convertBack = Length.Kilometres.ToNauticalMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(23.0, 42.596)]
		[TestCase(1.7, 3.1484)]
		[TestCase(56.0, 103.712)]
		public void ConvertKnownNauticalMilesToKilometres(double input, double expectation)
		{
			var result = Length.NauticalMiles.ToKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromNauticalMilesToInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.NauticalMiles.ToInches(value);
				var convertBack = Length.Inches.ToNauticalMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.1, 7291.34)]
		[TestCase(2.0, 145826.7999)]
		[TestCase(3.5, 255196.899)]
		public void ConvertKnownNauticalMilesToInches(double input, double expectation)
		{
			var result = Length.NauticalMiles.ToInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromNauticalMilesToFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.NauticalMiles.ToFeet(value);
				var convertBack = Length.Feet.ToNauticalMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1.4, 8506.56)]
		[TestCase(0.1, 607.612)]
		[TestCase(8.9, 54077.4680)]
		public void ConvertKnownNauticalMilesToFeet(double input, double expectation)
		{
			var result = Length.NauticalMiles.ToFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromNauticalMilesToYardsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.NauticalMiles.ToYards(value);
				var convertBack = Length.Yards.ToNauticalMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9.0, 18228.329)]
		[TestCase(1.5, 3038.06)]
		[TestCase(0.8, 1620.3)]
		public void ConvertKnownNauticalMilesToYards(double input, double expectation)
		{
			var result = Length.NauticalMiles.ToYards(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromNauticalMilesToMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.NauticalMiles.ToMiles(value);
				var convertBack = Length.Miles.ToNauticalMiles(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.5, 0.57539)]
		[TestCase(23.0, 26.4679)]
		[TestCase(8.2, 9.43639)]
		public void ConvertKnownNauticalMilesToMiles(double input, double expectation)
		{
			var result = Length.NauticalMiles.ToMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class YardsTests
	{
		[Property]
		public void FromYardsToMillimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Yards.ToMillimetres(value);
				var convertBack = Length.Millimetres.ToYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(34.0, 31089.6)]
		[TestCase(0.9, 822.96)]
		[TestCase(2.0, 1828.8)]
		public void ConvertKnownYardsToMillimetres(double input, double expectation)
		{
			var result = Length.Yards.ToMillimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromYardsToCentimetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Yards.ToCentimetres(value);
				var convertBack = Length.Centimetres.ToYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(9.8, 896.112)]
		[TestCase(0.8, 73.152)]
		[TestCase(12.0, 1097.28)]
		public void ConvertKnownYardsToCentimetres(double input, double expectation)
		{
			var result = Length.Yards.ToCentimetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromYardsToMetresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Yards.ToMetres(value);
				var convertBack = Length.Metres.ToYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 10.9728)]
		[TestCase(0.7, 0.64008)]
		[TestCase(3.0, 2.7432)]
		public void ConvertKnownYardsToMetres(double input, double expectation)
		{
			var result = Length.Yards.ToMetres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromYardsToKilometresAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Yards.ToKilometres(value);
				var convertBack = Length.Kilometres.ToYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(400.0, 0.36576)]
		[TestCase(1900.0, 1.73736)]
		[TestCase(12345.0, 11.288268)]
		public void ConvertKnownYardsToKilometres(double input, double expectation)
		{
			var result = Length.Yards.ToKilometres(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromYardsToInchesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Yards.ToInches(value);
				var convertBack = Length.Inches.ToYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(23.0, 828.0)]
		[TestCase(0.9, 32.4)]
		[TestCase(12.0, 432.0)]
		public void ConvertKnownYardsToInches(double input, double expectation)
		{
			var result = Length.Yards.ToInches(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromYardsToFeetAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Yards.ToFeet(value);
				var convertBack = Length.Feet.ToYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(12.0, 36.0)]
		[TestCase(1.8, 5.4)]
		[TestCase(67.0, 201.0)]
		public void ConvertKnownYardsToFeet(double input, double expectation)
		{
			var result = Length.Yards.ToFeet(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromYardsToMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Yards.ToMiles(value);
				var convertBack = Length.Miles.ToYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8900.0, 5.056818)]
		[TestCase(5000.0, 2.840909)]
		[TestCase(123456.0, 70.1454545)]
		public void ConvertKnownYardsToMiles(double input, double expectation)
		{
			var result = Length.Yards.ToMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromYardsToNauticalMilesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Length.Yards.ToNauticalMiles(value);
				var convertBack = Length.NauticalMiles.ToYards(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(1000.0, 0.493737)]
		[TestCase(202020.0, 99.7446479)]
		[TestCase(71928.0, 35.513479)]
		public void ConvertKnownYardsToNauticalMiles(double input, double expectation)
		{
			var result = Length.Yards.ToNauticalMiles(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
}
