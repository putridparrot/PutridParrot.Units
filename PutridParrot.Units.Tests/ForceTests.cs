// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

using NUnit.Framework;
using FsCheck;
using PropertyAttribute = FsCheck.NUnit.PropertyAttribute;

namespace PutridParrot.Units.Tests
{
	public class DynesTests
	{
		[Property]
		public void FromDynesToNewtonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Force.Dynes.ToNewtons(value);
				var convertBack = Force.Newtons.ToDynes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(900.0, 0.009)]
		[TestCase(1234.0, 0.01234)]
		[TestCase(46.0, 0.00046)]
		public void ConvertKnownDynesToNewtons(double input, double expectation)
		{
			var result = Force.Dynes.ToNewtons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromDynesToPoundalsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Force.Dynes.ToPoundals(value);
				var convertBack = Force.Poundals.ToDynes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(10099.0, 0.73046207)]
		[TestCase(80000.0, 5.7864111)]
		[TestCase(12345.0, 0.89291556)]
		public void ConvertKnownDynesToPoundals(double input, double expectation)
		{
			var result = Force.Dynes.ToPoundals(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromDynesToKilogramforceAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Force.Dynes.ToKilogramforce(value);
				var convertBack = Force.Kilogramforce.ToDynes(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(123456.0, 0.125890085)]
		[TestCase(80000.0, 0.081577297)]
		[TestCase(987654321.0, 1007.12712394)]
		public void ConvertKnownDynesToKilogramforce(double input, double expectation)
		{
			var result = Force.Dynes.ToKilogramforce(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class KilogramforceTests
	{
		[Property]
		public void FromKilogramforceToNewtonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Force.Kilogramforce.ToNewtons(value);
				var convertBack = Force.Newtons.ToKilogramforce(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(16.0, 156.906)]
		[TestCase(9.3, 91.2018)]
		[TestCase(5.0, 49.0332)]
		public void ConvertKnownKilogramforceToNewtons(double input, double expectation)
		{
			var result = Force.Kilogramforce.ToNewtons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilogramforceToDynesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Force.Kilogramforce.ToDynes(value);
				var convertBack = Force.Dynes.ToKilogramforce(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.1, 98066.5)]
		[TestCase(0.009, 8825.985)]
		[TestCase(2.0, 1961330.0)]
		public void ConvertKnownKilogramforceToDynes(double input, double expectation)
		{
			var result = Force.Kilogramforce.ToDynes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromKilogramforceToPoundalsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Force.Kilogramforce.ToPoundals(value);
				var convertBack = Force.Poundals.ToKilogramforce(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(2.0, 141.863)]
		[TestCase(8.4, 595.826)]
		[TestCase(0.9, 63.8385)]
		public void ConvertKnownKilogramforceToPoundals(double input, double expectation)
		{
			var result = Force.Kilogramforce.ToPoundals(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class NewtonsTests
	{
		[Property]
		public void FromNewtonsToDynesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Force.Newtons.ToDynes(value);
				var convertBack = Force.Dynes.ToNewtons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.7, 70000.0)]
		[TestCase(0.08, 8000.0)]
		[TestCase(2.3, 230000.0)]
		public void ConvertKnownNewtonsToDynes(double input, double expectation)
		{
			var result = Force.Newtons.ToDynes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromNewtonsToPoundalsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Force.Newtons.ToPoundals(value);
				var convertBack = Force.Poundals.ToNewtons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(190.0, 1374.27)]
		[TestCase(0.7, 5.06311)]
		[TestCase(89.0, 643.738)]
		public void ConvertKnownNewtonsToPoundals(double input, double expectation)
		{
			var result = Force.Newtons.ToPoundals(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromNewtonsToKilogramforceAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Force.Newtons.ToKilogramforce(value);
				var convertBack = Force.Kilogramforce.ToNewtons(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(8.7, 0.887153)]
		[TestCase(109.0, 11.1149)]
		[TestCase(6.9, 0.703604)]
		public void ConvertKnownNewtonsToKilogramforce(double input, double expectation)
		{
			var result = Force.Newtons.ToKilogramforce(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
	public class PoundalsTests
	{
		[Property]
		public void FromPoundalsToNewtonsAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Force.Poundals.ToNewtons(value);
				var convertBack = Force.Newtons.ToPoundals(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(800.0, 110.604)]
		[TestCase(8.2, 1.13369)]
		[TestCase(190.0, 26.2684)]
		public void ConvertKnownPoundalsToNewtons(double input, double expectation)
		{
			var result = Force.Poundals.ToNewtons(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPoundalsToDynesAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Force.Poundals.ToDynes(value);
				var convertBack = Force.Dynes.ToPoundals(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(0.01, 138.255)]
		[TestCase(2.0, 27651.0)]
		[TestCase(0.9, 12442.94589384)]
		public void ConvertKnownPoundalsToDynes(double input, double expectation)
		{
			var result = Force.Poundals.ToDynes(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

		[Property]
		public void FromPoundalsToKilogramforceAndBack()
		{
			Prop.ForAll<int>(value =>
			{
				var convertTo = Force.Poundals.ToKilogramforce(value);
				var convertBack = Force.Kilogramforce.ToPoundals(convertTo);
				return Is.EqualTo(convertBack).Within(0.01).ApplyTo(value).IsSuccess;
			}).QuickCheckThrowOnFailure();
		}

		[TestCase(34.0, 0.479335)]
		[TestCase(101.1, 1.4253161)]
		[TestCase(9.5, 0.133932)]
		public void ConvertKnownPoundalsToKilogramforce(double input, double expectation)
		{
			var result = Force.Poundals.ToKilogramforce(input);
			Assert.AreEqual(expectation, result, 0.01);
		}

	}
}
